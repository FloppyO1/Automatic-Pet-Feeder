
automatic pet feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001694  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c30  08004c30  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004c30  08004c30  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c30  08004c30  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c34  08004c34  00014c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000020  08004c58  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08004c58  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016049  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003582  00000000  00000000  000360d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00009588  00000000  00000000  00039656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cf0  00000000  00000000  00042be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d12  00000000  00000000  000438d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000161d3  00000000  00000000  000445e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000190f2  00000000  00000000  0005a7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00087a1e  00000000  00000000  000738a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000293c  00000000  00000000  000fb2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  000fdc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000020 	.word	0x20000020
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003584 	.word	0x08003584

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000024 	.word	0x20000024
 80000fc:	08003584 	.word	0x08003584

08000100 <__gnu_thumb1_case_uqi>:
 8000100:	b402      	push	{r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0049      	lsls	r1, r1, #1
 8000108:	5c09      	ldrb	r1, [r1, r0]
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	448e      	add	lr, r1
 800010e:	bc02      	pop	{r1}
 8000110:	4770      	bx	lr
 8000112:	46c0      	nop			; (mov r8, r8)

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <decToBcd>:
 */

#include "DS3231lib.h"

/* convert normal decimal numbers to binary coded decimal */
uint8_t decToBcd(int val) {
 8000400:	b570      	push	{r4, r5, r6, lr}
	return (uint8_t) ((val / 10 * 16) + (val % 10));
 8000402:	210a      	movs	r1, #10
uint8_t decToBcd(int val) {
 8000404:	0005      	movs	r5, r0
	return (uint8_t) ((val / 10 * 16) + (val % 10));
 8000406:	f7ff ff0f 	bl	8000228 <__divsi3>
 800040a:	210a      	movs	r1, #10
 800040c:	0104      	lsls	r4, r0, #4
 800040e:	0028      	movs	r0, r5
 8000410:	f7ff fff0 	bl	80003f4 <__aeabi_idivmod>
 8000414:	1864      	adds	r4, r4, r1
 8000416:	b2e0      	uxtb	r0, r4
}
 8000418:	bd70      	pop	{r4, r5, r6, pc}

0800041a <bcdToDec>:

/* convert binary coded decimal to normal decimal numbers */
int bcdToDec(uint8_t val) {
	return (int) ((val / 16 * 10) + (val % 16));
 800041a:	0902      	lsrs	r2, r0, #4
int bcdToDec(uint8_t val) {
 800041c:	0003      	movs	r3, r0
	return (int) ((val / 16 * 10) + (val % 16));
 800041e:	200a      	movs	r0, #10
 8000420:	4350      	muls	r0, r2
 8000422:	220f      	movs	r2, #15
 8000424:	4013      	ands	r3, r2
 8000426:	18c0      	adds	r0, r0, r3
}
 8000428:	4770      	bx	lr

0800042a <Set_Time>:

/* function to set time */
void Set_Time(uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom,
		uint8_t month, uint8_t year, I2C_HandleTypeDef *i2c) {
 800042a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042c:	b08b      	sub	sp, #44	; 0x2c
 800042e:	001d      	movs	r5, r3
 8000430:	ab10      	add	r3, sp, #64	; 0x40
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	000f      	movs	r7, r1
 8000436:	9305      	str	r3, [sp, #20]
 8000438:	ab11      	add	r3, sp, #68	; 0x44
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	0016      	movs	r6, r2
 800043e:	9306      	str	r3, [sp, #24]
 8000440:	ab12      	add	r3, sp, #72	; 0x48
 8000442:	781b      	ldrb	r3, [r3, #0]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 8000444:	ac08      	add	r4, sp, #32
		uint8_t month, uint8_t year, I2C_HandleTypeDef *i2c) {
 8000446:	9307      	str	r3, [sp, #28]
	set_time[0] = decToBcd(sec);
 8000448:	f7ff ffda 	bl	8000400 <decToBcd>
 800044c:	7020      	strb	r0, [r4, #0]
	set_time[1] = decToBcd(min);
 800044e:	0038      	movs	r0, r7
 8000450:	f7ff ffd6 	bl	8000400 <decToBcd>
 8000454:	7060      	strb	r0, [r4, #1]
	set_time[2] = decToBcd(hour);
 8000456:	0030      	movs	r0, r6
 8000458:	f7ff ffd2 	bl	8000400 <decToBcd>
 800045c:	70a0      	strb	r0, [r4, #2]
	set_time[3] = decToBcd(dow);
 800045e:	0028      	movs	r0, r5
 8000460:	f7ff ffce 	bl	8000400 <decToBcd>
 8000464:	70e0      	strb	r0, [r4, #3]
	set_time[4] = decToBcd(dom);
 8000466:	9805      	ldr	r0, [sp, #20]
 8000468:	f7ff ffca 	bl	8000400 <decToBcd>
 800046c:	7120      	strb	r0, [r4, #4]
	set_time[5] = decToBcd(month);
 800046e:	9806      	ldr	r0, [sp, #24]
 8000470:	f7ff ffc6 	bl	8000400 <decToBcd>
 8000474:	7160      	strb	r0, [r4, #5]
	set_time[6] = decToBcd(year);
 8000476:	9807      	ldr	r0, [sp, #28]
 8000478:	f7ff ffc2 	bl	8000400 <decToBcd>

	//HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
	HAL_I2C_Mem_Write(i2c, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 800047c:	23fa      	movs	r3, #250	; 0xfa
 800047e:	009b      	lsls	r3, r3, #2
	set_time[6] = decToBcd(year);
 8000480:	71a0      	strb	r0, [r4, #6]
	HAL_I2C_Mem_Write(i2c, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 8000482:	9302      	str	r3, [sp, #8]
 8000484:	2307      	movs	r3, #7
 8000486:	2200      	movs	r2, #0
 8000488:	9301      	str	r3, [sp, #4]
 800048a:	21d0      	movs	r1, #208	; 0xd0
 800048c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800048e:	9400      	str	r4, [sp, #0]
 8000490:	3b06      	subs	r3, #6
 8000492:	f002 f8ab 	bl	80025ec <HAL_I2C_Mem_Write>
	//HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
}
 8000496:	b00b      	add	sp, #44	; 0x2c
 8000498:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800049a <Get_Time>:
/* function read the time */
TIME Get_Time(I2C_HandleTypeDef *i2c) {
	TIME time;
	uint8_t get_time[7];
	//HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
	HAL_I2C_Mem_Read(i2c, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800049a:	23fa      	movs	r3, #250	; 0xfa
TIME Get_Time(I2C_HandleTypeDef *i2c) {
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_I2C_Mem_Read(i2c, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800049e:	009b      	lsls	r3, r3, #2
TIME Get_Time(I2C_HandleTypeDef *i2c) {
 80004a0:	b08b      	sub	sp, #44	; 0x2c
	HAL_I2C_Mem_Read(i2c, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80004a2:	9302      	str	r3, [sp, #8]
 80004a4:	2307      	movs	r3, #7
 80004a6:	ad08      	add	r5, sp, #32
TIME Get_Time(I2C_HandleTypeDef *i2c) {
 80004a8:	0004      	movs	r4, r0
	HAL_I2C_Mem_Read(i2c, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80004aa:	2200      	movs	r2, #0
 80004ac:	9301      	str	r3, [sp, #4]
TIME Get_Time(I2C_HandleTypeDef *i2c) {
 80004ae:	0008      	movs	r0, r1
	HAL_I2C_Mem_Read(i2c, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80004b0:	3b06      	subs	r3, #6
 80004b2:	21d0      	movs	r1, #208	; 0xd0
 80004b4:	9500      	str	r5, [sp, #0]
 80004b6:	f002 f97b 	bl	80027b0 <HAL_I2C_Mem_Read>
	//HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
	time.seconds = bcdToDec(get_time[0]);
 80004ba:	7828      	ldrb	r0, [r5, #0]
 80004bc:	f7ff ffad 	bl	800041a <bcdToDec>
 80004c0:	0007      	movs	r7, r0
	time.minutes = bcdToDec(get_time[1]);
 80004c2:	7868      	ldrb	r0, [r5, #1]
 80004c4:	f7ff ffa9 	bl	800041a <bcdToDec>
 80004c8:	0006      	movs	r6, r0
	time.hour = bcdToDec(get_time[2]);
 80004ca:	78a8      	ldrb	r0, [r5, #2]
 80004cc:	f7ff ffa5 	bl	800041a <bcdToDec>
 80004d0:	9004      	str	r0, [sp, #16]
	time.dayofweek = bcdToDec(get_time[3]);
 80004d2:	78e8      	ldrb	r0, [r5, #3]
 80004d4:	f7ff ffa1 	bl	800041a <bcdToDec>
 80004d8:	9005      	str	r0, [sp, #20]
	time.dayofmonth = bcdToDec(get_time[4]);
 80004da:	7928      	ldrb	r0, [r5, #4]
 80004dc:	f7ff ff9d 	bl	800041a <bcdToDec>
 80004e0:	9006      	str	r0, [sp, #24]
	time.month = bcdToDec(get_time[5]);
 80004e2:	7968      	ldrb	r0, [r5, #5]
 80004e4:	f7ff ff99 	bl	800041a <bcdToDec>
 80004e8:	9007      	str	r0, [sp, #28]
	time.year = bcdToDec(get_time[6]);
 80004ea:	79a8      	ldrb	r0, [r5, #6]
 80004ec:	f7ff ff95 	bl	800041a <bcdToDec>
	return time;
 80004f0:	71a0      	strb	r0, [r4, #6]
}
 80004f2:	0020      	movs	r0, r4
	return time;
 80004f4:	9b04      	ldr	r3, [sp, #16]
 80004f6:	7027      	strb	r7, [r4, #0]
 80004f8:	70a3      	strb	r3, [r4, #2]
 80004fa:	9b05      	ldr	r3, [sp, #20]
 80004fc:	7066      	strb	r6, [r4, #1]
 80004fe:	70e3      	strb	r3, [r4, #3]
 8000500:	9b06      	ldr	r3, [sp, #24]
 8000502:	7123      	strb	r3, [r4, #4]
 8000504:	9b07      	ldr	r3, [sp, #28]
 8000506:	7163      	strb	r3, [r4, #5]
}
 8000508:	b00b      	add	sp, #44	; 0x2c
 800050a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800050c <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
	uint16_t pos=0;

	// write the data
	for (int i=0; i<numofpages; i++)
 800050e:	2600      	movs	r6, #0
	uint16_t pos=0;
 8000510:	0037      	movs	r7, r6
{
 8000512:	001c      	movs	r4, r3
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000514:	185b      	adds	r3, r3, r1
 8000516:	115b      	asrs	r3, r3, #5
{
 8000518:	b089      	sub	sp, #36	; 0x24
	uint16_t numofpages = (endPage-startPage) + 1;
 800051a:	3301      	adds	r3, #1
{
 800051c:	9006      	str	r0, [sp, #24]
 800051e:	9207      	str	r2, [sp, #28]
	uint16_t numofpages = (endPage-startPage) + 1;
 8000520:	9305      	str	r3, [sp, #20]
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000522:	9b06      	ldr	r3, [sp, #24]
 8000524:	0025      	movs	r5, r4
 8000526:	199a      	adds	r2, r3, r6
 8000528:	b292      	uxth	r2, r2
 800052a:	0152      	lsls	r2, r2, #5
 800052c:	430a      	orrs	r2, r1
	if ((size+offset)<PAGE_SIZE) return size;
 800052e:	1863      	adds	r3, r4, r1
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000530:	b292      	uxth	r2, r2
	if ((size+offset)<PAGE_SIZE) return size;
 8000532:	2b1f      	cmp	r3, #31
 8000534:	dd02      	ble.n	800053c <EEPROM_Write+0x30>
	else return PAGE_SIZE-offset;
 8000536:	2320      	movs	r3, #32
 8000538:	1a59      	subs	r1, r3, r1
 800053a:	b28d      	uxth	r5, r1
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 800053c:	23fa      	movs	r3, #250	; 0xfa
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	9302      	str	r3, [sp, #8]
 8000542:	9b07      	ldr	r3, [sp, #28]
 8000544:	21a0      	movs	r1, #160	; 0xa0
 8000546:	19db      	adds	r3, r3, r7
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	4809      	ldr	r0, [pc, #36]	; (8000570 <EEPROM_Write+0x64>)
 800054c:	2302      	movs	r3, #2
 800054e:	9501      	str	r5, [sp, #4]
 8000550:	f002 f84c 	bl	80025ec <HAL_I2C_Mem_Write>
		startPage += 1;  // increment the page, so that a new page address can be selected for further write
		offset=0;   // since we will be writing to a new page, so offset will be 0
		size = size-bytesremaining;  // reduce the size of the bytes
		pos += bytesremaining;  // update the position for the data buffer

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000554:	2005      	movs	r0, #5
 8000556:	f001 fd9b 	bl	8002090 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 800055a:	9b05      	ldr	r3, [sp, #20]
		size = size-bytesremaining;  // reduce the size of the bytes
 800055c:	1b64      	subs	r4, r4, r5
		pos += bytesremaining;  // update the position for the data buffer
 800055e:	19ef      	adds	r7, r5, r7
	for (int i=0; i<numofpages; i++)
 8000560:	3601      	adds	r6, #1
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000562:	2100      	movs	r1, #0
		size = size-bytesremaining;  // reduce the size of the bytes
 8000564:	b2a4      	uxth	r4, r4
		pos += bytesremaining;  // update the position for the data buffer
 8000566:	b2bf      	uxth	r7, r7
	for (int i=0; i<numofpages; i++)
 8000568:	42b3      	cmp	r3, r6
 800056a:	dcda      	bgt.n	8000522 <EEPROM_Write+0x16>
	}
}
 800056c:	b009      	add	sp, #36	; 0x24
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000570:	2000004c 	.word	0x2000004c

08000574 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);

	uint16_t numofpages = (endPage-startPage) + 1;
	uint16_t pos=0;

	for (int i=0; i<numofpages; i++)
 8000576:	2600      	movs	r6, #0
	uint16_t pos=0;
 8000578:	0037      	movs	r7, r6
{
 800057a:	001c      	movs	r4, r3
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800057c:	185b      	adds	r3, r3, r1
 800057e:	115b      	asrs	r3, r3, #5
{
 8000580:	b089      	sub	sp, #36	; 0x24
	uint16_t numofpages = (endPage-startPage) + 1;
 8000582:	3301      	adds	r3, #1
{
 8000584:	9006      	str	r0, [sp, #24]
 8000586:	9207      	str	r2, [sp, #28]
	uint16_t numofpages = (endPage-startPage) + 1;
 8000588:	9305      	str	r3, [sp, #20]
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800058a:	9b06      	ldr	r3, [sp, #24]
 800058c:	0025      	movs	r5, r4
 800058e:	199a      	adds	r2, r3, r6
 8000590:	b292      	uxth	r2, r2
 8000592:	0152      	lsls	r2, r2, #5
 8000594:	430a      	orrs	r2, r1
	if ((size+offset)<PAGE_SIZE) return size;
 8000596:	1863      	adds	r3, r4, r1
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000598:	b292      	uxth	r2, r2
	if ((size+offset)<PAGE_SIZE) return size;
 800059a:	2b1f      	cmp	r3, #31
 800059c:	dd02      	ble.n	80005a4 <EEPROM_Read+0x30>
	else return PAGE_SIZE-offset;
 800059e:	2320      	movs	r3, #32
 80005a0:	1a59      	subs	r1, r3, r1
 80005a2:	b28d      	uxth	r5, r1
		uint16_t bytesremaining = bytestowrite(size, offset);
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80005a4:	23fa      	movs	r3, #250	; 0xfa
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	9302      	str	r3, [sp, #8]
 80005aa:	9b07      	ldr	r3, [sp, #28]
 80005ac:	21a0      	movs	r1, #160	; 0xa0
 80005ae:	19db      	adds	r3, r3, r7
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <EEPROM_Read+0x60>)
 80005b4:	2302      	movs	r3, #2
 80005b6:	9501      	str	r5, [sp, #4]
 80005b8:	f002 f8fa 	bl	80027b0 <HAL_I2C_Mem_Read>
	for (int i=0; i<numofpages; i++)
 80005bc:	9b05      	ldr	r3, [sp, #20]
		startPage += 1;
		offset=0;
		size = size-bytesremaining;
 80005be:	1b64      	subs	r4, r4, r5
		pos += bytesremaining;
 80005c0:	19ef      	adds	r7, r5, r7
	for (int i=0; i<numofpages; i++)
 80005c2:	3601      	adds	r6, #1
		offset=0;
 80005c4:	2100      	movs	r1, #0
		size = size-bytesremaining;
 80005c6:	b2a4      	uxth	r4, r4
		pos += bytesremaining;
 80005c8:	b2bf      	uxth	r7, r7
	for (int i=0; i<numofpages; i++)
 80005ca:	42b3      	cmp	r3, r6
 80005cc:	dcdd      	bgt.n	800058a <EEPROM_Read+0x16>
	}
}
 80005ce:	b009      	add	sp, #36	; 0x24
 80005d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	2000004c 	.word	0x2000004c

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b510      	push	{r4, lr}
 80005da:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005dc:	2234      	movs	r2, #52	; 0x34
 80005de:	2100      	movs	r1, #0
 80005e0:	a805      	add	r0, sp, #20
 80005e2:	f002 ff99 	bl	8003518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e6:	2100      	movs	r1, #0
 80005e8:	2210      	movs	r2, #16
 80005ea:	a801      	add	r0, sp, #4
 80005ec:	f002 ff94 	bl	8003518 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2080      	movs	r0, #128	; 0x80
 80005f2:	0080      	lsls	r0, r0, #2
 80005f4:	f002 fa0c 	bl	8002a10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000602:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000604:	3308      	adds	r3, #8
 8000606:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	029b      	lsls	r3, r3, #10
 800060c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060e:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000614:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000620:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f002 fa21 	bl	8002a68 <HAL_RCC_OscConfig>
 8000626:	1e01      	subs	r1, r0, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800062c:	e7fe      	b.n	800062c <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	2307      	movs	r3, #7
 8000630:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000632:	2390      	movs	r3, #144	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000636:	011b      	lsls	r3, r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800063c:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063e:	f002 fc71 	bl	8002f24 <HAL_RCC_ClockConfig>
 8000642:	2800      	cmp	r0, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x72>
 8000646:	b672      	cpsid	i
	while (1) {
 8000648:	e7fe      	b.n	8000648 <SystemClock_Config+0x70>
}
 800064a:	b012      	add	sp, #72	; 0x48
 800064c:	bd10      	pop	{r4, pc}
	...

08000650 <menuStart>:
void menuStart() {
 8000650:	b510      	push	{r4, lr}
	ssd1306_SetCursor(45, 18);
 8000652:	2112      	movs	r1, #18
 8000654:	202d      	movs	r0, #45	; 0x2d
 8000656:	f001 faaf 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("PET", Font_11x18, 1);
 800065a:	4c12      	ldr	r4, [pc, #72]	; (80006a4 <menuStart+0x54>)
 800065c:	2301      	movs	r3, #1
 800065e:	6821      	ldr	r1, [r4, #0]
 8000660:	6862      	ldr	r2, [r4, #4]
 8000662:	4811      	ldr	r0, [pc, #68]	; (80006a8 <menuStart+0x58>)
 8000664:	f001 fa94 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_SetCursor(31, 37);
 8000668:	2125      	movs	r1, #37	; 0x25
 800066a:	201f      	movs	r0, #31
 800066c:	f001 faa4 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("FEEDER", Font_11x18, 1);
 8000670:	cc06      	ldmia	r4!, {r1, r2}
 8000672:	2301      	movs	r3, #1
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <menuStart+0x5c>)
 8000676:	f001 fa8b 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 0);
 800067a:	2100      	movs	r1, #0
 800067c:	0008      	movs	r0, r1
 800067e:	f001 fa9b 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("made by Floppy Lab", Font_7x10, 1);
 8000682:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <menuStart+0x60>)
 8000684:	2301      	movs	r3, #1
 8000686:	ca06      	ldmia	r2, {r1, r2}
 8000688:	480a      	ldr	r0, [pc, #40]	; (80006b4 <menuStart+0x64>)
 800068a:	f001 fa81 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800068e:	f001 f9fd 	bl	8001a8c <ssd1306_UpdateScreen>
	HAL_Delay(2000);
 8000692:	20fa      	movs	r0, #250	; 0xfa
 8000694:	00c0      	lsls	r0, r0, #3
 8000696:	f001 fcfb 	bl	8002090 <HAL_Delay>
	menu = 1;
 800069a:	2201      	movs	r2, #1
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <menuStart+0x68>)
 800069e:	701a      	strb	r2, [r3, #0]
}
 80006a0:	bd10      	pop	{r4, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	20000004 	.word	0x20000004
 80006a8:	0800359c 	.word	0x0800359c
 80006ac:	080035a0 	.word	0x080035a0
 80006b0:	2000000c 	.word	0x2000000c
 80006b4:	080035a7 	.word	0x080035a7
 80006b8:	200000fa 	.word	0x200000fa

080006bc <printGear>:
void printGear(uint8_t x, uint8_t y) {
 80006bc:	b513      	push	{r0, r1, r4, lr}
	if (lineSel == 0 && color == 0) {
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <printGear+0x24>)
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <printGear+0x28>)
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2401      	movs	r4, #1
 80006c8:	431a      	orrs	r2, r3
 80006ca:	230a      	movs	r3, #10
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	d105      	bne.n	80006dc <printGear+0x20>
		ssd1306_DrawBitmap(x, y, ingranaggioInv, 10, 10, 1);
 80006d0:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <printGear+0x2c>)
		ssd1306_DrawBitmap(x, y, ingranaggio, 10, 10, 1);
 80006d2:	9401      	str	r4, [sp, #4]
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	f001 fabd 	bl	8001c54 <ssd1306_DrawBitmap>
}
 80006da:	bd13      	pop	{r0, r1, r4, pc}
		ssd1306_DrawBitmap(x, y, ingranaggio, 10, 10, 1);
 80006dc:	4a03      	ldr	r2, [pc, #12]	; (80006ec <printGear+0x30>)
 80006de:	e7f8      	b.n	80006d2 <printGear+0x16>
 80006e0:	200000ec 	.word	0x200000ec
 80006e4:	20000000 	.word	0x20000000
 80006e8:	080036b9 	.word	0x080036b9
 80006ec:	080036a5 	.word	0x080036a5

080006f0 <menuSettings>:
void menuSettings() {
 80006f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ssd1306_Fill(0);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f001 f9bc 	bl	8001a70 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 80006f8:	2100      	movs	r1, #0
 80006fa:	0008      	movs	r0, r1
 80006fc:	f001 fa5c 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("SETTINGS", Font_11x18, 1);
 8000700:	4a3b      	ldr	r2, [pc, #236]	; (80007f0 <menuSettings+0x100>)
 8000702:	2301      	movs	r3, #1
 8000704:	ca06      	ldmia	r2, {r1, r2}
 8000706:	483b      	ldr	r0, [pc, #236]	; (80007f4 <menuSettings+0x104>)
 8000708:	f001 fa42 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 19);
 800070c:	2113      	movs	r1, #19
 800070e:	2000      	movs	r0, #0
 8000710:	f001 fa52 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("MEAL SET", Font_7x10, 1);
 8000714:	4c38      	ldr	r4, [pc, #224]	; (80007f8 <menuSettings+0x108>)
 8000716:	2301      	movs	r3, #1
 8000718:	6862      	ldr	r2, [r4, #4]
 800071a:	6821      	ldr	r1, [r4, #0]
 800071c:	4837      	ldr	r0, [pc, #220]	; (80007fc <menuSettings+0x10c>)
 800071e:	f001 fa37 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 29);
 8000722:	211d      	movs	r1, #29
 8000724:	2000      	movs	r0, #0
 8000726:	f001 fa47 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("TYPE SET", Font_7x10, 1);
 800072a:	2301      	movs	r3, #1
 800072c:	6862      	ldr	r2, [r4, #4]
 800072e:	6821      	ldr	r1, [r4, #0]
 8000730:	4833      	ldr	r0, [pc, #204]	; (8000800 <menuSettings+0x110>)
 8000732:	f001 fa2d 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 39);
 8000736:	2127      	movs	r1, #39	; 0x27
 8000738:	2000      	movs	r0, #0
 800073a:	f001 fa3d 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("TIME SET", Font_7x10, 1);
 800073e:	2301      	movs	r3, #1
 8000740:	6862      	ldr	r2, [r4, #4]
 8000742:	6821      	ldr	r1, [r4, #0]
 8000744:	482f      	ldr	r0, [pc, #188]	; (8000804 <menuSettings+0x114>)
 8000746:	f001 fa23 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 49);
 800074a:	2131      	movs	r1, #49	; 0x31
 800074c:	2000      	movs	r0, #0
 800074e:	f001 fa33 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("ACTIVE?", Font_7x10, 1);//DA DECIDERE COME FARE LA DISATTIVAZIONE DEL DISPOSITIVO
 8000752:	2301      	movs	r3, #1
 8000754:	482c      	ldr	r0, [pc, #176]	; (8000808 <menuSettings+0x118>)
 8000756:	6821      	ldr	r1, [r4, #0]
 8000758:	6862      	ldr	r2, [r4, #4]
 800075a:	f001 fa19 	bl	8001b90 <ssd1306_WriteString>
	if (lineSel != 4) {
 800075e:	4e2b      	ldr	r6, [pc, #172]	; (800080c <menuSettings+0x11c>)
 8000760:	4d2b      	ldr	r5, [pc, #172]	; (8000810 <menuSettings+0x120>)
 8000762:	7833      	ldrb	r3, [r6, #0]
 8000764:	2b04      	cmp	r3, #4
 8000766:	d026      	beq.n	80007b6 <menuSettings+0xc6>
		if (status == 1) {
 8000768:	7829      	ldrb	r1, [r5, #0]
 800076a:	230a      	movs	r3, #10
			ssd1306_DrawBitmap(60, 49, attivo, 10, 10, 1);
 800076c:	4a29      	ldr	r2, [pc, #164]	; (8000814 <menuSettings+0x124>)
		if (status == 1) {
 800076e:	2901      	cmp	r1, #1
 8000770:	d001      	beq.n	8000776 <menuSettings+0x86>
			ssd1306_DrawBitmap(60, 49, nonAttivo, 10, 10, 1);
 8000772:	2101      	movs	r1, #1
 8000774:	4a28      	ldr	r2, [pc, #160]	; (8000818 <menuSettings+0x128>)
 8000776:	203c      	movs	r0, #60	; 0x3c
 8000778:	9101      	str	r1, [sp, #4]
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	3130      	adds	r1, #48	; 0x30
 800077e:	f001 fa69 	bl	8001c54 <ssd1306_DrawBitmap>
	switch (lineSel) {
 8000782:	7830      	ldrb	r0, [r6, #0]
 8000784:	3801      	subs	r0, #1
 8000786:	2803      	cmp	r0, #3
 8000788:	d80c      	bhi.n	80007a4 <menuSettings+0xb4>
 800078a:	f7ff fcb9 	bl	8000100 <__gnu_thumb1_case_uqi>
 800078e:	1002      	.short	0x1002
 8000790:	1412      	.short	0x1412
		ssd1306_SetCursor(60, 19);
 8000792:	2113      	movs	r1, #19
		ssd1306_SetCursor(60, 29);
 8000794:	203c      	movs	r0, #60	; 0x3c
 8000796:	f001 fa0f 	bl	8001bb8 <ssd1306_SetCursor>
		ssd1306_WriteChar('<', Font_7x10, 1);
 800079a:	cc06      	ldmia	r4!, {r1, r2}
 800079c:	2301      	movs	r3, #1
 800079e:	203c      	movs	r0, #60	; 0x3c
 80007a0:	f001 f9a6 	bl	8001af0 <ssd1306_WriteChar>
	printGear(118, 54);
 80007a4:	2136      	movs	r1, #54	; 0x36
 80007a6:	2076      	movs	r0, #118	; 0x76
 80007a8:	f7ff ff88 	bl	80006bc <printGear>
}
 80007ac:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		ssd1306_SetCursor(60, 29);
 80007ae:	211d      	movs	r1, #29
 80007b0:	e7f0      	b.n	8000794 <menuSettings+0xa4>
		ssd1306_SetCursor(60, 39);
 80007b2:	2127      	movs	r1, #39	; 0x27
 80007b4:	e7ee      	b.n	8000794 <menuSettings+0xa4>
			if (!color) {
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <menuSettings+0x12c>)
		if (status == 1) {
 80007b8:	7829      	ldrb	r1, [r5, #0]
			if (!color) {
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	230a      	movs	r3, #10
		if (status == 1) {
 80007be:	2901      	cmp	r1, #1
 80007c0:	d10e      	bne.n	80007e0 <menuSettings+0xf0>
			if (!color) {
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	d107      	bne.n	80007d6 <menuSettings+0xe6>
				ssd1306_DrawBitmap(60, 49, attivo, 10, 10, 1);
 80007c6:	4a13      	ldr	r2, [pc, #76]	; (8000814 <menuSettings+0x124>)
				ssd1306_DrawBitmap(60, 49, nonAttivo, 10, 10, 1);
 80007c8:	9101      	str	r1, [sp, #4]
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	3130      	adds	r1, #48	; 0x30
				ssd1306_DrawBitmap(60, 49, nonAttivoInv, 10, 10, 1);
 80007ce:	203c      	movs	r0, #60	; 0x3c
 80007d0:	f001 fa40 	bl	8001c54 <ssd1306_DrawBitmap>
 80007d4:	e7e6      	b.n	80007a4 <menuSettings+0xb4>
				ssd1306_DrawBitmap(60, 49, attivoInv, 10, 10, 1);
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <menuSettings+0x130>)
				ssd1306_DrawBitmap(60, 49, nonAttivoInv, 10, 10, 1);
 80007d8:	9101      	str	r1, [sp, #4]
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2131      	movs	r1, #49	; 0x31
 80007de:	e7f6      	b.n	80007ce <menuSettings+0xde>
			if (!color) {
 80007e0:	2101      	movs	r1, #1
 80007e2:	2a00      	cmp	r2, #0
 80007e4:	d101      	bne.n	80007ea <menuSettings+0xfa>
				ssd1306_DrawBitmap(60, 49, nonAttivo, 10, 10, 1);
 80007e6:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <menuSettings+0x128>)
 80007e8:	e7ee      	b.n	80007c8 <menuSettings+0xd8>
				ssd1306_DrawBitmap(60, 49, nonAttivoInv, 10, 10, 1);
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <menuSettings+0x134>)
 80007ec:	e7f4      	b.n	80007d8 <menuSettings+0xe8>
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	20000004 	.word	0x20000004
 80007f4:	080035ba 	.word	0x080035ba
 80007f8:	2000000c 	.word	0x2000000c
 80007fc:	080035c3 	.word	0x080035c3
 8000800:	080035cc 	.word	0x080035cc
 8000804:	080035d5 	.word	0x080035d5
 8000808:	080035de 	.word	0x080035de
 800080c:	200000ec 	.word	0x200000ec
 8000810:	20000001 	.word	0x20000001
 8000814:	0800367d 	.word	0x0800367d
 8000818:	080036cd 	.word	0x080036cd
 800081c:	20000000 	.word	0x20000000
 8000820:	08003691 	.word	0x08003691
 8000824:	080036e1 	.word	0x080036e1

08000828 <printMealType>:
void printMealType(Meal m, uint8_t mealN) {
 8000828:	b507      	push	{r0, r1, r2, lr}
	if (lineSel == mealN) {
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <printMealType+0x3c>)
void printMealType(Meal m, uint8_t mealN) {
 800082c:	9001      	str	r0, [sp, #4]
	if (lineSel == mealN) {
 800082e:	781a      	ldrb	r2, [r3, #0]
		c = 1;
 8000830:	2301      	movs	r3, #1
	if (lineSel == mealN) {
 8000832:	428a      	cmp	r2, r1
 8000834:	d101      	bne.n	800083a <printMealType+0x12>
		c = color;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <printMealType+0x40>)
 8000838:	781b      	ldrb	r3, [r3, #0]
	switch (m.type) {
 800083a:	aa01      	add	r2, sp, #4
 800083c:	7810      	ldrb	r0, [r2, #0]
 800083e:	2803      	cmp	r0, #3
 8000840:	d808      	bhi.n	8000854 <printMealType+0x2c>
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <printMealType+0x44>)
 8000844:	f7ff fc5c 	bl	8000100 <__gnu_thumb1_case_uqi>
 8000848:	0b090702 	.word	0x0b090702
		ssd1306_WriteString("-----", Font_7x10, c);
 800084c:	4808      	ldr	r0, [pc, #32]	; (8000870 <printMealType+0x48>)
		ssd1306_WriteString("dinner", Font_7x10, c);
 800084e:	ca06      	ldmia	r2, {r1, r2}
 8000850:	f001 f99e 	bl	8001b90 <ssd1306_WriteString>
}
 8000854:	bd07      	pop	{r0, r1, r2, pc}
		ssd1306_WriteString("break", Font_7x10, c);
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <printMealType+0x4c>)
 8000858:	e7f9      	b.n	800084e <printMealType+0x26>
		ssd1306_WriteString("lunch", Font_7x10, c);
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <printMealType+0x50>)
 800085c:	e7f7      	b.n	800084e <printMealType+0x26>
		ssd1306_WriteString("dinner", Font_7x10, c);
 800085e:	4807      	ldr	r0, [pc, #28]	; (800087c <printMealType+0x54>)
 8000860:	e7f5      	b.n	800084e <printMealType+0x26>
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	200000ec 	.word	0x200000ec
 8000868:	20000000 	.word	0x20000000
 800086c:	2000000c 	.word	0x2000000c
 8000870:	080035e6 	.word	0x080035e6
 8000874:	080035ec 	.word	0x080035ec
 8000878:	080035f2 	.word	0x080035f2
 800087c:	080035f8 	.word	0x080035f8

08000880 <printMealStatus>:
void printMealStatus(Meal m, uint8_t mealN) {
 8000880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		if (lineSel == mealN + 3 && !color) {
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <printMealStatus+0x58>)
void printMealStatus(Meal m, uint8_t mealN) {
 8000884:	9003      	str	r0, [sp, #12]
		if (lineSel == mealN + 3 && !color) {
 8000886:	781c      	ldrb	r4, [r3, #0]
			ssd1306_DrawBitmap(59, 29 + (mealN - 1) * 10, attivoInv, 10, 10, 1);
 8000888:	230a      	movs	r3, #10
		if (lineSel == mealN + 3 && !color) {
 800088a:	1cca      	adds	r2, r1, #3
			ssd1306_DrawBitmap(59, 29 + (mealN - 1) * 10, attivoInv, 10, 10, 1);
 800088c:	4359      	muls	r1, r3
	if (m.type != 0) {
 800088e:	b2c0      	uxtb	r0, r0
			ssd1306_DrawBitmap(59, 29 + (mealN - 1) * 10, attivoInv, 10, 10, 1);
 8000890:	3113      	adds	r1, #19
 8000892:	b2c9      	uxtb	r1, r1
	if (m.type != 0) {
 8000894:	2800      	cmp	r0, #0
 8000896:	d014      	beq.n	80008c2 <printMealStatus+0x42>
		if (lineSel == mealN + 3 && !color) {
 8000898:	4294      	cmp	r4, r2
 800089a:	d10b      	bne.n	80008b4 <printMealStatus+0x34>
 800089c:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <printMealStatus+0x5c>)
 800089e:	7812      	ldrb	r2, [r2, #0]
 80008a0:	2a00      	cmp	r2, #0
 80008a2:	d107      	bne.n	80008b4 <printMealStatus+0x34>
			ssd1306_DrawBitmap(59, 29 + (mealN - 1) * 10, attivoInv, 10, 10, 1);
 80008a4:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <printMealStatus+0x60>)
			ssd1306_DrawBitmap(59, 29 + (mealN - 1) * 10, nonAttivoInv, 10, 10,
 80008a6:	2001      	movs	r0, #1
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	9001      	str	r0, [sp, #4]
 80008ac:	303a      	adds	r0, #58	; 0x3a
			ssd1306_DrawBitmap(59, 29 + (mealN - 1) * 10, nonAttivo, 10, 10, 1);
 80008ae:	f001 f9d1 	bl	8001c54 <ssd1306_DrawBitmap>
}
 80008b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
			ssd1306_DrawBitmap(59, 29 + (mealN - 1) * 10, attivo, 10, 10, 1);
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <printMealStatus+0x64>)
			ssd1306_DrawBitmap(59, 29 + (mealN - 1) * 10, nonAttivo, 10, 10, 1);
 80008b6:	2301      	movs	r3, #1
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	3309      	adds	r3, #9
 80008bc:	203b      	movs	r0, #59	; 0x3b
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	e7f5      	b.n	80008ae <printMealStatus+0x2e>
		if (lineSel == mealN + 3 && !color) {
 80008c2:	4294      	cmp	r4, r2
 80008c4:	d105      	bne.n	80008d2 <printMealStatus+0x52>
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <printMealStatus+0x5c>)
 80008c8:	7812      	ldrb	r2, [r2, #0]
 80008ca:	2a00      	cmp	r2, #0
 80008cc:	d101      	bne.n	80008d2 <printMealStatus+0x52>
			ssd1306_DrawBitmap(59, 29 + (mealN - 1) * 10, nonAttivoInv, 10, 10,
 80008ce:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <printMealStatus+0x68>)
 80008d0:	e7e9      	b.n	80008a6 <printMealStatus+0x26>
			ssd1306_DrawBitmap(59, 29 + (mealN - 1) * 10, nonAttivo, 10, 10, 1);
 80008d2:	4a06      	ldr	r2, [pc, #24]	; (80008ec <printMealStatus+0x6c>)
 80008d4:	e7ef      	b.n	80008b6 <printMealStatus+0x36>
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	200000ec 	.word	0x200000ec
 80008dc:	20000000 	.word	0x20000000
 80008e0:	08003691 	.word	0x08003691
 80008e4:	0800367d 	.word	0x0800367d
 80008e8:	080036e1 	.word	0x080036e1
 80008ec:	080036cd 	.word	0x080036cd

080008f0 <mealCheck>:
uint8_t mealCheck() {	//aggiungere tanti if quanti i pasti 'meal'
 80008f0:	b510      	push	{r4, lr}
	if (time.hour == m1.hour && time.minutes == m1.min && time.seconds == 0
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <mealCheck+0x70>)
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <mealCheck+0x74>)
 80008f6:	7899      	ldrb	r1, [r3, #2]
 80008f8:	7850      	ldrb	r0, [r2, #1]
 80008fa:	4288      	cmp	r0, r1
 80008fc:	d10d      	bne.n	800091a <mealCheck+0x2a>
 80008fe:	785c      	ldrb	r4, [r3, #1]
 8000900:	7890      	ldrb	r0, [r2, #2]
 8000902:	4284      	cmp	r4, r0
 8000904:	d109      	bne.n	800091a <mealCheck+0x2a>
			&& m1.done == 0) {
 8000906:	7818      	ldrb	r0, [r3, #0]
 8000908:	78d4      	ldrb	r4, [r2, #3]
 800090a:	4320      	orrs	r0, r4
 800090c:	d105      	bne.n	800091a <mealCheck+0x2a>
		pastoDaServ = 1;
 800090e:	2101      	movs	r1, #1
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <mealCheck+0x78>)
		m1.done = 1;
 8000912:	70d1      	strb	r1, [r2, #3]
		pastoDaServ = 1;
 8000914:	7019      	strb	r1, [r3, #0]
		return m3.type;
 8000916:	7810      	ldrb	r0, [r2, #0]
}
 8000918:	bd10      	pop	{r4, pc}
	if (time.hour == m2.hour && time.minutes == m2.min && time.seconds == 0
 800091a:	4a14      	ldr	r2, [pc, #80]	; (800096c <mealCheck+0x7c>)
 800091c:	7850      	ldrb	r0, [r2, #1]
 800091e:	4288      	cmp	r0, r1
 8000920:	d10d      	bne.n	800093e <mealCheck+0x4e>
 8000922:	785c      	ldrb	r4, [r3, #1]
 8000924:	7890      	ldrb	r0, [r2, #2]
 8000926:	4284      	cmp	r4, r0
 8000928:	d109      	bne.n	800093e <mealCheck+0x4e>
			&& m2.done == 0) {
 800092a:	7818      	ldrb	r0, [r3, #0]
 800092c:	78d4      	ldrb	r4, [r2, #3]
 800092e:	4320      	orrs	r0, r4
 8000930:	d105      	bne.n	800093e <mealCheck+0x4e>
		pastoDaServ = 2;
 8000932:	2102      	movs	r1, #2
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <mealCheck+0x78>)
		pastoDaServ = 3;
 8000936:	7019      	strb	r1, [r3, #0]
		m3.done = 1;
 8000938:	2301      	movs	r3, #1
 800093a:	70d3      	strb	r3, [r2, #3]
 800093c:	e7eb      	b.n	8000916 <mealCheck+0x26>
	if (time.hour == m3.hour && time.minutes == m3.min && time.seconds == 0
 800093e:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <mealCheck+0x80>)
	return 0;//se viene ritornato 0 vuol dire che nessun pasto deve essere servito
 8000940:	2000      	movs	r0, #0
	if (time.hour == m3.hour && time.minutes == m3.min && time.seconds == 0
 8000942:	7854      	ldrb	r4, [r2, #1]
 8000944:	428c      	cmp	r4, r1
 8000946:	d1e7      	bne.n	8000918 <mealCheck+0x28>
 8000948:	785c      	ldrb	r4, [r3, #1]
 800094a:	7891      	ldrb	r1, [r2, #2]
 800094c:	428c      	cmp	r4, r1
 800094e:	d1e3      	bne.n	8000918 <mealCheck+0x28>
			&& m3.done == 0) {
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	78d1      	ldrb	r1, [r2, #3]
 8000954:	430b      	orrs	r3, r1
 8000956:	4283      	cmp	r3, r0
 8000958:	d1de      	bne.n	8000918 <mealCheck+0x28>
		pastoDaServ = 3;
 800095a:	2103      	movs	r1, #3
 800095c:	4b02      	ldr	r3, [pc, #8]	; (8000968 <mealCheck+0x78>)
 800095e:	e7ea      	b.n	8000936 <mealCheck+0x46>
 8000960:	200000ff 	.word	0x200000ff
 8000964:	200000ee 	.word	0x200000ee
 8000968:	200000fb 	.word	0x200000fb
 800096c:	200000f2 	.word	0x200000f2
 8000970:	200000f6 	.word	0x200000f6

08000974 <PrintNumber>:
void PrintNumber(int n, uint8_t cifre, uint8_t colore) {//numero da printare, cifre max numero, colore [0/1]
 8000974:	b5b0      	push	{r4, r5, r7, lr}
	char s[cifre + 1];
 8000976:	466b      	mov	r3, sp
 8000978:	3108      	adds	r1, #8
 800097a:	08c9      	lsrs	r1, r1, #3
 800097c:	00c9      	lsls	r1, r1, #3
 800097e:	1a5b      	subs	r3, r3, r1
void PrintNumber(int n, uint8_t cifre, uint8_t colore) {//numero da printare, cifre max numero, colore [0/1]
 8000980:	af00      	add	r7, sp, #0
	char s[cifre + 1];
 8000982:	469d      	mov	sp, r3
void PrintNumber(int n, uint8_t cifre, uint8_t colore) {//numero da printare, cifre max numero, colore [0/1]
 8000984:	0014      	movs	r4, r2
	itoa(n, s, 10); //converte int to string.  char* itoa(int value, char* str, int base);
 8000986:	4669      	mov	r1, sp
 8000988:	220a      	movs	r2, #10
 800098a:	f002 fd8c 	bl	80034a6 <itoa>
	ssd1306_WriteString(s, Font_7x10, colore);
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <PrintNumber+0x2c>)
 8000990:	0023      	movs	r3, r4
 8000992:	ca06      	ldmia	r2, {r1, r2}
 8000994:	4668      	mov	r0, sp
 8000996:	f001 f8fb 	bl	8001b90 <ssd1306_WriteString>
}
 800099a:	46bd      	mov	sp, r7
 800099c:	bdb0      	pop	{r4, r5, r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	2000000c 	.word	0x2000000c

080009a4 <menuSetTime>:
void menuSetTime() {
 80009a4:	b570      	push	{r4, r5, r6, lr}
	ssd1306_Fill(0);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f001 f862 	bl	8001a70 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 80009ac:	2100      	movs	r1, #0
 80009ae:	0008      	movs	r0, r1
 80009b0:	f001 f902 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("TIME SETT.", Font_11x18, 1);
 80009b4:	4a2c      	ldr	r2, [pc, #176]	; (8000a68 <menuSetTime+0xc4>)
 80009b6:	2301      	movs	r3, #1
 80009b8:	ca06      	ldmia	r2, {r1, r2}
 80009ba:	482c      	ldr	r0, [pc, #176]	; (8000a6c <menuSetTime+0xc8>)
 80009bc:	f001 f8e8 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_SetCursor(3, 19);
 80009c0:	2113      	movs	r1, #19
 80009c2:	2003      	movs	r0, #3
 80009c4:	f001 f8f8 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("      h  m", Font_7x10, 1);
 80009c8:	4c29      	ldr	r4, [pc, #164]	; (8000a70 <menuSetTime+0xcc>)
 80009ca:	2301      	movs	r3, #1
 80009cc:	6862      	ldr	r2, [r4, #4]
 80009ce:	6821      	ldr	r1, [r4, #0]
 80009d0:	4828      	ldr	r0, [pc, #160]	; (8000a74 <menuSetTime+0xd0>)
 80009d2:	f001 f8dd 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 29);
 80009d6:	211d      	movs	r1, #29
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 f8ed 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("time: ", Font_7x10, 1);
 80009de:	2301      	movs	r3, #1
 80009e0:	4825      	ldr	r0, [pc, #148]	; (8000a78 <menuSetTime+0xd4>)
 80009e2:	6821      	ldr	r1, [r4, #0]
 80009e4:	6862      	ldr	r2, [r4, #4]
 80009e6:	f001 f8d3 	bl	8001b90 <ssd1306_WriteString>
	if (timetoset.hour < 10) {
 80009ea:	4e24      	ldr	r6, [pc, #144]	; (8000a7c <menuSetTime+0xd8>)
 80009ec:	4d24      	ldr	r5, [pc, #144]	; (8000a80 <menuSetTime+0xdc>)
 80009ee:	78b3      	ldrb	r3, [r6, #2]
 80009f0:	2b09      	cmp	r3, #9
 80009f2:	d809      	bhi.n	8000a08 <menuSetTime+0x64>
		if (lineSel == 1) {
 80009f4:	782b      	ldrb	r3, [r5, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d12f      	bne.n	8000a5a <menuSetTime+0xb6>
			ssd1306_WriteChar('0', Font_7x10, color);
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <menuSetTime+0xe0>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
			ssd1306_WriteChar('0', Font_7x10, 1);
 80009fe:	2030      	movs	r0, #48	; 0x30
 8000a00:	6821      	ldr	r1, [r4, #0]
 8000a02:	6862      	ldr	r2, [r4, #4]
 8000a04:	f001 f874 	bl	8001af0 <ssd1306_WriteChar>
	if (lineSel == 1) {
 8000a08:	782b      	ldrb	r3, [r5, #0]
		PrintNumber(timetoset.hour, 2, 1);
 8000a0a:	2201      	movs	r2, #1
		PrintNumber(timetoset.hour, 2, color);
 8000a0c:	78b0      	ldrb	r0, [r6, #2]
	if (lineSel == 1) {
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d101      	bne.n	8000a16 <menuSetTime+0x72>
		PrintNumber(timetoset.hour, 2, color);
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <menuSetTime+0xe0>)
 8000a14:	781a      	ldrb	r2, [r3, #0]
		PrintNumber(timetoset.hour, 2, 1);
 8000a16:	2102      	movs	r1, #2
 8000a18:	f7ff ffac 	bl	8000974 <PrintNumber>
	ssd1306_WriteChar(':', Font_7x10, 1);
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	203a      	movs	r0, #58	; 0x3a
 8000a20:	6821      	ldr	r1, [r4, #0]
 8000a22:	6862      	ldr	r2, [r4, #4]
 8000a24:	f001 f864 	bl	8001af0 <ssd1306_WriteChar>
	if (timetoset.minutes < 10) {
 8000a28:	7873      	ldrb	r3, [r6, #1]
 8000a2a:	2b09      	cmp	r3, #9
 8000a2c:	d808      	bhi.n	8000a40 <menuSetTime+0x9c>
		if (lineSel == 2) {
 8000a2e:	782b      	ldrb	r3, [r5, #0]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d114      	bne.n	8000a5e <menuSetTime+0xba>
			ssd1306_WriteChar('0', Font_7x10, color);
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <menuSetTime+0xe0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
			ssd1306_WriteChar('0', Font_7x10, 1);
 8000a38:	2030      	movs	r0, #48	; 0x30
 8000a3a:	cc06      	ldmia	r4!, {r1, r2}
 8000a3c:	f001 f858 	bl	8001af0 <ssd1306_WriteChar>
	if (lineSel == 2) {
 8000a40:	7829      	ldrb	r1, [r5, #0]
		PrintNumber(timetoset.minutes, 2, color);
 8000a42:	7870      	ldrb	r0, [r6, #1]
	if (lineSel == 2) {
 8000a44:	2902      	cmp	r1, #2
 8000a46:	d10c      	bne.n	8000a62 <menuSetTime+0xbe>
		PrintNumber(timetoset.minutes, 2, color);
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <menuSetTime+0xe0>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
		PrintNumber(timetoset.minutes, 2, 1);
 8000a4c:	f7ff ff92 	bl	8000974 <PrintNumber>
	printGear(118, 54);
 8000a50:	2136      	movs	r1, #54	; 0x36
 8000a52:	2076      	movs	r0, #118	; 0x76
 8000a54:	f7ff fe32 	bl	80006bc <printGear>
}
 8000a58:	bd70      	pop	{r4, r5, r6, pc}
			ssd1306_WriteChar('0', Font_7x10, 1);
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e7cf      	b.n	80009fe <menuSetTime+0x5a>
			ssd1306_WriteChar('0', Font_7x10, 1);
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e7ea      	b.n	8000a38 <menuSetTime+0x94>
		PrintNumber(timetoset.minutes, 2, 1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2102      	movs	r1, #2
 8000a66:	e7f1      	b.n	8000a4c <menuSetTime+0xa8>
 8000a68:	20000004 	.word	0x20000004
 8000a6c:	080035ff 	.word	0x080035ff
 8000a70:	2000000c 	.word	0x2000000c
 8000a74:	0800360a 	.word	0x0800360a
 8000a78:	08003615 	.word	0x08003615
 8000a7c:	20000107 	.word	0x20000107
 8000a80:	200000ec 	.word	0x200000ec
 8000a84:	20000000 	.word	0x20000000

08000a88 <menuSetType>:
void menuSetType() {
 8000a88:	b570      	push	{r4, r5, r6, lr}
	ssd1306_Fill(0);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 fff0 	bl	8001a70 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8000a90:	2100      	movs	r1, #0
 8000a92:	0008      	movs	r0, r1
 8000a94:	f001 f890 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("TYPE SETT.", Font_11x18, 1);
 8000a98:	4a4c      	ldr	r2, [pc, #304]	; (8000bcc <menuSetType+0x144>)
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	ca06      	ldmia	r2, {r1, r2}
 8000a9e:	484c      	ldr	r0, [pc, #304]	; (8000bd0 <menuSetType+0x148>)
 8000aa0:	f001 f876 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 19);
 8000aa4:	2113      	movs	r1, #19
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f001 f886 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("TYPE    QTY 1-20", Font_7x10, 1);
 8000aac:	4c49      	ldr	r4, [pc, #292]	; (8000bd4 <menuSetType+0x14c>)
 8000aae:	2301      	movs	r3, #1
 8000ab0:	6821      	ldr	r1, [r4, #0]
 8000ab2:	6862      	ldr	r2, [r4, #4]
 8000ab4:	4848      	ldr	r0, [pc, #288]	; (8000bd8 <menuSetType+0x150>)
 8000ab6:	f001 f86b 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 29);
 8000aba:	2000      	movs	r0, #0
 8000abc:	211d      	movs	r1, #29
 8000abe:	f001 f87b 	bl	8001bb8 <ssd1306_SetCursor>
	if (qtySel == 0 && lineSel == 1) {//lampeggia se la quantità NON è da moficare e la linea è la prima
 8000ac2:	4d46      	ldr	r5, [pc, #280]	; (8000bdc <menuSetType+0x154>)
 8000ac4:	4846      	ldr	r0, [pc, #280]	; (8000be0 <menuSetType+0x158>)
 8000ac6:	782b      	ldrb	r3, [r5, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d000      	beq.n	8000ace <menuSetType+0x46>
 8000acc:	e06d      	b.n	8000baa <menuSetType+0x122>
 8000ace:	4b45      	ldr	r3, [pc, #276]	; (8000be4 <menuSetType+0x15c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d169      	bne.n	8000baa <menuSetType+0x122>
		ssd1306_WriteString("break", Font_7x10, color);
 8000ad6:	4b44      	ldr	r3, [pc, #272]	; (8000be8 <menuSetType+0x160>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
		ssd1306_WriteString("break", Font_7x10, 1);
 8000ada:	6821      	ldr	r1, [r4, #0]
 8000adc:	6862      	ldr	r2, [r4, #4]
 8000ade:	f001 f857 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_WriteString("      ", Font_7x10, 1);
 8000ae2:	4e42      	ldr	r6, [pc, #264]	; (8000bec <menuSetType+0x164>)
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	6862      	ldr	r2, [r4, #4]
 8000ae8:	0030      	movs	r0, r6
 8000aea:	6821      	ldr	r1, [r4, #0]
 8000aec:	f001 f850 	bl	8001b90 <ssd1306_WriteString>
	if (qtySel == 1 && lineSel == 1) {//lampeggia se la quantità è da moficare e la linea è la prima
 8000af0:	782a      	ldrb	r2, [r5, #0]
 8000af2:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <menuSetType+0x168>)
 8000af4:	2a01      	cmp	r2, #1
 8000af6:	d15a      	bne.n	8000bae <menuSetType+0x126>
 8000af8:	4a3a      	ldr	r2, [pc, #232]	; (8000be4 <menuSetType+0x15c>)
 8000afa:	7812      	ldrb	r2, [r2, #0]
 8000afc:	2a01      	cmp	r2, #1
 8000afe:	d156      	bne.n	8000bae <menuSetType+0x126>
		PrintNumber(breakfast, 2, color);
 8000b00:	4a39      	ldr	r2, [pc, #228]	; (8000be8 <menuSetType+0x160>)
 8000b02:	7818      	ldrb	r0, [r3, #0]
 8000b04:	7812      	ldrb	r2, [r2, #0]
		PrintNumber(breakfast, 2, 1);
 8000b06:	2102      	movs	r1, #2
 8000b08:	f7ff ff34 	bl	8000974 <PrintNumber>
	ssd1306_SetCursor(0, 39);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	2127      	movs	r1, #39	; 0x27
 8000b10:	f001 f852 	bl	8001bb8 <ssd1306_SetCursor>
	if (qtySel == 0 && lineSel == 2) {//lampeggia se la quantità NON è da moficare e la linea è la prima
 8000b14:	782b      	ldrb	r3, [r5, #0]
 8000b16:	4837      	ldr	r0, [pc, #220]	; (8000bf4 <menuSetType+0x16c>)
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14b      	bne.n	8000bb4 <menuSetType+0x12c>
 8000b1c:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <menuSetType+0x15c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d147      	bne.n	8000bb4 <menuSetType+0x12c>
		ssd1306_WriteString("lunch", Font_7x10, color);
 8000b24:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <menuSetType+0x160>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
		ssd1306_WriteString("lunch", Font_7x10, 1);
 8000b28:	6821      	ldr	r1, [r4, #0]
 8000b2a:	6862      	ldr	r2, [r4, #4]
 8000b2c:	f001 f830 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_WriteString("      ", Font_7x10, 1);
 8000b30:	2301      	movs	r3, #1
 8000b32:	6862      	ldr	r2, [r4, #4]
 8000b34:	0030      	movs	r0, r6
 8000b36:	6821      	ldr	r1, [r4, #0]
 8000b38:	f001 f82a 	bl	8001b90 <ssd1306_WriteString>
	if (qtySel == 1 && lineSel == 2) {//lampeggia se la quantità è da moficare e la linea è la prima
 8000b3c:	782a      	ldrb	r2, [r5, #0]
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <menuSetType+0x170>)
 8000b40:	2a01      	cmp	r2, #1
 8000b42:	d139      	bne.n	8000bb8 <menuSetType+0x130>
 8000b44:	4a27      	ldr	r2, [pc, #156]	; (8000be4 <menuSetType+0x15c>)
 8000b46:	7811      	ldrb	r1, [r2, #0]
 8000b48:	2902      	cmp	r1, #2
 8000b4a:	d135      	bne.n	8000bb8 <menuSetType+0x130>
		PrintNumber(lunch, 2, color);
 8000b4c:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <menuSetType+0x160>)
 8000b4e:	7818      	ldrb	r0, [r3, #0]
 8000b50:	7812      	ldrb	r2, [r2, #0]
		PrintNumber(lunch, 2, 1);
 8000b52:	f7ff ff0f 	bl	8000974 <PrintNumber>
	ssd1306_SetCursor(0, 49);
 8000b56:	2000      	movs	r0, #0
 8000b58:	2131      	movs	r1, #49	; 0x31
 8000b5a:	f001 f82d 	bl	8001bb8 <ssd1306_SetCursor>
	if (qtySel == 0 && lineSel == 3) {//lampeggia se la quantità NON è da moficare e la linea è la prima
 8000b5e:	782b      	ldrb	r3, [r5, #0]
 8000b60:	4826      	ldr	r0, [pc, #152]	; (8000bfc <menuSetType+0x174>)
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d12c      	bne.n	8000bc0 <menuSetType+0x138>
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <menuSetType+0x15c>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d128      	bne.n	8000bc0 <menuSetType+0x138>
		ssd1306_WriteString("dinner", Font_7x10, color);
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <menuSetType+0x160>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
		ssd1306_WriteString("dinner", Font_7x10, 1);
 8000b72:	6821      	ldr	r1, [r4, #0]
 8000b74:	6862      	ldr	r2, [r4, #4]
 8000b76:	f001 f80b 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_WriteString("     ", Font_7x10, 1);
 8000b7a:	cc06      	ldmia	r4!, {r1, r2}
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	4820      	ldr	r0, [pc, #128]	; (8000c00 <menuSetType+0x178>)
 8000b80:	f001 f806 	bl	8001b90 <ssd1306_WriteString>
	if (qtySel == 1 && lineSel == 3) {//lampeggia se la quantità è da moficare e la linea è la prima
 8000b84:	782a      	ldrb	r2, [r5, #0]
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <menuSetType+0x17c>)
 8000b88:	2a01      	cmp	r2, #1
 8000b8a:	d11b      	bne.n	8000bc4 <menuSetType+0x13c>
 8000b8c:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <menuSetType+0x15c>)
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	2a03      	cmp	r2, #3
 8000b92:	d117      	bne.n	8000bc4 <menuSetType+0x13c>
		PrintNumber(dinner, 2, color);
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <menuSetType+0x160>)
 8000b96:	7818      	ldrb	r0, [r3, #0]
 8000b98:	7812      	ldrb	r2, [r2, #0]
		PrintNumber(dinner, 2, 1);
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	f7ff feea 	bl	8000974 <PrintNumber>
	printGear(118, 0);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2076      	movs	r0, #118	; 0x76
 8000ba4:	f7ff fd8a 	bl	80006bc <printGear>
}
 8000ba8:	bd70      	pop	{r4, r5, r6, pc}
		ssd1306_WriteString("break", Font_7x10, 1);
 8000baa:	2301      	movs	r3, #1
 8000bac:	e795      	b.n	8000ada <menuSetType+0x52>
		PrintNumber(breakfast, 2, 1);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	7818      	ldrb	r0, [r3, #0]
 8000bb2:	e7a8      	b.n	8000b06 <menuSetType+0x7e>
		ssd1306_WriteString("lunch", Font_7x10, 1);
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e7b7      	b.n	8000b28 <menuSetType+0xa0>
		PrintNumber(lunch, 2, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2102      	movs	r1, #2
 8000bbc:	7818      	ldrb	r0, [r3, #0]
 8000bbe:	e7c8      	b.n	8000b52 <menuSetType+0xca>
		ssd1306_WriteString("dinner", Font_7x10, 1);
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e7d6      	b.n	8000b72 <menuSetType+0xea>
		PrintNumber(dinner, 2, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	7818      	ldrb	r0, [r3, #0]
 8000bc8:	e7e7      	b.n	8000b9a <menuSetType+0x112>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	20000004 	.word	0x20000004
 8000bd0:	0800361c 	.word	0x0800361c
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	08003627 	.word	0x08003627
 8000bdc:	200000fc 	.word	0x200000fc
 8000be0:	080035ec 	.word	0x080035ec
 8000be4:	200000ec 	.word	0x200000ec
 8000be8:	20000000 	.word	0x20000000
 8000bec:	08003638 	.word	0x08003638
 8000bf0:	2000003c 	.word	0x2000003c
 8000bf4:	080035f2 	.word	0x080035f2
 8000bf8:	200000ed 	.word	0x200000ed
 8000bfc:	080035f8 	.word	0x080035f8
 8000c00:	08003639 	.word	0x08003639
 8000c04:	20000048 	.word	0x20000048

08000c08 <printTime>:
void printTime(TIME T) {
 8000c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ssd1306_WriteString("time: ", Font_7x10, 1);
 8000c0a:	4c1f      	ldr	r4, [pc, #124]	; (8000c88 <printTime+0x80>)
void printTime(TIME T) {
 8000c0c:	0c06      	lsrs	r6, r0, #16
 8000c0e:	0a05      	lsrs	r5, r0, #8
 8000c10:	b2c7      	uxtb	r7, r0
 8000c12:	b2f6      	uxtb	r6, r6
	ssd1306_WriteString("time: ", Font_7x10, 1);
 8000c14:	2301      	movs	r3, #1
 8000c16:	481d      	ldr	r0, [pc, #116]	; (8000c8c <printTime+0x84>)
 8000c18:	6821      	ldr	r1, [r4, #0]
 8000c1a:	6862      	ldr	r2, [r4, #4]
 8000c1c:	b2ed      	uxtb	r5, r5
 8000c1e:	f000 ffb7 	bl	8001b90 <ssd1306_WriteString>
	if (T.hour < 10) {
 8000c22:	2e09      	cmp	r6, #9
 8000c24:	d805      	bhi.n	8000c32 <printTime+0x2a>
		ssd1306_WriteChar('0', Font_7x10, 1);
 8000c26:	2301      	movs	r3, #1
 8000c28:	2030      	movs	r0, #48	; 0x30
 8000c2a:	6821      	ldr	r1, [r4, #0]
 8000c2c:	6862      	ldr	r2, [r4, #4]
 8000c2e:	f000 ff5f 	bl	8001af0 <ssd1306_WriteChar>
	PrintNumber(T.hour, 2, 1);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2102      	movs	r1, #2
 8000c36:	0030      	movs	r0, r6
 8000c38:	f7ff fe9c 	bl	8000974 <PrintNumber>
	ssd1306_WriteChar(':', Font_7x10, 1);
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	203a      	movs	r0, #58	; 0x3a
 8000c40:	6821      	ldr	r1, [r4, #0]
 8000c42:	6862      	ldr	r2, [r4, #4]
 8000c44:	f000 ff54 	bl	8001af0 <ssd1306_WriteChar>
	if (T.minutes < 10) {
 8000c48:	2d09      	cmp	r5, #9
 8000c4a:	d805      	bhi.n	8000c58 <printTime+0x50>
		ssd1306_WriteChar('0', Font_7x10, 1);
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	2030      	movs	r0, #48	; 0x30
 8000c50:	6821      	ldr	r1, [r4, #0]
 8000c52:	6862      	ldr	r2, [r4, #4]
 8000c54:	f000 ff4c 	bl	8001af0 <ssd1306_WriteChar>
	PrintNumber(T.minutes, 2, 1);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	0028      	movs	r0, r5
 8000c5e:	f7ff fe89 	bl	8000974 <PrintNumber>
	ssd1306_WriteChar(':', Font_7x10, 1);
 8000c62:	2301      	movs	r3, #1
 8000c64:	203a      	movs	r0, #58	; 0x3a
 8000c66:	6821      	ldr	r1, [r4, #0]
 8000c68:	6862      	ldr	r2, [r4, #4]
 8000c6a:	f000 ff41 	bl	8001af0 <ssd1306_WriteChar>
	if (T.seconds < 10) {
 8000c6e:	2f09      	cmp	r7, #9
 8000c70:	d804      	bhi.n	8000c7c <printTime+0x74>
		ssd1306_WriteChar('0', Font_7x10, 1);
 8000c72:	cc06      	ldmia	r4!, {r1, r2}
 8000c74:	2301      	movs	r3, #1
 8000c76:	2030      	movs	r0, #48	; 0x30
 8000c78:	f000 ff3a 	bl	8001af0 <ssd1306_WriteChar>
	PrintNumber(T.seconds, 2, 1);
 8000c7c:	0038      	movs	r0, r7
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2102      	movs	r1, #2
 8000c82:	f7ff fe77 	bl	8000974 <PrintNumber>
}
 8000c86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000c88:	2000000c 	.word	0x2000000c
 8000c8c:	08003615 	.word	0x08003615

08000c90 <printMealTime>:
void printMealTime(Meal m, uint8_t mealN) {
 8000c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (timeSel == 0 && lineSel == mealN + 6) {
 8000c92:	4b42      	ldr	r3, [pc, #264]	; (8000d9c <printMealTime+0x10c>)
void printMealTime(Meal m, uint8_t mealN) {
 8000c94:	9001      	str	r0, [sp, #4]
	if (timeSel == 0 && lineSel == mealN + 6) {
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	781b      	ldrb	r3, [r3, #0]
void printMealTime(Meal m, uint8_t mealN) {
 8000c9a:	0a05      	lsrs	r5, r0, #8
 8000c9c:	0c06      	lsrs	r6, r0, #16
 8000c9e:	000f      	movs	r7, r1
 8000ca0:	4c3f      	ldr	r4, [pc, #252]	; (8000da0 <printMealTime+0x110>)
 8000ca2:	b2ed      	uxtb	r5, r5
 8000ca4:	b2f6      	uxtb	r6, r6
	if (timeSel == 0 && lineSel == mealN + 6) {
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d126      	bne.n	8000cf8 <printMealTime+0x68>
 8000caa:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <printMealTime+0x114>)
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	1d8b      	adds	r3, r1, #6
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d000      	beq.n	8000cb6 <printMealTime+0x26>
 8000cb4:	e06e      	b.n	8000d94 <printMealTime+0x104>
		if (m.hour < 10) {
 8000cb6:	4f3c      	ldr	r7, [pc, #240]	; (8000da8 <printMealTime+0x118>)
 8000cb8:	2d09      	cmp	r5, #9
 8000cba:	d805      	bhi.n	8000cc8 <printMealTime+0x38>
			ssd1306_WriteChar('0', Font_7x10, color);
 8000cbc:	2030      	movs	r0, #48	; 0x30
 8000cbe:	783b      	ldrb	r3, [r7, #0]
 8000cc0:	6821      	ldr	r1, [r4, #0]
 8000cc2:	6862      	ldr	r2, [r4, #4]
 8000cc4:	f000 ff14 	bl	8001af0 <ssd1306_WriteChar>
		PrintNumber(m.hour, 2, color);
 8000cc8:	2102      	movs	r1, #2
 8000cca:	0028      	movs	r0, r5
 8000ccc:	783a      	ldrb	r2, [r7, #0]
 8000cce:	f7ff fe51 	bl	8000974 <PrintNumber>
		ssd1306_WriteChar(':', Font_7x10, color);
 8000cd2:	203a      	movs	r0, #58	; 0x3a
 8000cd4:	783b      	ldrb	r3, [r7, #0]
 8000cd6:	6821      	ldr	r1, [r4, #0]
 8000cd8:	6862      	ldr	r2, [r4, #4]
 8000cda:	f000 ff09 	bl	8001af0 <ssd1306_WriteChar>
		if (m.min < 10) {
 8000cde:	2e09      	cmp	r6, #9
 8000ce0:	d804      	bhi.n	8000cec <printMealTime+0x5c>
			ssd1306_WriteChar('0', Font_7x10, color);
 8000ce2:	cc06      	ldmia	r4!, {r1, r2}
 8000ce4:	2030      	movs	r0, #48	; 0x30
 8000ce6:	783b      	ldrb	r3, [r7, #0]
 8000ce8:	f000 ff02 	bl	8001af0 <ssd1306_WriteChar>
		PrintNumber(m.min, 2, color);
 8000cec:	783a      	ldrb	r2, [r7, #0]
			PrintNumber(m.min, 2, 1);
 8000cee:	2102      	movs	r1, #2
			PrintNumber(m.min, 2, 0);
 8000cf0:	0030      	movs	r0, r6
 8000cf2:	f7ff fe3f 	bl	8000974 <PrintNumber>
}
 8000cf6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (m.hour < 10) {
 8000cf8:	2d09      	cmp	r5, #9
 8000cfa:	d810      	bhi.n	8000d1e <printMealTime+0x8e>
			if (!(timeSel == 1 && lineSel == mealN + 6 && !color)) {
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d108      	bne.n	8000d12 <printMealTime+0x82>
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <printMealTime+0x114>)
 8000d02:	781a      	ldrb	r2, [r3, #0]
 8000d04:	1d8b      	adds	r3, r1, #6
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d103      	bne.n	8000d12 <printMealTime+0x82>
 8000d0a:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <printMealTime+0x118>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d000      	beq.n	8000d14 <printMealTime+0x84>
				ssd1306_WriteChar('0', Font_7x10, 1);
 8000d12:	2301      	movs	r3, #1
				ssd1306_WriteChar('0', Font_7x10, 0);
 8000d14:	2030      	movs	r0, #48	; 0x30
 8000d16:	6821      	ldr	r1, [r4, #0]
 8000d18:	6862      	ldr	r2, [r4, #4]
 8000d1a:	f000 fee9 	bl	8001af0 <ssd1306_WriteChar>
		if (!(timeSel == 1 && lineSel == mealN + 6 && !color)) {
 8000d1e:	9b00      	ldr	r3, [sp, #0]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d108      	bne.n	8000d38 <printMealTime+0xa8>
 8000d26:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <printMealTime+0x114>)
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	1dbb      	adds	r3, r7, #6
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d103      	bne.n	8000d38 <printMealTime+0xa8>
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <printMealTime+0x118>)
 8000d32:	781a      	ldrb	r2, [r3, #0]
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	d000      	beq.n	8000d3a <printMealTime+0xaa>
			PrintNumber(m.hour, 2, 1);
 8000d38:	2201      	movs	r2, #1
			PrintNumber(m.hour, 2, 0);
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	0028      	movs	r0, r5
 8000d3e:	f7ff fe19 	bl	8000974 <PrintNumber>
		ssd1306_WriteChar(':', Font_7x10, 1);
 8000d42:	2301      	movs	r3, #1
 8000d44:	203a      	movs	r0, #58	; 0x3a
 8000d46:	6821      	ldr	r1, [r4, #0]
 8000d48:	6862      	ldr	r2, [r4, #4]
 8000d4a:	f000 fed1 	bl	8001af0 <ssd1306_WriteChar>
		if (m.min < 10) {
 8000d4e:	2e09      	cmp	r6, #9
 8000d50:	d811      	bhi.n	8000d76 <printMealTime+0xe6>
			if (!(timeSel == 2 && lineSel == mealN + 6 && !color)) {
 8000d52:	9b00      	ldr	r3, [sp, #0]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d108      	bne.n	8000d6c <printMealTime+0xdc>
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <printMealTime+0x114>)
 8000d5c:	781a      	ldrb	r2, [r3, #0]
 8000d5e:	1dbb      	adds	r3, r7, #6
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d103      	bne.n	8000d6c <printMealTime+0xdc>
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <printMealTime+0x118>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d000      	beq.n	8000d6e <printMealTime+0xde>
				ssd1306_WriteChar('0', Font_7x10, 1);
 8000d6c:	2301      	movs	r3, #1
				ssd1306_WriteChar('0', Font_7x10, 0);
 8000d6e:	cc06      	ldmia	r4!, {r1, r2}
 8000d70:	2030      	movs	r0, #48	; 0x30
 8000d72:	f000 febd 	bl	8001af0 <ssd1306_WriteChar>
		if (!(timeSel == 2 && lineSel == mealN + 6 && !color)) {
 8000d76:	9b00      	ldr	r3, [sp, #0]
 8000d78:	7819      	ldrb	r1, [r3, #0]
 8000d7a:	2902      	cmp	r1, #2
 8000d7c:	d108      	bne.n	8000d90 <printMealTime+0x100>
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <printMealTime+0x114>)
 8000d80:	3706      	adds	r7, #6
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	42bb      	cmp	r3, r7
 8000d86:	d103      	bne.n	8000d90 <printMealTime+0x100>
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <printMealTime+0x118>)
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	d0af      	beq.n	8000cf0 <printMealTime+0x60>
			PrintNumber(m.min, 2, 1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	e7ac      	b.n	8000cee <printMealTime+0x5e>
		if (m.hour < 10) {
 8000d94:	2d09      	cmp	r5, #9
 8000d96:	d9bc      	bls.n	8000d12 <printMealTime+0x82>
 8000d98:	e7c1      	b.n	8000d1e <printMealTime+0x8e>
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	20000106 	.word	0x20000106
 8000da0:	2000000c 	.word	0x2000000c
 8000da4:	200000ec 	.word	0x200000ec
 8000da8:	20000000 	.word	0x20000000

08000dac <menuSetMeal>:
void menuSetMeal() {
 8000dac:	b510      	push	{r4, lr}
	ssd1306_Fill(0);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 fe5e 	bl	8001a70 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8000db4:	2100      	movs	r1, #0
 8000db6:	0008      	movs	r0, r1
 8000db8:	f000 fefe 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("MEAL SETT.", Font_11x18, 1);
 8000dbc:	4a52      	ldr	r2, [pc, #328]	; (8000f08 <menuSetMeal+0x15c>)
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	ca06      	ldmia	r2, {r1, r2}
 8000dc2:	4852      	ldr	r0, [pc, #328]	; (8000f0c <menuSetMeal+0x160>)
 8000dc4:	f000 fee4 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 19);
 8000dc8:	2113      	movs	r1, #19
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 fef4 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("TYPE  ACTIVE  TIME", Font_7x10, 1);
 8000dd0:	4a4f      	ldr	r2, [pc, #316]	; (8000f10 <menuSetMeal+0x164>)
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	ca06      	ldmia	r2, {r1, r2}
 8000dd6:	484f      	ldr	r0, [pc, #316]	; (8000f14 <menuSetMeal+0x168>)
 8000dd8:	f000 feda 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 29);
 8000ddc:	211d      	movs	r1, #29
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 feea 	bl	8001bb8 <ssd1306_SetCursor>
	printMealType(m1, 1);
 8000de4:	4c4c      	ldr	r4, [pc, #304]	; (8000f18 <menuSetMeal+0x16c>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	7862      	ldrb	r2, [r4, #1]
 8000dea:	7823      	ldrb	r3, [r4, #0]
 8000dec:	0212      	lsls	r2, r2, #8
 8000dee:	431a      	orrs	r2, r3
 8000df0:	78a3      	ldrb	r3, [r4, #2]
 8000df2:	78e0      	ldrb	r0, [r4, #3]
 8000df4:	041b      	lsls	r3, r3, #16
 8000df6:	4313      	orrs	r3, r2
 8000df8:	0600      	lsls	r0, r0, #24
 8000dfa:	4318      	orrs	r0, r3
 8000dfc:	f7ff fd14 	bl	8000828 <printMealType>
	printMealStatus(m1, 1);
 8000e00:	7862      	ldrb	r2, [r4, #1]
 8000e02:	7823      	ldrb	r3, [r4, #0]
 8000e04:	0212      	lsls	r2, r2, #8
 8000e06:	431a      	orrs	r2, r3
 8000e08:	78a3      	ldrb	r3, [r4, #2]
 8000e0a:	78e0      	ldrb	r0, [r4, #3]
 8000e0c:	041b      	lsls	r3, r3, #16
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	0600      	lsls	r0, r0, #24
 8000e12:	4318      	orrs	r0, r3
 8000e14:	2101      	movs	r1, #1
 8000e16:	f7ff fd33 	bl	8000880 <printMealStatus>
	ssd1306_SetCursor(93, 29);
 8000e1a:	211d      	movs	r1, #29
 8000e1c:	205d      	movs	r0, #93	; 0x5d
 8000e1e:	f000 fecb 	bl	8001bb8 <ssd1306_SetCursor>
	printMealTime(m1, 1);
 8000e22:	7862      	ldrb	r2, [r4, #1]
 8000e24:	7823      	ldrb	r3, [r4, #0]
 8000e26:	0212      	lsls	r2, r2, #8
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	78a3      	ldrb	r3, [r4, #2]
 8000e2c:	78e0      	ldrb	r0, [r4, #3]
 8000e2e:	041b      	lsls	r3, r3, #16
 8000e30:	4313      	orrs	r3, r2
 8000e32:	0600      	lsls	r0, r0, #24
 8000e34:	4318      	orrs	r0, r3
 8000e36:	2101      	movs	r1, #1
 8000e38:	f7ff ff2a 	bl	8000c90 <printMealTime>
	ssd1306_SetCursor(0, 39);
 8000e3c:	2127      	movs	r1, #39	; 0x27
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 feba 	bl	8001bb8 <ssd1306_SetCursor>
	printMealType(m2, 2);
 8000e44:	4c35      	ldr	r4, [pc, #212]	; (8000f1c <menuSetMeal+0x170>)
 8000e46:	2102      	movs	r1, #2
 8000e48:	7862      	ldrb	r2, [r4, #1]
 8000e4a:	7823      	ldrb	r3, [r4, #0]
 8000e4c:	0212      	lsls	r2, r2, #8
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	78a3      	ldrb	r3, [r4, #2]
 8000e52:	78e0      	ldrb	r0, [r4, #3]
 8000e54:	041b      	lsls	r3, r3, #16
 8000e56:	4313      	orrs	r3, r2
 8000e58:	0600      	lsls	r0, r0, #24
 8000e5a:	4318      	orrs	r0, r3
 8000e5c:	f7ff fce4 	bl	8000828 <printMealType>
	printMealStatus(m2, 2);
 8000e60:	7862      	ldrb	r2, [r4, #1]
 8000e62:	7823      	ldrb	r3, [r4, #0]
 8000e64:	0212      	lsls	r2, r2, #8
 8000e66:	431a      	orrs	r2, r3
 8000e68:	78a3      	ldrb	r3, [r4, #2]
 8000e6a:	78e0      	ldrb	r0, [r4, #3]
 8000e6c:	041b      	lsls	r3, r3, #16
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	0600      	lsls	r0, r0, #24
 8000e72:	4318      	orrs	r0, r3
 8000e74:	2102      	movs	r1, #2
 8000e76:	f7ff fd03 	bl	8000880 <printMealStatus>
	ssd1306_SetCursor(93, 39);
 8000e7a:	2127      	movs	r1, #39	; 0x27
 8000e7c:	205d      	movs	r0, #93	; 0x5d
 8000e7e:	f000 fe9b 	bl	8001bb8 <ssd1306_SetCursor>
	printMealTime(m2, 2);
 8000e82:	7862      	ldrb	r2, [r4, #1]
 8000e84:	7823      	ldrb	r3, [r4, #0]
 8000e86:	0212      	lsls	r2, r2, #8
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	78a3      	ldrb	r3, [r4, #2]
 8000e8c:	78e0      	ldrb	r0, [r4, #3]
 8000e8e:	041b      	lsls	r3, r3, #16
 8000e90:	4313      	orrs	r3, r2
 8000e92:	0600      	lsls	r0, r0, #24
 8000e94:	4318      	orrs	r0, r3
 8000e96:	2102      	movs	r1, #2
 8000e98:	f7ff fefa 	bl	8000c90 <printMealTime>
	ssd1306_SetCursor(0, 49);
 8000e9c:	2131      	movs	r1, #49	; 0x31
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 fe8a 	bl	8001bb8 <ssd1306_SetCursor>
	printMealType(m3, 3);
 8000ea4:	4c1e      	ldr	r4, [pc, #120]	; (8000f20 <menuSetMeal+0x174>)
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	7862      	ldrb	r2, [r4, #1]
 8000eaa:	7823      	ldrb	r3, [r4, #0]
 8000eac:	0212      	lsls	r2, r2, #8
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	78a3      	ldrb	r3, [r4, #2]
 8000eb2:	78e0      	ldrb	r0, [r4, #3]
 8000eb4:	041b      	lsls	r3, r3, #16
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	0600      	lsls	r0, r0, #24
 8000eba:	4318      	orrs	r0, r3
 8000ebc:	f7ff fcb4 	bl	8000828 <printMealType>
	printMealStatus(m3, 3);
 8000ec0:	7862      	ldrb	r2, [r4, #1]
 8000ec2:	7823      	ldrb	r3, [r4, #0]
 8000ec4:	0212      	lsls	r2, r2, #8
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	78a3      	ldrb	r3, [r4, #2]
 8000eca:	78e0      	ldrb	r0, [r4, #3]
 8000ecc:	041b      	lsls	r3, r3, #16
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	0600      	lsls	r0, r0, #24
 8000ed2:	4318      	orrs	r0, r3
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	f7ff fcd3 	bl	8000880 <printMealStatus>
	ssd1306_SetCursor(93, 49);
 8000eda:	2131      	movs	r1, #49	; 0x31
 8000edc:	205d      	movs	r0, #93	; 0x5d
 8000ede:	f000 fe6b 	bl	8001bb8 <ssd1306_SetCursor>
	printMealTime(m3, 3);
 8000ee2:	7862      	ldrb	r2, [r4, #1]
 8000ee4:	7823      	ldrb	r3, [r4, #0]
 8000ee6:	0212      	lsls	r2, r2, #8
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	78a3      	ldrb	r3, [r4, #2]
 8000eec:	78e0      	ldrb	r0, [r4, #3]
 8000eee:	041b      	lsls	r3, r3, #16
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	0600      	lsls	r0, r0, #24
 8000ef4:	4318      	orrs	r0, r3
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	f7ff feca 	bl	8000c90 <printMealTime>
	printGear(118, 0);
 8000efc:	2100      	movs	r1, #0
 8000efe:	2076      	movs	r0, #118	; 0x76
 8000f00:	f7ff fbdc 	bl	80006bc <printGear>
}
 8000f04:	bd10      	pop	{r4, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	20000004 	.word	0x20000004
 8000f0c:	0800363f 	.word	0x0800363f
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	0800364a 	.word	0x0800364a
 8000f18:	200000ee 	.word	0x200000ee
 8000f1c:	200000f2 	.word	0x200000f2
 8000f20:	200000f6 	.word	0x200000f6

08000f24 <menuMain>:
void menuMain() {
 8000f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ssd1306_Fill(0);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 fda2 	bl	8001a70 <ssd1306_Fill>
	ssd1306_Line(0, 50, 128, 50, 1);
 8000f2c:	2701      	movs	r7, #1
 8000f2e:	2332      	movs	r3, #50	; 0x32
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	0019      	movs	r1, r3
 8000f34:	2000      	movs	r0, #0
 8000f36:	9700      	str	r7, [sp, #0]
 8000f38:	f000 fe44 	bl	8001bc4 <ssd1306_Line>
	ssd1306_SetCursor(0, 54);
 8000f3c:	2136      	movs	r1, #54	; 0x36
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 fe3a 	bl	8001bb8 <ssd1306_SetCursor>
	printTime(time);
 8000f44:	4b55      	ldr	r3, [pc, #340]	; (800109c <menuMain+0x178>)
 8000f46:	7859      	ldrb	r1, [r3, #1]
 8000f48:	781a      	ldrb	r2, [r3, #0]
 8000f4a:	0209      	lsls	r1, r1, #8
 8000f4c:	4311      	orrs	r1, r2
 8000f4e:	789a      	ldrb	r2, [r3, #2]
 8000f50:	78d8      	ldrb	r0, [r3, #3]
 8000f52:	0412      	lsls	r2, r2, #16
 8000f54:	430a      	orrs	r2, r1
 8000f56:	0600      	lsls	r0, r0, #24
 8000f58:	4310      	orrs	r0, r2
 8000f5a:	795a      	ldrb	r2, [r3, #5]
 8000f5c:	7919      	ldrb	r1, [r3, #4]
 8000f5e:	0212      	lsls	r2, r2, #8
 8000f60:	430a      	orrs	r2, r1
 8000f62:	7999      	ldrb	r1, [r3, #6]
 8000f64:	0409      	lsls	r1, r1, #16
 8000f66:	4311      	orrs	r1, r2
 8000f68:	f7ff fe4e 	bl	8000c08 <printTime>
	ssd1306_SetCursor(0, 0);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	0008      	movs	r0, r1
 8000f70:	f000 fe22 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("MEALS...", Font_11x18, 1);
 8000f74:	4a4a      	ldr	r2, [pc, #296]	; (80010a0 <menuMain+0x17c>)
 8000f76:	003b      	movs	r3, r7
 8000f78:	ca06      	ldmia	r2, {r1, r2}
 8000f7a:	484a      	ldr	r0, [pc, #296]	; (80010a4 <menuMain+0x180>)
 8000f7c:	f000 fe08 	bl	8001b90 <ssd1306_WriteString>
	printGear(118, 54);
 8000f80:	2136      	movs	r1, #54	; 0x36
 8000f82:	2076      	movs	r0, #118	; 0x76
 8000f84:	f7ff fb9a 	bl	80006bc <printGear>
	ssd1306_SetCursor(0, 19);
 8000f88:	2113      	movs	r1, #19
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 fe14 	bl	8001bb8 <ssd1306_SetCursor>
	printMealType(m1, 1);
 8000f90:	4e45      	ldr	r6, [pc, #276]	; (80010a8 <menuMain+0x184>)
 8000f92:	0039      	movs	r1, r7
 8000f94:	7872      	ldrb	r2, [r6, #1]
 8000f96:	7833      	ldrb	r3, [r6, #0]
 8000f98:	0212      	lsls	r2, r2, #8
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	78b3      	ldrb	r3, [r6, #2]
 8000f9e:	78f0      	ldrb	r0, [r6, #3]
 8000fa0:	041b      	lsls	r3, r3, #16
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0600      	lsls	r0, r0, #24
 8000fa6:	4318      	orrs	r0, r3
 8000fa8:	f7ff fc3e 	bl	8000828 <printMealType>
	ssd1306_SetCursor(55, 19);
 8000fac:	2113      	movs	r1, #19
 8000fae:	2037      	movs	r0, #55	; 0x37
 8000fb0:	f000 fe02 	bl	8001bb8 <ssd1306_SetCursor>
	printMealTime(m1, 1);
 8000fb4:	7872      	ldrb	r2, [r6, #1]
 8000fb6:	7833      	ldrb	r3, [r6, #0]
 8000fb8:	0212      	lsls	r2, r2, #8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	78b3      	ldrb	r3, [r6, #2]
 8000fbe:	78f0      	ldrb	r0, [r6, #3]
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	0600      	lsls	r0, r0, #24
 8000fc6:	4318      	orrs	r0, r3
 8000fc8:	0039      	movs	r1, r7
 8000fca:	f7ff fe61 	bl	8000c90 <printMealTime>
	ssd1306_SetCursor(0, 29);
 8000fce:	211d      	movs	r1, #29
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f000 fdf1 	bl	8001bb8 <ssd1306_SetCursor>
	printMealType(m2, 2);
 8000fd6:	4d35      	ldr	r5, [pc, #212]	; (80010ac <menuMain+0x188>)
 8000fd8:	2102      	movs	r1, #2
 8000fda:	786a      	ldrb	r2, [r5, #1]
 8000fdc:	782b      	ldrb	r3, [r5, #0]
 8000fde:	0212      	lsls	r2, r2, #8
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	78ab      	ldrb	r3, [r5, #2]
 8000fe4:	78e8      	ldrb	r0, [r5, #3]
 8000fe6:	041b      	lsls	r3, r3, #16
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	0600      	lsls	r0, r0, #24
 8000fec:	4318      	orrs	r0, r3
 8000fee:	f7ff fc1b 	bl	8000828 <printMealType>
	ssd1306_SetCursor(55, 29);
 8000ff2:	211d      	movs	r1, #29
 8000ff4:	2037      	movs	r0, #55	; 0x37
 8000ff6:	f000 fddf 	bl	8001bb8 <ssd1306_SetCursor>
	printMealTime(m2, 2);
 8000ffa:	786a      	ldrb	r2, [r5, #1]
 8000ffc:	782b      	ldrb	r3, [r5, #0]
 8000ffe:	0212      	lsls	r2, r2, #8
 8001000:	431a      	orrs	r2, r3
 8001002:	78ab      	ldrb	r3, [r5, #2]
 8001004:	78e8      	ldrb	r0, [r5, #3]
 8001006:	041b      	lsls	r3, r3, #16
 8001008:	4313      	orrs	r3, r2
 800100a:	0600      	lsls	r0, r0, #24
 800100c:	4318      	orrs	r0, r3
 800100e:	2102      	movs	r1, #2
 8001010:	f7ff fe3e 	bl	8000c90 <printMealTime>
	ssd1306_SetCursor(0, 39);
 8001014:	2127      	movs	r1, #39	; 0x27
 8001016:	2000      	movs	r0, #0
 8001018:	f000 fdce 	bl	8001bb8 <ssd1306_SetCursor>
	printMealType(m3, 3);
 800101c:	4c24      	ldr	r4, [pc, #144]	; (80010b0 <menuMain+0x18c>)
 800101e:	2103      	movs	r1, #3
 8001020:	7862      	ldrb	r2, [r4, #1]
 8001022:	7823      	ldrb	r3, [r4, #0]
 8001024:	0212      	lsls	r2, r2, #8
 8001026:	431a      	orrs	r2, r3
 8001028:	78a3      	ldrb	r3, [r4, #2]
 800102a:	78e0      	ldrb	r0, [r4, #3]
 800102c:	041b      	lsls	r3, r3, #16
 800102e:	4313      	orrs	r3, r2
 8001030:	0600      	lsls	r0, r0, #24
 8001032:	4318      	orrs	r0, r3
 8001034:	f7ff fbf8 	bl	8000828 <printMealType>
	ssd1306_SetCursor(55, 39);
 8001038:	2127      	movs	r1, #39	; 0x27
 800103a:	2037      	movs	r0, #55	; 0x37
 800103c:	f000 fdbc 	bl	8001bb8 <ssd1306_SetCursor>
	printMealTime(m3, 3);
 8001040:	7862      	ldrb	r2, [r4, #1]
 8001042:	7823      	ldrb	r3, [r4, #0]
 8001044:	0212      	lsls	r2, r2, #8
 8001046:	431a      	orrs	r2, r3
 8001048:	78a3      	ldrb	r3, [r4, #2]
 800104a:	78e0      	ldrb	r0, [r4, #3]
 800104c:	041b      	lsls	r3, r3, #16
 800104e:	4313      	orrs	r3, r2
 8001050:	0600      	lsls	r0, r0, #24
 8001052:	4318      	orrs	r0, r3
 8001054:	2103      	movs	r1, #3
 8001056:	f7ff fe1b 	bl	8000c90 <printMealTime>
	if (m1.done != 0) {
 800105a:	78f3      	ldrb	r3, [r6, #3]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <menuMain+0x14a>
		ssd1306_Line(0, 22, 100, 22, 1);
 8001060:	2316      	movs	r3, #22
 8001062:	2264      	movs	r2, #100	; 0x64
 8001064:	0019      	movs	r1, r3
 8001066:	2000      	movs	r0, #0
 8001068:	9700      	str	r7, [sp, #0]
 800106a:	f000 fdab 	bl	8001bc4 <ssd1306_Line>
	if (m2.done != 0) {
 800106e:	78eb      	ldrb	r3, [r5, #3]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <menuMain+0x160>
		ssd1306_Line(0, 32, 100, 32, 1);
 8001074:	2301      	movs	r3, #1
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	331f      	adds	r3, #31
 800107a:	2264      	movs	r2, #100	; 0x64
 800107c:	0019      	movs	r1, r3
 800107e:	2000      	movs	r0, #0
 8001080:	f000 fda0 	bl	8001bc4 <ssd1306_Line>
	if (m3.done != 0) {
 8001084:	78e3      	ldrb	r3, [r4, #3]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <menuMain+0x176>
		ssd1306_Line(0, 42, 100, 42, 1);
 800108a:	2301      	movs	r3, #1
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	3329      	adds	r3, #41	; 0x29
 8001090:	2264      	movs	r2, #100	; 0x64
 8001092:	0019      	movs	r1, r3
 8001094:	2000      	movs	r0, #0
 8001096:	f000 fd95 	bl	8001bc4 <ssd1306_Line>
}
 800109a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800109c:	200000ff 	.word	0x200000ff
 80010a0:	20000004 	.word	0x20000004
 80010a4:	0800365d 	.word	0x0800365d
 80010a8:	200000ee 	.word	0x200000ee
 80010ac:	200000f2 	.word	0x200000f2
 80010b0:	200000f6 	.word	0x200000f6

080010b4 <main>:
{
 80010b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b6:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80010b8:	f000 ffc4 	bl	8002044 <HAL_Init>
  SystemClock_Config();
 80010bc:	f7ff fa8c 	bl	80005d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	2214      	movs	r2, #20
 80010c2:	2100      	movs	r1, #0
 80010c4:	a80b      	add	r0, sp, #44	; 0x2c
 80010c6:	f002 fa27 	bl	8003518 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80010ce:	2580      	movs	r5, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4bcf      	ldr	r3, [pc, #828]	; (8001410 <main+0x35c>)
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80010d2:	022d      	lsls	r5, r5, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80010d6:	48cf      	ldr	r0, [pc, #828]	; (8001414 <main+0x360>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	430a      	orrs	r2, r1
 80010da:	635a      	str	r2, [r3, #52]	; 0x34
 80010dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|MOT2_Pin|MOT1_Pin, GPIO_PIN_RESET);
 80010de:	24e0      	movs	r4, #224	; 0xe0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	400a      	ands	r2, r1
 80010e2:	9208      	str	r2, [sp, #32]
 80010e4:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e8:	1849      	adds	r1, r1, r1
 80010ea:	430a      	orrs	r2, r1
 80010ec:	635a      	str	r2, [r3, #52]	; 0x34
 80010ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|MOT2_Pin|MOT1_Pin, GPIO_PIN_RESET);
 80010f0:	01a4      	lsls	r4, r4, #6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	400a      	ands	r2, r1
 80010f4:	9209      	str	r2, [sp, #36]	; 0x24
 80010f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80010fa:	0029      	movs	r1, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4332      	orrs	r2, r6
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4033      	ands	r3, r6
 8001106:	930a      	str	r3, [sp, #40]	; 0x28
 8001108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800110a:	f001 f8d5 	bl	80022b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MOT3_Pin|MOT0_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2109      	movs	r1, #9
 8001112:	48c1      	ldr	r0, [pc, #772]	; (8001418 <main+0x364>)
 8001114:	f001 f8d0 	bl	80022b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|MOT2_Pin|MOT1_Pin, GPIO_PIN_RESET);
 8001118:	20a0      	movs	r0, #160	; 0xa0
 800111a:	2200      	movs	r2, #0
 800111c:	0021      	movs	r1, r4
 800111e:	05c0      	lsls	r0, r0, #23
 8001120:	f001 f8ca 	bl	80022b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8001124:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2500      	movs	r5, #0
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8001128:	48ba      	ldr	r0, [pc, #744]	; (8001414 <main+0x360>)
 800112a:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8001132:	f001 f80f 	bl	8002154 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENTER_B_Pin|MINUS_B_Pin|PLUS_B_Pin;
 8001136:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = ENTER_B_Pin|MINUS_B_Pin|PLUS_B_Pin;
 800113a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113c:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001140:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001144:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f001 f804 	bl	8002154 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOT3_Pin|MOT0_Pin;
 800114c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	48b2      	ldr	r0, [pc, #712]	; (8001418 <main+0x364>)
 8001150:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = MOT3_Pin|MOT0_Pin;
 8001152:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f000 fffb 	bl	8002154 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	20a0      	movs	r0, #160	; 0xa0
 8001160:	a90b      	add	r1, sp, #44	; 0x2c
 8001162:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUZZER_Pin|MOT2_Pin|MOT1_Pin;
 8001164:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f000 fff2 	bl	8002154 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001170:	0029      	movs	r1, r5
 8001172:	002a      	movs	r2, r5
 8001174:	2007      	movs	r0, #7
 8001176:	f000 ff9d 	bl	80020b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800117a:	2007      	movs	r0, #7
 800117c:	f000 ffc4 	bl	8002108 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8001180:	4ca6      	ldr	r4, [pc, #664]	; (800141c <main+0x368>)
 8001182:	4ba7      	ldr	r3, [pc, #668]	; (8001420 <main+0x36c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001184:	0020      	movs	r0, r4
  hi2c1.Instance = I2C1;
 8001186:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001188:	4ba6      	ldr	r3, [pc, #664]	; (8001424 <main+0x370>)
  hi2c1.Init.OwnAddress1 = 0;
 800118a:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.Timing = 0x00303D5B;
 800118c:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118e:	60e6      	str	r6, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001190:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001192:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001194:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001196:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001198:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119a:	f001 f9d1 	bl	8002540 <HAL_I2C_Init>
 800119e:	0001      	movs	r1, r0
 80011a0:	42a8      	cmp	r0, r5
 80011a2:	d001      	beq.n	80011a8 <main+0xf4>
 80011a4:	b672      	cpsid	i
	while (1) {
 80011a6:	e7fe      	b.n	80011a6 <main+0xf2>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011a8:	0020      	movs	r0, r4
 80011aa:	f001 fbe7 	bl	800297c <HAL_I2CEx_ConfigAnalogFilter>
 80011ae:	1e01      	subs	r1, r0, #0
 80011b0:	d001      	beq.n	80011b6 <main+0x102>
 80011b2:	b672      	cpsid	i
	while (1) {
 80011b4:	e7fe      	b.n	80011b4 <main+0x100>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011b6:	0020      	movs	r0, r4
 80011b8:	f001 fc06 	bl	80029c8 <HAL_I2CEx_ConfigDigitalFilter>
 80011bc:	2800      	cmp	r0, #0
 80011be:	d001      	beq.n	80011c4 <main+0x110>
 80011c0:	b672      	cpsid	i
	while (1) {
 80011c2:	e7fe      	b.n	80011c2 <main+0x10e>
  htim14.Instance = TIM14;
 80011c4:	4d98      	ldr	r5, [pc, #608]	; (8001428 <main+0x374>)
 80011c6:	4b99      	ldr	r3, [pc, #612]	; (800142c <main+0x378>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	60a8      	str	r0, [r5, #8]
  htim14.Instance = TIM14;
 80011ca:	602b      	str	r3, [r5, #0]
  htim14.Init.Prescaler = 1600-1;
 80011cc:	4b98      	ldr	r3, [pc, #608]	; (8001430 <main+0x37c>)
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	6128      	str	r0, [r5, #16]
  htim14.Init.Prescaler = 1600-1;
 80011d0:	606b      	str	r3, [r5, #4]
  htim14.Init.Period = 5000-1;
 80011d2:	4b98      	ldr	r3, [pc, #608]	; (8001434 <main+0x380>)
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d4:	61a8      	str	r0, [r5, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80011d6:	0028      	movs	r0, r5
  htim14.Init.Period = 5000-1;
 80011d8:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80011da:	f002 f91f 	bl	800341c <HAL_TIM_Base_Init>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d001      	beq.n	80011e6 <main+0x132>
 80011e2:	b672      	cpsid	i
	while (1) {
 80011e4:	e7fe      	b.n	80011e4 <main+0x130>
	ssd1306_Init();				//inizializzo il display
 80011e6:	f000 fd8b 	bl	8001d00 <ssd1306_Init>
	HAL_TIM_Base_Start_IT(&htim14);
 80011ea:	0028      	movs	r0, r5
 80011ec:	f001 fff2 	bl	80031d4 <HAL_TIM_Base_Start_IT>
	contrastT = HAL_GetTick() + TIME_STBY * 1000;
 80011f0:	f000 ff48 	bl	8002084 <HAL_GetTick>
 80011f4:	4b90      	ldr	r3, [pc, #576]	; (8001438 <main+0x384>)
 80011f6:	4d91      	ldr	r5, [pc, #580]	; (800143c <main+0x388>)
 80011f8:	18c0      	adds	r0, r0, r3
	timetoset = Get_Time(&hi2c1);
 80011fa:	4e91      	ldr	r6, [pc, #580]	; (8001440 <main+0x38c>)
 80011fc:	0021      	movs	r1, r4
	contrastT = HAL_GetTick() + TIME_STBY * 1000;
 80011fe:	6028      	str	r0, [r5, #0]
	timetoset = Get_Time(&hi2c1);
 8001200:	a806      	add	r0, sp, #24
 8001202:	f7ff f94a 	bl	800049a <Get_Time>
 8001206:	2207      	movs	r2, #7
 8001208:	0030      	movs	r0, r6
 800120a:	a906      	add	r1, sp, #24
 800120c:	f002 f9b0 	bl	8003570 <memcpy>
	getSettings(&m1, &m2, &m3, &breakfast, &lunch, &dinner);//recuoera le impostazioni salvate nella eeprom
 8001210:	4e8c      	ldr	r6, [pc, #560]	; (8001444 <main+0x390>)
 8001212:	4b8d      	ldr	r3, [pc, #564]	; (8001448 <main+0x394>)
 8001214:	9601      	str	r6, [sp, #4]
 8001216:	4e8d      	ldr	r6, [pc, #564]	; (800144c <main+0x398>)
 8001218:	4a8d      	ldr	r2, [pc, #564]	; (8001450 <main+0x39c>)
 800121a:	498e      	ldr	r1, [pc, #568]	; (8001454 <main+0x3a0>)
 800121c:	488e      	ldr	r0, [pc, #568]	; (8001458 <main+0x3a4>)
 800121e:	9600      	str	r6, [sp, #0]
 8001220:	f000 fe92 	bl	8001f48 <getSettings>
		if (setTime == 1) {
 8001224:	4f8d      	ldr	r7, [pc, #564]	; (800145c <main+0x3a8>)
 8001226:	783e      	ldrb	r6, [r7, #0]
 8001228:	2e01      	cmp	r6, #1
 800122a:	d120      	bne.n	800126e <main+0x1ba>
			Set_Time(timetoset.seconds, timetoset.minutes, timetoset.hour, 1, 1,
 800122c:	4b84      	ldr	r3, [pc, #528]	; (8001440 <main+0x38c>)
 800122e:	789a      	ldrb	r2, [r3, #2]
 8001230:	7859      	ldrb	r1, [r3, #1]
 8001232:	7818      	ldrb	r0, [r3, #0]
 8001234:	23e7      	movs	r3, #231	; 0xe7
 8001236:	9403      	str	r4, [sp, #12]
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	9601      	str	r6, [sp, #4]
 800123c:	0033      	movs	r3, r6
 800123e:	9600      	str	r6, [sp, #0]
 8001240:	f7ff f8f3 	bl	800042a <Set_Time>
			ssd1306_Fill(0);
 8001244:	2000      	movs	r0, #0
 8001246:	f000 fc13 	bl	8001a70 <ssd1306_Fill>
			ssd1306_SetCursor(9, 23);
 800124a:	2117      	movs	r1, #23
 800124c:	2009      	movs	r0, #9
 800124e:	f000 fcb3 	bl	8001bb8 <ssd1306_SetCursor>
			ssd1306_WriteString("TIME SAVED", Font_11x18, 1);
 8001252:	4a83      	ldr	r2, [pc, #524]	; (8001460 <main+0x3ac>)
 8001254:	0033      	movs	r3, r6
 8001256:	ca06      	ldmia	r2, {r1, r2}
 8001258:	4882      	ldr	r0, [pc, #520]	; (8001464 <main+0x3b0>)
 800125a:	f000 fc99 	bl	8001b90 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800125e:	f000 fc15 	bl	8001a8c <ssd1306_UpdateScreen>
			HAL_Delay(500);
 8001262:	20fa      	movs	r0, #250	; 0xfa
 8001264:	0040      	lsls	r0, r0, #1
 8001266:	f000 ff13 	bl	8002090 <HAL_Delay>
			setTime = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	703b      	strb	r3, [r7, #0]
		if (storeSet == 1) {
 800126e:	4b7e      	ldr	r3, [pc, #504]	; (8001468 <main+0x3b4>)
 8001270:	781e      	ldrb	r6, [r3, #0]
 8001272:	9305      	str	r3, [sp, #20]
 8001274:	2e01      	cmp	r6, #1
 8001276:	d144      	bne.n	8001302 <main+0x24e>
			storeSettings(m1, m2, m3, breakfast, lunch, dinner);// salva tutte le impostazioni nella memoria eeprom
 8001278:	4872      	ldr	r0, [pc, #456]	; (8001444 <main+0x390>)
 800127a:	4b73      	ldr	r3, [pc, #460]	; (8001448 <main+0x394>)
 800127c:	7800      	ldrb	r0, [r0, #0]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	9001      	str	r0, [sp, #4]
 8001282:	4872      	ldr	r0, [pc, #456]	; (800144c <main+0x398>)
 8001284:	4a72      	ldr	r2, [pc, #456]	; (8001450 <main+0x39c>)
 8001286:	7800      	ldrb	r0, [r0, #0]
 8001288:	4972      	ldr	r1, [pc, #456]	; (8001454 <main+0x3a0>)
 800128a:	9000      	str	r0, [sp, #0]
 800128c:	7857      	ldrb	r7, [r2, #1]
 800128e:	7810      	ldrb	r0, [r2, #0]
 8001290:	023f      	lsls	r7, r7, #8
 8001292:	4307      	orrs	r7, r0
 8001294:	7890      	ldrb	r0, [r2, #2]
 8001296:	78d2      	ldrb	r2, [r2, #3]
 8001298:	0400      	lsls	r0, r0, #16
 800129a:	4338      	orrs	r0, r7
 800129c:	0612      	lsls	r2, r2, #24
 800129e:	784f      	ldrb	r7, [r1, #1]
 80012a0:	4302      	orrs	r2, r0
 80012a2:	7808      	ldrb	r0, [r1, #0]
 80012a4:	023f      	lsls	r7, r7, #8
 80012a6:	4307      	orrs	r7, r0
 80012a8:	7888      	ldrb	r0, [r1, #2]
 80012aa:	78c9      	ldrb	r1, [r1, #3]
 80012ac:	0400      	lsls	r0, r0, #16
 80012ae:	4338      	orrs	r0, r7
 80012b0:	0609      	lsls	r1, r1, #24
 80012b2:	4301      	orrs	r1, r0
 80012b4:	4868      	ldr	r0, [pc, #416]	; (8001458 <main+0x3a4>)
 80012b6:	4684      	mov	ip, r0
 80012b8:	4667      	mov	r7, ip
 80012ba:	787f      	ldrb	r7, [r7, #1]
 80012bc:	7800      	ldrb	r0, [r0, #0]
 80012be:	023f      	lsls	r7, r7, #8
 80012c0:	4307      	orrs	r7, r0
 80012c2:	4660      	mov	r0, ip
 80012c4:	7880      	ldrb	r0, [r0, #2]
 80012c6:	0400      	lsls	r0, r0, #16
 80012c8:	4307      	orrs	r7, r0
 80012ca:	4660      	mov	r0, ip
 80012cc:	78c0      	ldrb	r0, [r0, #3]
 80012ce:	0600      	lsls	r0, r0, #24
 80012d0:	4338      	orrs	r0, r7
 80012d2:	f000 fe0b 	bl	8001eec <storeSettings>
			ssd1306_Fill(0);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 fbca 	bl	8001a70 <ssd1306_Fill>
			ssd1306_SetCursor(4, 23);
 80012dc:	2117      	movs	r1, #23
 80012de:	2004      	movs	r0, #4
 80012e0:	f000 fc6a 	bl	8001bb8 <ssd1306_SetCursor>
			ssd1306_WriteString("SETT.STORED", Font_11x18, 1);
 80012e4:	4a5e      	ldr	r2, [pc, #376]	; (8001460 <main+0x3ac>)
 80012e6:	0033      	movs	r3, r6
 80012e8:	ca06      	ldmia	r2, {r1, r2}
 80012ea:	4860      	ldr	r0, [pc, #384]	; (800146c <main+0x3b8>)
 80012ec:	f000 fc50 	bl	8001b90 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80012f0:	f000 fbcc 	bl	8001a8c <ssd1306_UpdateScreen>
			HAL_Delay(500);
 80012f4:	20fa      	movs	r0, #250	; 0xfa
 80012f6:	0040      	lsls	r0, r0, #1
 80012f8:	f000 feca 	bl	8002090 <HAL_Delay>
			storeSet = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	9a05      	ldr	r2, [sp, #20]
 8001300:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	4843      	ldr	r0, [pc, #268]	; (8001414 <main+0x360>)
 8001306:	0209      	lsls	r1, r1, #8
 8001308:	f000 ffdc 	bl	80022c4 <HAL_GPIO_TogglePin>
		if (menu != 5) {
 800130c:	4e58      	ldr	r6, [pc, #352]	; (8001470 <main+0x3bc>)
 800130e:	4f59      	ldr	r7, [pc, #356]	; (8001474 <main+0x3c0>)
 8001310:	7833      	ldrb	r3, [r6, #0]
 8001312:	2b05      	cmp	r3, #5
 8001314:	d008      	beq.n	8001328 <main+0x274>
			time = Get_Time(&hi2c1);
 8001316:	0021      	movs	r1, r4
 8001318:	a806      	add	r0, sp, #24
 800131a:	f7ff f8be 	bl	800049a <Get_Time>
 800131e:	2207      	movs	r2, #7
 8001320:	0038      	movs	r0, r7
 8001322:	a906      	add	r1, sp, #24
 8001324:	f002 f924 	bl	8003570 <memcpy>
		if (buz == 1 && (buzT <= HAL_GetTick())) {
 8001328:	4b53      	ldr	r3, [pc, #332]	; (8001478 <main+0x3c4>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <main+0x280>
 8001330:	f000 fea8 	bl	8002084 <HAL_GetTick>
		switch (menu) {
 8001334:	7830      	ldrb	r0, [r6, #0]
 8001336:	2805      	cmp	r0, #5
 8001338:	d806      	bhi.n	8001348 <main+0x294>
 800133a:	f7fe fee1 	bl	8000100 <__gnu_thumb1_case_uqi>
 800133e:	4f03      	.short	0x4f03
 8001340:	5b585552 	.word	0x5b585552
			menuStart();	//menu avvio
 8001344:	f7ff f984 	bl	8000650 <menuStart>
		ssd1306_UpdateScreen();
 8001348:	f000 fba0 	bl	8001a8c <ssd1306_UpdateScreen>
		if (status == 1 && menu != 5) {
 800134c:	4b4b      	ldr	r3, [pc, #300]	; (800147c <main+0x3c8>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d12e      	bne.n	80013b2 <main+0x2fe>
 8001354:	7833      	ldrb	r3, [r6, #0]
 8001356:	2b05      	cmp	r3, #5
 8001358:	d02b      	beq.n	80013b2 <main+0x2fe>
			if(feed != 0){
 800135a:	4e49      	ldr	r6, [pc, #292]	; (8001480 <main+0x3cc>)
 800135c:	7833      	ldrb	r3, [r6, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00d      	beq.n	800137e <main+0x2ca>
				ssd1306_SetContrast(255);
 8001362:	20ff      	movs	r0, #255	; 0xff
 8001364:	f000 fcb5 	bl	8001cd2 <ssd1306_SetContrast>
				contrastT = HAL_GetTick() + TIME_STBY * 1000;
 8001368:	f000 fe8c 	bl	8002084 <HAL_GetTick>
 800136c:	4b32      	ldr	r3, [pc, #200]	; (8001438 <main+0x384>)
 800136e:	18c0      	adds	r0, r0, r3
 8001370:	6028      	str	r0, [r5, #0]
				printFeeding();
 8001372:	f000 fb41 	bl	80019f8 <printFeeding>
				feed = quatrerTurn(feed);
 8001376:	7830      	ldrb	r0, [r6, #0]
 8001378:	f000 faae 	bl	80018d8 <quatrerTurn>
 800137c:	7030      	strb	r0, [r6, #0]
			switch (mealCheck()) {	//controlla le impostazioni e le estrae.
 800137e:	f7ff fab7 	bl	80008f0 <mealCheck>
 8001382:	2802      	cmp	r0, #2
 8001384:	d039      	beq.n	80013fa <main+0x346>
 8001386:	2803      	cmp	r0, #3
 8001388:	d03d      	beq.n	8001406 <main+0x352>
 800138a:	2801      	cmp	r0, #1
 800138c:	d111      	bne.n	80013b2 <main+0x2fe>
				feed = 2 * breakfast;
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <main+0x394>)
				ssd1306_SetContrast(255);
 8001390:	30fe      	adds	r0, #254	; 0xfe
				feed = 2 * breakfast;
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	7033      	strb	r3, [r6, #0]
				ssd1306_SetContrast(255);
 8001398:	f000 fc9b 	bl	8001cd2 <ssd1306_SetContrast>
				contrastT = HAL_GetTick() + TIME_STBY * 1000;
 800139c:	f000 fe72 	bl	8002084 <HAL_GetTick>
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <main+0x384>)
 80013a2:	18c0      	adds	r0, r0, r3
 80013a4:	6028      	str	r0, [r5, #0]
				printFeeding();
 80013a6:	f000 fb27 	bl	80019f8 <printFeeding>
				feed = quatrerTurn(feed);
 80013aa:	7830      	ldrb	r0, [r6, #0]
 80013ac:	f000 fa94 	bl	80018d8 <quatrerTurn>
 80013b0:	7030      	strb	r0, [r6, #0]
		if (time.hour == 0 && time.minutes == 0 && time.seconds == 0) {	//quando arriva mezza notte resetta lo stato di ogni pasto
 80013b2:	787a      	ldrb	r2, [r7, #1]
 80013b4:	78bb      	ldrb	r3, [r7, #2]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	783a      	ldrb	r2, [r7, #0]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	d105      	bne.n	80013ca <main+0x316>
			m1.done = 0;
 80013be:	4a26      	ldr	r2, [pc, #152]	; (8001458 <main+0x3a4>)
 80013c0:	70d3      	strb	r3, [r2, #3]
			m2.done = 0;
 80013c2:	4a24      	ldr	r2, [pc, #144]	; (8001454 <main+0x3a0>)
 80013c4:	70d3      	strb	r3, [r2, #3]
			m3.done = 0;
 80013c6:	4a22      	ldr	r2, [pc, #136]	; (8001450 <main+0x39c>)
 80013c8:	70d3      	strb	r3, [r2, #3]
		if (contrastT <= HAL_GetTick()) {
 80013ca:	f000 fe5b 	bl	8002084 <HAL_GetTick>
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	4298      	cmp	r0, r3
 80013d2:	d31a      	bcc.n	800140a <main+0x356>
			ssd1306_SetContrast(CONTRAST_STBY);
 80013d4:	2005      	movs	r0, #5
			ssd1306_SetContrast(255);
 80013d6:	f000 fc7c 	bl	8001cd2 <ssd1306_SetContrast>
 80013da:	e723      	b.n	8001224 <main+0x170>
			menuMain();		//menu principale
 80013dc:	f7ff fda2 	bl	8000f24 <menuMain>
			break;
 80013e0:	e7b2      	b.n	8001348 <main+0x294>
			menuSettings();		//menu impostazioni
 80013e2:	f7ff f985 	bl	80006f0 <menuSettings>
			break;
 80013e6:	e7af      	b.n	8001348 <main+0x294>
			menuSetMeal();		//menu impostazioni meal
 80013e8:	f7ff fce0 	bl	8000dac <menuSetMeal>
			break;
 80013ec:	e7ac      	b.n	8001348 <main+0x294>
			menuSetType();		//menu impostazioni type
 80013ee:	f7ff fb4b 	bl	8000a88 <menuSetType>
			break;
 80013f2:	e7a9      	b.n	8001348 <main+0x294>
			menuSetTime();		//menu impostazioni time
 80013f4:	f7ff fad6 	bl	80009a4 <menuSetTime>
			break;
 80013f8:	e7a6      	b.n	8001348 <main+0x294>
				feed = 2 * lunch;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <main+0x398>)
				feed = 2 * dinner;
 80013fc:	781b      	ldrb	r3, [r3, #0]
				ssd1306_SetContrast(255);
 80013fe:	20ff      	movs	r0, #255	; 0xff
				feed = 2 * dinner;
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	7033      	strb	r3, [r6, #0]
				ssd1306_SetContrast(255);
 8001404:	e7c8      	b.n	8001398 <main+0x2e4>
				feed = 2 * dinner;
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <main+0x390>)
 8001408:	e7f8      	b.n	80013fc <main+0x348>
			ssd1306_SetContrast(255);
 800140a:	20ff      	movs	r0, #255	; 0xff
 800140c:	e7e3      	b.n	80013d6 <main+0x322>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	40021000 	.word	0x40021000
 8001414:	50000800 	.word	0x50000800
 8001418:	50000400 	.word	0x50000400
 800141c:	2000004c 	.word	0x2000004c
 8001420:	40005400 	.word	0x40005400
 8001424:	00303d5b 	.word	0x00303d5b
 8001428:	200000a0 	.word	0x200000a0
 800142c:	40002000 	.word	0x40002000
 8001430:	0000063f 	.word	0x0000063f
 8001434:	00001387 	.word	0x00001387
 8001438:	00002710 	.word	0x00002710
 800143c:	20000044 	.word	0x20000044
 8001440:	20000107 	.word	0x20000107
 8001444:	20000048 	.word	0x20000048
 8001448:	2000003c 	.word	0x2000003c
 800144c:	200000ed 	.word	0x200000ed
 8001450:	200000f6 	.word	0x200000f6
 8001454:	200000f2 	.word	0x200000f2
 8001458:	200000ee 	.word	0x200000ee
 800145c:	200000fd 	.word	0x200000fd
 8001460:	20000004 	.word	0x20000004
 8001464:	08003666 	.word	0x08003666
 8001468:	200000fe 	.word	0x200000fe
 800146c:	08003671 	.word	0x08003671
 8001470:	200000fa 	.word	0x200000fa
 8001474:	200000ff 	.word	0x200000ff
 8001478:	2000003d 	.word	0x2000003d
 800147c:	20000001 	.word	0x20000001
 8001480:	20000049 	.word	0x20000049

08001484 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8001484:	2180      	movs	r1, #128	; 0x80
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001486:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8001488:	0209      	lsls	r1, r1, #8
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800148a:	0004      	movs	r4, r0
	HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 800148c:	4806      	ldr	r0, [pc, #24]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800148e:	f000 ff19 	bl	80022c4 <HAL_GPIO_TogglePin>
	if (htim == &htim14) {
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001494:	429c      	cmp	r4, r3
 8001496:	d105      	bne.n	80014a4 <HAL_TIM_PeriodElapsedCallback+0x20>
		color = (color + 1) % 2;
 8001498:	2101      	movs	r1, #1
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800149c:	7813      	ldrb	r3, [r2, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	400b      	ands	r3, r1
 80014a2:	7013      	strb	r3, [r2, #0]
}
 80014a4:	bd10      	pop	{r4, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	50000800 	.word	0x50000800
 80014ac:	200000a0 	.word	0x200000a0
 80014b0:	20000000 	.word	0x20000000

080014b4 <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80014b4:	b510      	push	{r4, lr}
	if(feed !=0){
 80014b6:	4ca9      	ldr	r4, [pc, #676]	; (800175c <HAL_GPIO_EXTI_Rising_Callback+0x2a8>)
 80014b8:	7823      	ldrb	r3, [r4, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d147      	bne.n	800154e <HAL_GPIO_EXTI_Rising_Callback+0x9a>
	if (GPIO_Pin == ENTER_B_Pin) {
 80014be:	2820      	cmp	r0, #32
 80014c0:	d000      	beq.n	80014c4 <HAL_GPIO_EXTI_Rising_Callback+0x10>
 80014c2:	e0a1      	b.n	8001608 <HAL_GPIO_EXTI_Rising_Callback+0x154>
		contrastT = HAL_GetTick() + TIME_STBY * 1000;
 80014c4:	f000 fdde 	bl	8002084 <HAL_GetTick>
 80014c8:	4aa5      	ldr	r2, [pc, #660]	; (8001760 <HAL_GPIO_EXTI_Rising_Callback+0x2ac>)
 80014ca:	4ba6      	ldr	r3, [pc, #664]	; (8001764 <HAL_GPIO_EXTI_Rising_Callback+0x2b0>)
		switch (menu) {		//controllo quale menu è attivo
 80014cc:	49a6      	ldr	r1, [pc, #664]	; (8001768 <HAL_GPIO_EXTI_Rising_Callback+0x2b4>)
		contrastT = HAL_GetTick() + TIME_STBY * 1000;
 80014ce:	1880      	adds	r0, r0, r2
 80014d0:	6018      	str	r0, [r3, #0]
		switch (menu) {		//controllo quale menu è attivo
 80014d2:	7808      	ldrb	r0, [r1, #0]
 80014d4:	3801      	subs	r0, #1
 80014d6:	2804      	cmp	r0, #4
 80014d8:	d831      	bhi.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
 80014da:	4ba4      	ldr	r3, [pc, #656]	; (800176c <HAL_GPIO_EXTI_Rising_Callback+0x2b8>)
 80014dc:	f7fe fe10 	bl	8000100 <__gnu_thumb1_case_uqi>
 80014e0:	6f200803 	.word	0x6f200803
 80014e4:	7b          	.byte	0x7b
 80014e5:	00          	.byte	0x00
			menu = 2;		//entra nel menu impostazioni
 80014e6:	2202      	movs	r2, #2
				menu = 3;	//imposta il menu IMPOSTAZIONI MEAL
 80014e8:	700a      	strb	r2, [r1, #0]
					m3.type = 1;
 80014ea:	2201      	movs	r2, #1
				lineSel = (lineSel + 1) % 3;
 80014ec:	701a      	strb	r2, [r3, #0]
				break;
 80014ee:	e026      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
			switch (lineSel) {	//controllo quale linea è selezionata
 80014f0:	7818      	ldrb	r0, [r3, #0]
 80014f2:	2804      	cmp	r0, #4
 80014f4:	d823      	bhi.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
 80014f6:	2401      	movs	r4, #1
 80014f8:	f7fe fe02 	bl	8000100 <__gnu_thumb1_case_uqi>
 80014fc:	0a080603 	.word	0x0a080603
 8001500:	0c          	.byte	0x0c
 8001501:	00          	.byte	0x00
				menu = 1;//ritorna al menu principale se viene cliccato lingranaggio
 8001502:	700c      	strb	r4, [r1, #0]
				lineSel = (lineSel + 1) % 3;
 8001504:	2200      	movs	r2, #0
 8001506:	e7f1      	b.n	80014ec <HAL_GPIO_EXTI_Rising_Callback+0x38>
				menu = 3;	//imposta il menu IMPOSTAZIONI MEAL
 8001508:	2203      	movs	r2, #3
 800150a:	e7ed      	b.n	80014e8 <HAL_GPIO_EXTI_Rising_Callback+0x34>
				menu = 4;	//imposta il menu IMPOSTAZIONI TYPE
 800150c:	2204      	movs	r2, #4
 800150e:	e7eb      	b.n	80014e8 <HAL_GPIO_EXTI_Rising_Callback+0x34>
				menu = 5;	//imposta il menu IMPOSTAZIONI TIME
 8001510:	2205      	movs	r2, #5
 8001512:	e7e9      	b.n	80014e8 <HAL_GPIO_EXTI_Rising_Callback+0x34>
				status = (status + 1) % 2;
 8001514:	4a96      	ldr	r2, [pc, #600]	; (8001770 <HAL_GPIO_EXTI_Rising_Callback+0x2bc>)
 8001516:	7813      	ldrb	r3, [r2, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	4023      	ands	r3, r4
						dinner = dinner - 1;
 800151c:	7013      	strb	r3, [r2, #0]
 800151e:	e00e      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
			switch (lineSel) {	//controllo quale linea è selezionata
 8001520:	7818      	ldrb	r0, [r3, #0]
 8001522:	2809      	cmp	r0, #9
 8001524:	d80b      	bhi.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
 8001526:	f7fe fdeb 	bl	8000100 <__gnu_thumb1_case_uqi>
 800152a:	1305      	.short	0x1305
 800152c:	3833271d 	.word	0x3833271d
 8001530:	4242423d 	.word	0x4242423d
				storeSet = 1;
 8001534:	2201      	movs	r2, #1
 8001536:	4b8f      	ldr	r3, [pc, #572]	; (8001774 <HAL_GPIO_EXTI_Rising_Callback+0x2c0>)
 8001538:	701a      	strb	r2, [r3, #0]
				menu = 2;//se sei sull'ingranaggio ritorna al menu precedente (menu impostazioni)
 800153a:	2302      	movs	r3, #2
 800153c:	700b      	strb	r3, [r1, #0]
		buz = 1;
 800153e:	2201      	movs	r2, #1
 8001540:	4b8d      	ldr	r3, [pc, #564]	; (8001778 <HAL_GPIO_EXTI_Rising_Callback+0x2c4>)
 8001542:	701a      	strb	r2, [r3, #0]
		buzT = HAL_GetTick() + 10;
 8001544:	f000 fd9e 	bl	8002084 <HAL_GetTick>
 8001548:	4b8c      	ldr	r3, [pc, #560]	; (800177c <HAL_GPIO_EXTI_Rising_Callback+0x2c8>)
 800154a:	300a      	adds	r0, #10
 800154c:	6018      	str	r0, [r3, #0]
}
 800154e:	bd10      	pop	{r4, pc}
				if ((m1.type + 1) % 4 == 0) {
 8001550:	4a8b      	ldr	r2, [pc, #556]	; (8001780 <HAL_GPIO_EXTI_Rising_Callback+0x2cc>)
 8001552:	2103      	movs	r1, #3
 8001554:	7813      	ldrb	r3, [r2, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	0018      	movs	r0, r3
 800155a:	4008      	ands	r0, r1
 800155c:	420b      	tst	r3, r1
 800155e:	d115      	bne.n	800158c <HAL_GPIO_EXTI_Rising_Callback+0xd8>
					m1.type = 1;
 8001560:	4b87      	ldr	r3, [pc, #540]	; (8001780 <HAL_GPIO_EXTI_Rising_Callback+0x2cc>)
 8001562:	e7c2      	b.n	80014ea <HAL_GPIO_EXTI_Rising_Callback+0x36>
				if ((m2.type + 1) % 4 == 0) {
 8001564:	4a87      	ldr	r2, [pc, #540]	; (8001784 <HAL_GPIO_EXTI_Rising_Callback+0x2d0>)
 8001566:	2103      	movs	r1, #3
 8001568:	7813      	ldrb	r3, [r2, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	0018      	movs	r0, r3
 800156e:	4008      	ands	r0, r1
 8001570:	420b      	tst	r3, r1
 8001572:	d10b      	bne.n	800158c <HAL_GPIO_EXTI_Rising_Callback+0xd8>
					m2.type = 1;
 8001574:	4b83      	ldr	r3, [pc, #524]	; (8001784 <HAL_GPIO_EXTI_Rising_Callback+0x2d0>)
 8001576:	e7b8      	b.n	80014ea <HAL_GPIO_EXTI_Rising_Callback+0x36>
				if ((m3.type + 1) % 4 == 0) {
 8001578:	4a83      	ldr	r2, [pc, #524]	; (8001788 <HAL_GPIO_EXTI_Rising_Callback+0x2d4>)
 800157a:	2103      	movs	r1, #3
 800157c:	7813      	ldrb	r3, [r2, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	0018      	movs	r0, r3
 8001582:	4008      	ands	r0, r1
 8001584:	420b      	tst	r3, r1
 8001586:	d101      	bne.n	800158c <HAL_GPIO_EXTI_Rising_Callback+0xd8>
					m3.type = 1;
 8001588:	4b7f      	ldr	r3, [pc, #508]	; (8001788 <HAL_GPIO_EXTI_Rising_Callback+0x2d4>)
 800158a:	e7ae      	b.n	80014ea <HAL_GPIO_EXTI_Rising_Callback+0x36>
					m3.type = (m3.type + 1) % 4;
 800158c:	7010      	strb	r0, [r2, #0]
 800158e:	e7d6      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
				if (m1.type != 0) {
 8001590:	4b7b      	ldr	r3, [pc, #492]	; (8001780 <HAL_GPIO_EXTI_Rising_Callback+0x2cc>)
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	2a00      	cmp	r2, #0
 8001596:	d0e3      	beq.n	8001560 <HAL_GPIO_EXTI_Rising_Callback+0xac>
 8001598:	e7b4      	b.n	8001504 <HAL_GPIO_EXTI_Rising_Callback+0x50>
				if (m2.type != 0) {
 800159a:	4b7a      	ldr	r3, [pc, #488]	; (8001784 <HAL_GPIO_EXTI_Rising_Callback+0x2d0>)
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	2a00      	cmp	r2, #0
 80015a0:	d0e8      	beq.n	8001574 <HAL_GPIO_EXTI_Rising_Callback+0xc0>
 80015a2:	e7af      	b.n	8001504 <HAL_GPIO_EXTI_Rising_Callback+0x50>
				if (m3.type != 0) {
 80015a4:	4b78      	ldr	r3, [pc, #480]	; (8001788 <HAL_GPIO_EXTI_Rising_Callback+0x2d4>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d0ed      	beq.n	8001588 <HAL_GPIO_EXTI_Rising_Callback+0xd4>
 80015ac:	e7aa      	b.n	8001504 <HAL_GPIO_EXTI_Rising_Callback+0x50>
				timeSel = (timeSel + 1) % 3;
 80015ae:	2103      	movs	r1, #3
 80015b0:	4c76      	ldr	r4, [pc, #472]	; (800178c <HAL_GPIO_EXTI_Rising_Callback+0x2d8>)
 80015b2:	7820      	ldrb	r0, [r4, #0]
 80015b4:	3001      	adds	r0, #1
				lineSel = (lineSel + 1) % 10;
 80015b6:	f7fe ff1d 	bl	80003f4 <__aeabi_idivmod>
 80015ba:	7021      	strb	r1, [r4, #0]
			switch (timeSel) {
 80015bc:	e7bf      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
			switch (lineSel) {
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0b7      	beq.n	8001534 <HAL_GPIO_EXTI_Rising_Callback+0x80>
 80015c4:	3b01      	subs	r3, #1
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d8b9      	bhi.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
				qtySel = (qtySel + 1) % 2;//seleziona o no la quantità da modificare
 80015ca:	2101      	movs	r1, #1
 80015cc:	4a70      	ldr	r2, [pc, #448]	; (8001790 <HAL_GPIO_EXTI_Rising_Callback+0x2dc>)
 80015ce:	7813      	ldrb	r3, [r2, #0]
 80015d0:	3301      	adds	r3, #1
				lineSel = (lineSel + 1) % 4;
 80015d2:	400b      	ands	r3, r1
 80015d4:	e7a2      	b.n	800151c <HAL_GPIO_EXTI_Rising_Callback+0x68>
			switch (lineSel) {
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	2a01      	cmp	r2, #1
 80015da:	d013      	beq.n	8001604 <HAL_GPIO_EXTI_Rising_Callback+0x150>
 80015dc:	2a02      	cmp	r2, #2
 80015de:	d100      	bne.n	80015e2 <HAL_GPIO_EXTI_Rising_Callback+0x12e>
 80015e0:	e790      	b.n	8001504 <HAL_GPIO_EXTI_Rising_Callback+0x50>
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	d1ab      	bne.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
				setTime = 1;
 80015e6:	2401      	movs	r4, #1
				timetoset.seconds = 0;
 80015e8:	486a      	ldr	r0, [pc, #424]	; (8001794 <HAL_GPIO_EXTI_Rising_Callback+0x2e0>)
				lineSel = 0;
 80015ea:	701a      	strb	r2, [r3, #0]
				timetoset.seconds = 0;
 80015ec:	7002      	strb	r2, [r0, #0]
				setTime = 1;
 80015ee:	486a      	ldr	r0, [pc, #424]	; (8001798 <HAL_GPIO_EXTI_Rising_Callback+0x2e4>)
				m1.done = 0;
 80015f0:	4b63      	ldr	r3, [pc, #396]	; (8001780 <HAL_GPIO_EXTI_Rising_Callback+0x2cc>)
				setTime = 1;
 80015f2:	7004      	strb	r4, [r0, #0]
				menu = 2;
 80015f4:	2002      	movs	r0, #2
				m1.done = 0;
 80015f6:	70da      	strb	r2, [r3, #3]
				m2.done = 0;
 80015f8:	4b62      	ldr	r3, [pc, #392]	; (8001784 <HAL_GPIO_EXTI_Rising_Callback+0x2d0>)
				menu = 2;
 80015fa:	7008      	strb	r0, [r1, #0]
				m2.done = 0;
 80015fc:	70da      	strb	r2, [r3, #3]
				m3.done = 0;
 80015fe:	4b62      	ldr	r3, [pc, #392]	; (8001788 <HAL_GPIO_EXTI_Rising_Callback+0x2d4>)
 8001600:	70da      	strb	r2, [r3, #3]
				break;
 8001602:	e79c      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
				lineSel = (lineSel + 1) % 3;
 8001604:	2202      	movs	r2, #2
 8001606:	e771      	b.n	80014ec <HAL_GPIO_EXTI_Rising_Callback+0x38>
	if (GPIO_Pin == PLUS_B_Pin) {
 8001608:	2880      	cmp	r0, #128	; 0x80
 800160a:	d170      	bne.n	80016ee <HAL_GPIO_EXTI_Rising_Callback+0x23a>
		contrastT = HAL_GetTick() + TIME_STBY * 1000;
 800160c:	f000 fd3a 	bl	8002084 <HAL_GetTick>
 8001610:	4a53      	ldr	r2, [pc, #332]	; (8001760 <HAL_GPIO_EXTI_Rising_Callback+0x2ac>)
 8001612:	4b54      	ldr	r3, [pc, #336]	; (8001764 <HAL_GPIO_EXTI_Rising_Callback+0x2b0>)
 8001614:	1880      	adds	r0, r0, r2
 8001616:	6018      	str	r0, [r3, #0]
		switch (menu) {		//controllo quale menu è attivo
 8001618:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_GPIO_EXTI_Rising_Callback+0x2b4>)
 800161a:	7818      	ldrb	r0, [r3, #0]
 800161c:	3801      	subs	r0, #1
 800161e:	2804      	cmp	r0, #4
 8001620:	d900      	bls.n	8001624 <HAL_GPIO_EXTI_Rising_Callback+0x170>
 8001622:	e78c      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
 8001624:	f7fe fd6c 	bl	8000100 <__gnu_thumb1_case_uqi>
 8001628:	350e0703 	.word	0x350e0703
 800162c:	52          	.byte	0x52
 800162d:	00          	.byte	0x00
			feed = feed + 2;		//aggiunge una porzione
 800162e:	7823      	ldrb	r3, [r4, #0]
 8001630:	3302      	adds	r3, #2
 8001632:	7023      	strb	r3, [r4, #0]
			break;
 8001634:	e783      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
			if (lineSel == 0) {
 8001636:	4a4d      	ldr	r2, [pc, #308]	; (800176c <HAL_GPIO_EXTI_Rising_Callback+0x2b8>)
 8001638:	7813      	ldrb	r3, [r2, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d000      	beq.n	8001640 <HAL_GPIO_EXTI_Rising_Callback+0x18c>
 800163e:	e0e2      	b.n	8001806 <HAL_GPIO_EXTI_Rising_Callback+0x352>
				lineSel = 4;
 8001640:	3304      	adds	r3, #4
 8001642:	e76b      	b.n	800151c <HAL_GPIO_EXTI_Rising_Callback+0x68>
			if (timeSel == 0) {
 8001644:	4b51      	ldr	r3, [pc, #324]	; (800178c <HAL_GPIO_EXTI_Rising_Callback+0x2d8>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d000      	beq.n	800164e <HAL_GPIO_EXTI_Rising_Callback+0x19a>
 800164c:	e0f8      	b.n	8001840 <HAL_GPIO_EXTI_Rising_Callback+0x38c>
				if (lineSel == 0) {
 800164e:	4a47      	ldr	r2, [pc, #284]	; (800176c <HAL_GPIO_EXTI_Rising_Callback+0x2b8>)
					lineSel = 9;
 8001650:	2109      	movs	r1, #9
				if (lineSel == 0) {
 8001652:	7813      	ldrb	r3, [r2, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_GPIO_EXTI_Rising_Callback+0x1a8>
					lineSel--;
 8001658:	3b01      	subs	r3, #1
 800165a:	b2d9      	uxtb	r1, r3
 800165c:	7011      	strb	r1, [r2, #0]
			switch (timeSel) {
 800165e:	e76e      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
				switch (lineSel) {
 8001660:	4b42      	ldr	r3, [pc, #264]	; (800176c <HAL_GPIO_EXTI_Rising_Callback+0x2b8>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b08      	cmp	r3, #8
 8001666:	d00c      	beq.n	8001682 <HAL_GPIO_EXTI_Rising_Callback+0x1ce>
 8001668:	2b09      	cmp	r3, #9
 800166a:	d00c      	beq.n	8001686 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
					m1.hour = (m1.hour + 1) % 24;
 800166c:	4c44      	ldr	r4, [pc, #272]	; (8001780 <HAL_GPIO_EXTI_Rising_Callback+0x2cc>)
 800166e:	2b07      	cmp	r3, #7
 8001670:	d000      	beq.n	8001674 <HAL_GPIO_EXTI_Rising_Callback+0x1c0>
 8001672:	e764      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
					m3.hour = (m3.hour + 1) % 24;
 8001674:	2118      	movs	r1, #24
 8001676:	7860      	ldrb	r0, [r4, #1]
 8001678:	3001      	adds	r0, #1
				timetoset.minutes = (timetoset.minutes + 1) % 60;
 800167a:	f7fe febb 	bl	80003f4 <__aeabi_idivmod>
 800167e:	7061      	strb	r1, [r4, #1]
				break;
 8001680:	e75d      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
					m2.hour = (m2.hour + 1) % 24;
 8001682:	4c40      	ldr	r4, [pc, #256]	; (8001784 <HAL_GPIO_EXTI_Rising_Callback+0x2d0>)
 8001684:	e7f6      	b.n	8001674 <HAL_GPIO_EXTI_Rising_Callback+0x1c0>
					m3.hour = (m3.hour + 1) % 24;
 8001686:	4c40      	ldr	r4, [pc, #256]	; (8001788 <HAL_GPIO_EXTI_Rising_Callback+0x2d4>)
 8001688:	e7f4      	b.n	8001674 <HAL_GPIO_EXTI_Rising_Callback+0x1c0>
					m2.min = (m2.min + 5) % 60;
 800168a:	4c3e      	ldr	r4, [pc, #248]	; (8001784 <HAL_GPIO_EXTI_Rising_Callback+0x2d0>)
 800168c:	e0ea      	b.n	8001864 <HAL_GPIO_EXTI_Rising_Callback+0x3b0>
					m3.min = (m3.min + 5) % 60;
 800168e:	4c3e      	ldr	r4, [pc, #248]	; (8001788 <HAL_GPIO_EXTI_Rising_Callback+0x2d4>)
 8001690:	e0e8      	b.n	8001864 <HAL_GPIO_EXTI_Rising_Callback+0x3b0>
			if (qtySel != 1) {
 8001692:	493f      	ldr	r1, [pc, #252]	; (8001790 <HAL_GPIO_EXTI_Rising_Callback+0x2dc>)
			if (lineSel == 0) {
 8001694:	4a35      	ldr	r2, [pc, #212]	; (800176c <HAL_GPIO_EXTI_Rising_Callback+0x2b8>)
			if (qtySel != 1) {
 8001696:	7809      	ldrb	r1, [r1, #0]
			if (lineSel == 0) {
 8001698:	7813      	ldrb	r3, [r2, #0]
			if (qtySel != 1) {
 800169a:	2901      	cmp	r1, #1
 800169c:	d004      	beq.n	80016a8 <HAL_GPIO_EXTI_Rising_Callback+0x1f4>
				if (lineSel == 0) {
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d000      	beq.n	80016a4 <HAL_GPIO_EXTI_Rising_Callback+0x1f0>
 80016a2:	e0b0      	b.n	8001806 <HAL_GPIO_EXTI_Rising_Callback+0x352>
					lineSel = 3;
 80016a4:	3303      	adds	r3, #3
 80016a6:	e739      	b.n	800151c <HAL_GPIO_EXTI_Rising_Callback+0x68>
				switch (lineSel) {
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d00b      	beq.n	80016c4 <HAL_GPIO_EXTI_Rising_Callback+0x210>
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d00b      	beq.n	80016c8 <HAL_GPIO_EXTI_Rising_Callback+0x214>
					if (breakfast < 20) {
 80016b0:	4a3a      	ldr	r2, [pc, #232]	; (800179c <HAL_GPIO_EXTI_Rising_Callback+0x2e8>)
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d000      	beq.n	80016b8 <HAL_GPIO_EXTI_Rising_Callback+0x204>
 80016b6:	e742      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
					if (dinner < 20) {
 80016b8:	7813      	ldrb	r3, [r2, #0]
 80016ba:	2b13      	cmp	r3, #19
 80016bc:	d900      	bls.n	80016c0 <HAL_GPIO_EXTI_Rising_Callback+0x20c>
 80016be:	e73e      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
						dinner = dinner + 1;
 80016c0:	3301      	adds	r3, #1
 80016c2:	e72b      	b.n	800151c <HAL_GPIO_EXTI_Rising_Callback+0x68>
					if (lunch < 20) {
 80016c4:	4a36      	ldr	r2, [pc, #216]	; (80017a0 <HAL_GPIO_EXTI_Rising_Callback+0x2ec>)
 80016c6:	e7f7      	b.n	80016b8 <HAL_GPIO_EXTI_Rising_Callback+0x204>
					if (dinner < 20) {
 80016c8:	4a36      	ldr	r2, [pc, #216]	; (80017a4 <HAL_GPIO_EXTI_Rising_Callback+0x2f0>)
 80016ca:	e7f5      	b.n	80016b8 <HAL_GPIO_EXTI_Rising_Callback+0x204>
			switch (lineSel) {
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_GPIO_EXTI_Rising_Callback+0x2b8>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d007      	beq.n	80016e4 <HAL_GPIO_EXTI_Rising_Callback+0x230>
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d000      	beq.n	80016da <HAL_GPIO_EXTI_Rising_Callback+0x226>
 80016d8:	e731      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
				timetoset.minutes = (timetoset.minutes + 1) % 60;
 80016da:	4c2e      	ldr	r4, [pc, #184]	; (8001794 <HAL_GPIO_EXTI_Rising_Callback+0x2e0>)
 80016dc:	213c      	movs	r1, #60	; 0x3c
 80016de:	7860      	ldrb	r0, [r4, #1]
 80016e0:	3001      	adds	r0, #1
 80016e2:	e7ca      	b.n	800167a <HAL_GPIO_EXTI_Rising_Callback+0x1c6>
				timetoset.hour = (timetoset.hour + 1) % 24;
 80016e4:	4c2b      	ldr	r4, [pc, #172]	; (8001794 <HAL_GPIO_EXTI_Rising_Callback+0x2e0>)
 80016e6:	2118      	movs	r1, #24
 80016e8:	78a0      	ldrb	r0, [r4, #2]
 80016ea:	3001      	adds	r0, #1
 80016ec:	e0bd      	b.n	800186a <HAL_GPIO_EXTI_Rising_Callback+0x3b6>
	if (GPIO_Pin == MINUS_B_Pin) {
 80016ee:	2840      	cmp	r0, #64	; 0x40
 80016f0:	d000      	beq.n	80016f4 <HAL_GPIO_EXTI_Rising_Callback+0x240>
 80016f2:	e724      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
		contrastT = HAL_GetTick() + TIME_STBY * 1000;
 80016f4:	f000 fcc6 	bl	8002084 <HAL_GetTick>
 80016f8:	4a19      	ldr	r2, [pc, #100]	; (8001760 <HAL_GPIO_EXTI_Rising_Callback+0x2ac>)
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_GPIO_EXTI_Rising_Callback+0x2b0>)
 80016fc:	1880      	adds	r0, r0, r2
 80016fe:	6018      	str	r0, [r3, #0]
		switch (menu) {		//controllo quale menu è attivo
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_GPIO_EXTI_Rising_Callback+0x2b4>)
 8001702:	7818      	ldrb	r0, [r3, #0]
 8001704:	3802      	subs	r0, #2
 8001706:	2803      	cmp	r0, #3
 8001708:	d900      	bls.n	800170c <HAL_GPIO_EXTI_Rising_Callback+0x258>
 800170a:	e718      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
 800170c:	f7fe fcf8 	bl	8000100 <__gnu_thumb1_case_uqi>
 8001710:	81660702 	.word	0x81660702
			lineSel = (lineSel + 1) % 5;
 8001714:	4c15      	ldr	r4, [pc, #84]	; (800176c <HAL_GPIO_EXTI_Rising_Callback+0x2b8>)
 8001716:	2105      	movs	r1, #5
 8001718:	7820      	ldrb	r0, [r4, #0]
 800171a:	3001      	adds	r0, #1
 800171c:	e74b      	b.n	80015b6 <HAL_GPIO_EXTI_Rising_Callback+0x102>
			if (timeSel == 0) {
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_GPIO_EXTI_Rising_Callback+0x2d8>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d104      	bne.n	8001730 <HAL_GPIO_EXTI_Rising_Callback+0x27c>
				lineSel = (lineSel + 1) % 10;
 8001726:	4c11      	ldr	r4, [pc, #68]	; (800176c <HAL_GPIO_EXTI_Rising_Callback+0x2b8>)
 8001728:	210a      	movs	r1, #10
 800172a:	7820      	ldrb	r0, [r4, #0]
 800172c:	3001      	adds	r0, #1
 800172e:	e742      	b.n	80015b6 <HAL_GPIO_EXTI_Rising_Callback+0x102>
			switch (timeSel) {
 8001730:	2b01      	cmp	r3, #1
 8001732:	d039      	beq.n	80017a8 <HAL_GPIO_EXTI_Rising_Callback+0x2f4>
 8001734:	2b02      	cmp	r3, #2
 8001736:	d000      	beq.n	800173a <HAL_GPIO_EXTI_Rising_Callback+0x286>
 8001738:	e701      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
				switch (lineSel) {
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_GPIO_EXTI_Rising_Callback+0x2b8>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b08      	cmp	r3, #8
 8001740:	d046      	beq.n	80017d0 <HAL_GPIO_EXTI_Rising_Callback+0x31c>
 8001742:	2b09      	cmp	r3, #9
 8001744:	d046      	beq.n	80017d4 <HAL_GPIO_EXTI_Rising_Callback+0x320>
					if (m1.min == 0) {
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_GPIO_EXTI_Rising_Callback+0x2cc>)
 8001748:	2b07      	cmp	r3, #7
 800174a:	d000      	beq.n	800174e <HAL_GPIO_EXTI_Rising_Callback+0x29a>
 800174c:	e6f7      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
					if (m3.min == 0) {
 800174e:	7893      	ldrb	r3, [r2, #2]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d141      	bne.n	80017d8 <HAL_GPIO_EXTI_Rising_Callback+0x324>
						m3.min = 55;
 8001754:	3337      	adds	r3, #55	; 0x37
						m3.min = (m3.min - 5);
 8001756:	7093      	strb	r3, [r2, #2]
 8001758:	e6f1      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	20000049 	.word	0x20000049
 8001760:	00002710 	.word	0x00002710
 8001764:	20000044 	.word	0x20000044
 8001768:	200000fa 	.word	0x200000fa
 800176c:	200000ec 	.word	0x200000ec
 8001770:	20000001 	.word	0x20000001
 8001774:	200000fe 	.word	0x200000fe
 8001778:	2000003d 	.word	0x2000003d
 800177c:	20000040 	.word	0x20000040
 8001780:	200000ee 	.word	0x200000ee
 8001784:	200000f2 	.word	0x200000f2
 8001788:	200000f6 	.word	0x200000f6
 800178c:	20000106 	.word	0x20000106
 8001790:	200000fc 	.word	0x200000fc
 8001794:	20000107 	.word	0x20000107
 8001798:	200000fd 	.word	0x200000fd
 800179c:	2000003c 	.word	0x2000003c
 80017a0:	200000ed 	.word	0x200000ed
 80017a4:	20000048 	.word	0x20000048
				switch (lineSel) {
 80017a8:	4b32      	ldr	r3, [pc, #200]	; (8001874 <HAL_GPIO_EXTI_Rising_Callback+0x3c0>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d00b      	beq.n	80017c8 <HAL_GPIO_EXTI_Rising_Callback+0x314>
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	d00b      	beq.n	80017cc <HAL_GPIO_EXTI_Rising_Callback+0x318>
					if (m1.hour == 0) {
 80017b4:	4a30      	ldr	r2, [pc, #192]	; (8001878 <HAL_GPIO_EXTI_Rising_Callback+0x3c4>)
 80017b6:	2b07      	cmp	r3, #7
 80017b8:	d000      	beq.n	80017bc <HAL_GPIO_EXTI_Rising_Callback+0x308>
 80017ba:	e6c0      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
					if (m3.hour == 0) {
 80017bc:	7853      	ldrb	r3, [r2, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d13c      	bne.n	800183c <HAL_GPIO_EXTI_Rising_Callback+0x388>
						m3.hour = 23;
 80017c2:	3317      	adds	r3, #23
					timetoset.minutes = timetoset.minutes - 1;
 80017c4:	7053      	strb	r3, [r2, #1]
 80017c6:	e6ba      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
					if (m2.hour == 0) {
 80017c8:	4a2c      	ldr	r2, [pc, #176]	; (800187c <HAL_GPIO_EXTI_Rising_Callback+0x3c8>)
 80017ca:	e7f7      	b.n	80017bc <HAL_GPIO_EXTI_Rising_Callback+0x308>
					if (m3.hour == 0) {
 80017cc:	4a2c      	ldr	r2, [pc, #176]	; (8001880 <HAL_GPIO_EXTI_Rising_Callback+0x3cc>)
 80017ce:	e7f5      	b.n	80017bc <HAL_GPIO_EXTI_Rising_Callback+0x308>
					if (m2.min == 0) {
 80017d0:	4a2a      	ldr	r2, [pc, #168]	; (800187c <HAL_GPIO_EXTI_Rising_Callback+0x3c8>)
 80017d2:	e7bc      	b.n	800174e <HAL_GPIO_EXTI_Rising_Callback+0x29a>
					if (m3.min == 0) {
 80017d4:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <HAL_GPIO_EXTI_Rising_Callback+0x3cc>)
 80017d6:	e7ba      	b.n	800174e <HAL_GPIO_EXTI_Rising_Callback+0x29a>
						m3.min = (m3.min - 5);
 80017d8:	3b05      	subs	r3, #5
 80017da:	e7bc      	b.n	8001756 <HAL_GPIO_EXTI_Rising_Callback+0x2a2>
			if (qtySel != 1) {
 80017dc:	4929      	ldr	r1, [pc, #164]	; (8001884 <HAL_GPIO_EXTI_Rising_Callback+0x3d0>)
			lineSel = (lineSel + 1) % 5;
 80017de:	4a25      	ldr	r2, [pc, #148]	; (8001874 <HAL_GPIO_EXTI_Rising_Callback+0x3c0>)
			if (qtySel != 1) {
 80017e0:	7809      	ldrb	r1, [r1, #0]
			lineSel = (lineSel + 1) % 5;
 80017e2:	7813      	ldrb	r3, [r2, #0]
			if (qtySel != 1) {
 80017e4:	2901      	cmp	r1, #1
 80017e6:	d002      	beq.n	80017ee <HAL_GPIO_EXTI_Rising_Callback+0x33a>
				lineSel = (lineSel + 1) % 4;
 80017e8:	2103      	movs	r1, #3
 80017ea:	3301      	adds	r3, #1
 80017ec:	e6f1      	b.n	80015d2 <HAL_GPIO_EXTI_Rising_Callback+0x11e>
				switch (lineSel) {
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d00b      	beq.n	800180a <HAL_GPIO_EXTI_Rising_Callback+0x356>
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d00b      	beq.n	800180e <HAL_GPIO_EXTI_Rising_Callback+0x35a>
					if (breakfast > 0) {
 80017f6:	4a24      	ldr	r2, [pc, #144]	; (8001888 <HAL_GPIO_EXTI_Rising_Callback+0x3d4>)
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d000      	beq.n	80017fe <HAL_GPIO_EXTI_Rising_Callback+0x34a>
 80017fc:	e69f      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
					if (dinner > 0) {
 80017fe:	7813      	ldrb	r3, [r2, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d100      	bne.n	8001806 <HAL_GPIO_EXTI_Rising_Callback+0x352>
 8001804:	e69b      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
						dinner = dinner - 1;
 8001806:	3b01      	subs	r3, #1
 8001808:	e688      	b.n	800151c <HAL_GPIO_EXTI_Rising_Callback+0x68>
					if (lunch > 0) {
 800180a:	4a20      	ldr	r2, [pc, #128]	; (800188c <HAL_GPIO_EXTI_Rising_Callback+0x3d8>)
 800180c:	e7f7      	b.n	80017fe <HAL_GPIO_EXTI_Rising_Callback+0x34a>
					if (dinner > 0) {
 800180e:	4a20      	ldr	r2, [pc, #128]	; (8001890 <HAL_GPIO_EXTI_Rising_Callback+0x3dc>)
 8001810:	e7f5      	b.n	80017fe <HAL_GPIO_EXTI_Rising_Callback+0x34a>
			switch (lineSel) {
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_GPIO_EXTI_Rising_Callback+0x3c0>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d008      	beq.n	800182c <HAL_GPIO_EXTI_Rising_Callback+0x378>
 800181a:	2b02      	cmp	r3, #2
 800181c:	d000      	beq.n	8001820 <HAL_GPIO_EXTI_Rising_Callback+0x36c>
 800181e:	e68e      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
				if (timetoset.minutes == 0) {
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <HAL_GPIO_EXTI_Rising_Callback+0x3e0>)
 8001822:	7853      	ldrb	r3, [r2, #1]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_GPIO_EXTI_Rising_Callback+0x388>
					timetoset.minutes = 59;
 8001828:	333b      	adds	r3, #59	; 0x3b
 800182a:	e7cb      	b.n	80017c4 <HAL_GPIO_EXTI_Rising_Callback+0x310>
				if (timetoset.hour == 0) {
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_GPIO_EXTI_Rising_Callback+0x3e0>)
 800182e:	7893      	ldrb	r3, [r2, #2]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_GPIO_EXTI_Rising_Callback+0x384>
					timetoset.hour = 23;
 8001834:	3317      	adds	r3, #23
 8001836:	e78e      	b.n	8001756 <HAL_GPIO_EXTI_Rising_Callback+0x2a2>
					timetoset.hour = timetoset.hour - 1;
 8001838:	3b01      	subs	r3, #1
 800183a:	e78c      	b.n	8001756 <HAL_GPIO_EXTI_Rising_Callback+0x2a2>
					timetoset.minutes = timetoset.minutes - 1;
 800183c:	3b01      	subs	r3, #1
 800183e:	e7c1      	b.n	80017c4 <HAL_GPIO_EXTI_Rising_Callback+0x310>
			switch (timeSel) {
 8001840:	2b01      	cmp	r3, #1
 8001842:	d100      	bne.n	8001846 <HAL_GPIO_EXTI_Rising_Callback+0x392>
 8001844:	e70c      	b.n	8001660 <HAL_GPIO_EXTI_Rising_Callback+0x1ac>
 8001846:	2b02      	cmp	r3, #2
 8001848:	d000      	beq.n	800184c <HAL_GPIO_EXTI_Rising_Callback+0x398>
 800184a:	e678      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
				switch (lineSel) {
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_GPIO_EXTI_Rising_Callback+0x3c0>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b08      	cmp	r3, #8
 8001852:	d100      	bne.n	8001856 <HAL_GPIO_EXTI_Rising_Callback+0x3a2>
 8001854:	e719      	b.n	800168a <HAL_GPIO_EXTI_Rising_Callback+0x1d6>
 8001856:	2b09      	cmp	r3, #9
 8001858:	d100      	bne.n	800185c <HAL_GPIO_EXTI_Rising_Callback+0x3a8>
 800185a:	e718      	b.n	800168e <HAL_GPIO_EXTI_Rising_Callback+0x1da>
					m1.min = (m1.min + 5) % 60;
 800185c:	4c06      	ldr	r4, [pc, #24]	; (8001878 <HAL_GPIO_EXTI_Rising_Callback+0x3c4>)
 800185e:	2b07      	cmp	r3, #7
 8001860:	d000      	beq.n	8001864 <HAL_GPIO_EXTI_Rising_Callback+0x3b0>
 8001862:	e66c      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
					m2.min = (m2.min + 5) % 60;
 8001864:	213c      	movs	r1, #60	; 0x3c
 8001866:	78a0      	ldrb	r0, [r4, #2]
 8001868:	3005      	adds	r0, #5
 800186a:	f7fe fdc3 	bl	80003f4 <__aeabi_idivmod>
 800186e:	70a1      	strb	r1, [r4, #2]
					break;
 8001870:	e665      	b.n	800153e <HAL_GPIO_EXTI_Rising_Callback+0x8a>
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	200000ec 	.word	0x200000ec
 8001878:	200000ee 	.word	0x200000ee
 800187c:	200000f2 	.word	0x200000f2
 8001880:	200000f6 	.word	0x200000f6
 8001884:	200000fc 	.word	0x200000fc
 8001888:	2000003c 	.word	0x2000003c
 800188c:	200000ed 	.word	0x200000ed
 8001890:	20000048 	.word	0x20000048
 8001894:	20000107 	.word	0x20000107

08001898 <Error_Handler>:
 8001898:	b672      	cpsid	i
	while (1) {
 800189a:	e7fe      	b.n	800189a <Error_Handler+0x2>

0800189c <disableMotor>:
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
	return 0;
}

void disableMotor() {
 800189c:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(MOT0_GPIO_Port, MOT0_Pin, 0);
 800189e:	4c0d      	ldr	r4, [pc, #52]	; (80018d4 <disableMotor+0x38>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	0020      	movs	r0, r4
 80018a4:	2108      	movs	r1, #8
	HAL_GPIO_WritePin(MOT1_GPIO_Port, MOT1_Pin, 0);
 80018a6:	25a0      	movs	r5, #160	; 0xa0
	HAL_GPIO_WritePin(MOT0_GPIO_Port, MOT0_Pin, 0);
 80018a8:	f000 fd06 	bl	80022b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOT1_GPIO_Port, MOT1_Pin, 0);
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	05ed      	lsls	r5, r5, #23
 80018b0:	0028      	movs	r0, r5
 80018b2:	2200      	movs	r2, #0
 80018b4:	0189      	lsls	r1, r1, #6
 80018b6:	f000 fcff 	bl	80022b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOT2_GPIO_Port, MOT2_Pin, 0);
 80018ba:	2180      	movs	r1, #128	; 0x80
 80018bc:	0028      	movs	r0, r5
 80018be:	2200      	movs	r2, #0
 80018c0:	0149      	lsls	r1, r1, #5
 80018c2:	f000 fcf9 	bl	80022b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOT3_GPIO_Port, MOT3_Pin, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2101      	movs	r1, #1
 80018ca:	0020      	movs	r0, r4
 80018cc:	f000 fcf4 	bl	80022b8 <HAL_GPIO_WritePin>
}
 80018d0:	bd70      	pop	{r4, r5, r6, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	50000400 	.word	0x50000400

080018d8 <quatrerTurn>:
uint8_t quatrerTurn(uint8_t n) {
 80018d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018da:	0004      	movs	r4, r0
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80018dc:	2780      	movs	r7, #128	; 0x80
	vibration = HAL_GetTick();
 80018de:	f000 fbd1 	bl	8002084 <HAL_GetTick>
	for (int step = 0; step < n * STEPS_PER_REV / 4; step++) {
 80018e2:	2500      	movs	r5, #0
	vibration = HAL_GetTick();
 80018e4:	4e41      	ldr	r6, [pc, #260]	; (80019ec <quatrerTurn+0x114>)
	for (int step = 0; step < n * STEPS_PER_REV / 4; step++) {
 80018e6:	02a3      	lsls	r3, r4, #10
	vibration = HAL_GetTick();
 80018e8:	6030      	str	r0, [r6, #0]
	for (int step = 0; step < n * STEPS_PER_REV / 4; step++) {
 80018ea:	9301      	str	r3, [sp, #4]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80018ec:	013f      	lsls	r7, r7, #4
	for (int step = 0; step < n * STEPS_PER_REV / 4; step++) {
 80018ee:	9b01      	ldr	r3, [sp, #4]
 80018f0:	42ab      	cmp	r3, r5
 80018f2:	d10a      	bne.n	800190a <quatrerTurn+0x32>
	disableMotor();		//finiti i quarti di giro spengo il motore
 80018f4:	f7ff ffd2 	bl	800189c <disableMotor>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	20a0      	movs	r0, #160	; 0xa0
 80018fc:	2200      	movs	r2, #0
 80018fe:	0109      	lsls	r1, r1, #4
 8001900:	05c0      	lsls	r0, r0, #23
 8001902:	f000 fcd9 	bl	80022b8 <HAL_GPIO_WritePin>
}
 8001906:	2000      	movs	r0, #0
 8001908:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (HAL_GetTick() >= vibration + 5000) {
 800190a:	f000 fbbb 	bl	8002084 <HAL_GetTick>
 800190e:	6833      	ldr	r3, [r6, #0]
 8001910:	4a37      	ldr	r2, [pc, #220]	; (80019f0 <quatrerTurn+0x118>)
 8001912:	189b      	adds	r3, r3, r2
 8001914:	4298      	cmp	r0, r3
 8001916:	d312      	bcc.n	800193e <quatrerTurn+0x66>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001918:	20a0      	movs	r0, #160	; 0xa0
 800191a:	2201      	movs	r2, #1
 800191c:	0039      	movs	r1, r7
 800191e:	05c0      	lsls	r0, r0, #23
 8001920:	f000 fcca 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001924:	20fa      	movs	r0, #250	; 0xfa
 8001926:	0080      	lsls	r0, r0, #2
 8001928:	f000 fbb2 	bl	8002090 <HAL_Delay>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800192c:	20a0      	movs	r0, #160	; 0xa0
 800192e:	2200      	movs	r2, #0
 8001930:	0039      	movs	r1, r7
 8001932:	05c0      	lsls	r0, r0, #23
 8001934:	f000 fcc0 	bl	80022b8 <HAL_GPIO_WritePin>
			vibration = HAL_GetTick();
 8001938:	f000 fba4 	bl	8002084 <HAL_GetTick>
 800193c:	6030      	str	r0, [r6, #0]
		switch (step % 4) {
 800193e:	2403      	movs	r4, #3
 8001940:	402c      	ands	r4, r5
 8001942:	2c02      	cmp	r4, #2
 8001944:	d02e      	beq.n	80019a4 <quatrerTurn+0xcc>
 8001946:	2c03      	cmp	r4, #3
 8001948:	d042      	beq.n	80019d0 <quatrerTurn+0xf8>
 800194a:	2c01      	cmp	r4, #1
 800194c:	d01c      	beq.n	8001988 <quatrerTurn+0xb0>
			HAL_GPIO_WritePin(MOT0_GPIO_Port, MOT0_Pin, 1);
 800194e:	2201      	movs	r2, #1
 8001950:	2108      	movs	r1, #8
 8001952:	4828      	ldr	r0, [pc, #160]	; (80019f4 <quatrerTurn+0x11c>)
 8001954:	f000 fcb0 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT1_GPIO_Port, MOT1_Pin, 1);
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	20a0      	movs	r0, #160	; 0xa0
 800195c:	2201      	movs	r2, #1
 800195e:	0189      	lsls	r1, r1, #6
 8001960:	05c0      	lsls	r0, r0, #23
 8001962:	f000 fca9 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT2_GPIO_Port, MOT2_Pin, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	20a0      	movs	r0, #160	; 0xa0
 800196c:	0149      	lsls	r1, r1, #5
 800196e:	05c0      	lsls	r0, r0, #23
 8001970:	f000 fca2 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT3_GPIO_Port, MOT3_Pin, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2101      	movs	r1, #1
			HAL_GPIO_WritePin(MOT3_GPIO_Port, MOT3_Pin, 1);
 8001978:	481e      	ldr	r0, [pc, #120]	; (80019f4 <quatrerTurn+0x11c>)
 800197a:	f000 fc9d 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_Delay(STEP_RATE);
 800197e:	2007      	movs	r0, #7
 8001980:	f000 fb86 	bl	8002090 <HAL_Delay>
	for (int step = 0; step < n * STEPS_PER_REV / 4; step++) {
 8001984:	3501      	adds	r5, #1
 8001986:	e7b2      	b.n	80018ee <quatrerTurn+0x16>
			HAL_GPIO_WritePin(MOT0_GPIO_Port, MOT0_Pin, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2108      	movs	r1, #8
 800198c:	4819      	ldr	r0, [pc, #100]	; (80019f4 <quatrerTurn+0x11c>)
 800198e:	f000 fc93 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT1_GPIO_Port, MOT1_Pin, 1);
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	20a0      	movs	r0, #160	; 0xa0
 8001996:	0022      	movs	r2, r4
 8001998:	0189      	lsls	r1, r1, #6
 800199a:	05c0      	lsls	r0, r0, #23
 800199c:	f000 fc8c 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT2_GPIO_Port, MOT2_Pin, 1);
 80019a0:	0022      	movs	r2, r4
 80019a2:	e7e1      	b.n	8001968 <quatrerTurn+0x90>
			HAL_GPIO_WritePin(MOT0_GPIO_Port, MOT0_Pin, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2108      	movs	r1, #8
 80019a8:	4812      	ldr	r0, [pc, #72]	; (80019f4 <quatrerTurn+0x11c>)
 80019aa:	f000 fc85 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT1_GPIO_Port, MOT1_Pin, 0);
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	20a0      	movs	r0, #160	; 0xa0
 80019b2:	2200      	movs	r2, #0
 80019b4:	0189      	lsls	r1, r1, #6
 80019b6:	05c0      	lsls	r0, r0, #23
 80019b8:	f000 fc7e 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT2_GPIO_Port, MOT2_Pin, 1);
 80019bc:	2201      	movs	r2, #1
			HAL_GPIO_WritePin(MOT2_GPIO_Port, MOT2_Pin, 0);
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	20a0      	movs	r0, #160	; 0xa0
 80019c2:	0149      	lsls	r1, r1, #5
 80019c4:	05c0      	lsls	r0, r0, #23
 80019c6:	f000 fc77 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT3_GPIO_Port, MOT3_Pin, 1);
 80019ca:	2201      	movs	r2, #1
 80019cc:	0011      	movs	r1, r2
 80019ce:	e7d3      	b.n	8001978 <quatrerTurn+0xa0>
			HAL_GPIO_WritePin(MOT0_GPIO_Port, MOT0_Pin, 1);
 80019d0:	2201      	movs	r2, #1
 80019d2:	2108      	movs	r1, #8
 80019d4:	4807      	ldr	r0, [pc, #28]	; (80019f4 <quatrerTurn+0x11c>)
 80019d6:	f000 fc6f 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT1_GPIO_Port, MOT1_Pin, 0);
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	20a0      	movs	r0, #160	; 0xa0
 80019de:	2200      	movs	r2, #0
 80019e0:	0189      	lsls	r1, r1, #6
 80019e2:	05c0      	lsls	r0, r0, #23
 80019e4:	f000 fc68 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT2_GPIO_Port, MOT2_Pin, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	e7e8      	b.n	80019be <quatrerTurn+0xe6>
 80019ec:	20000110 	.word	0x20000110
 80019f0:	00001388 	.word	0x00001388
 80019f4:	50000400 	.word	0x50000400

080019f8 <printFeeding>:

void printFeeding() {
 80019f8:	b510      	push	{r4, lr}
	ssd1306_Fill(0);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 f838 	bl	8001a70 <ssd1306_Fill>
	ssd1306_SetCursor(20, 25);
 8001a00:	2119      	movs	r1, #25
 8001a02:	2014      	movs	r0, #20
 8001a04:	f000 f8d8 	bl	8001bb8 <ssd1306_SetCursor>
	ssd1306_WriteString("Feeding..", Font_11x18, 1);
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <printFeeding+0x24>)
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	ca06      	ldmia	r2, {r1, r2}
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <printFeeding+0x28>)
 8001a10:	f000 f8be 	bl	8001b90 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a14:	f000 f83a 	bl	8001a8c <ssd1306_UpdateScreen>
}
 8001a18:	bd10      	pop	{r4, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	080036f5 	.word	0x080036f5

08001a24 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001a26:	2217      	movs	r2, #23
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a28:	2301      	movs	r3, #1
void ssd1306_WriteCommand(uint8_t byte) {
 8001a2a:	446a      	add	r2, sp
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a2c:	425b      	negs	r3, r3
void ssd1306_WriteCommand(uint8_t byte) {
 8001a2e:	7010      	strb	r0, [r2, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a30:	9302      	str	r3, [sp, #8]
 8001a32:	3302      	adds	r3, #2
 8001a34:	9200      	str	r2, [sp, #0]
 8001a36:	2178      	movs	r1, #120	; 0x78
 8001a38:	2200      	movs	r2, #0
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <ssd1306_WriteCommand+0x24>)
 8001a3e:	f000 fdd5 	bl	80025ec <HAL_I2C_Mem_Write>
}
 8001a42:	b007      	add	sp, #28
 8001a44:	bd00      	pop	{pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	2000004c 	.word	0x2000004c

08001a4c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a4e:	2301      	movs	r3, #1
 8001a50:	4c06      	ldr	r4, [pc, #24]	; (8001a6c <ssd1306_WriteData+0x20>)
 8001a52:	425b      	negs	r3, r3
 8001a54:	b289      	uxth	r1, r1
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	9101      	str	r1, [sp, #4]
 8001a5a:	9000      	str	r0, [sp, #0]
 8001a5c:	2240      	movs	r2, #64	; 0x40
 8001a5e:	2178      	movs	r1, #120	; 0x78
 8001a60:	0020      	movs	r0, r4
 8001a62:	3302      	adds	r3, #2
 8001a64:	f000 fdc2 	bl	80025ec <HAL_I2C_Mem_Write>
}
 8001a68:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	2000004c 	.word	0x2000004c

08001a70 <ssd1306_Fill>:
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001a70:	1e42      	subs	r2, r0, #1
 8001a72:	4190      	sbcs	r0, r2
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001a78:	4903      	ldr	r1, [pc, #12]	; (8001a88 <ssd1306_Fill+0x18>)
 8001a7a:	4240      	negs	r0, r0
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a7c:	00d2      	lsls	r2, r2, #3
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001a7e:	54c8      	strb	r0, [r1, r3]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a80:	3301      	adds	r3, #1
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d1fb      	bne.n	8001a7e <ssd1306_Fill+0xe>
    }
}
 8001a86:	4770      	bx	lr
 8001a88:	2000011a 	.word	0x2000011a

08001a8c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	24b0      	movs	r4, #176	; 0xb0
 8001a90:	4d09      	ldr	r5, [pc, #36]	; (8001ab8 <ssd1306_UpdateScreen+0x2c>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a92:	0020      	movs	r0, r4
 8001a94:	f7ff ffc6 	bl	8001a24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff ffc3 	bl	8001a24 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a9e:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001aa0:	2010      	movs	r0, #16
 8001aa2:	f7ff ffbf 	bl	8001a24 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001aa6:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001aa8:	0028      	movs	r0, r5
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	f7ff ffce 	bl	8001a4c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ab0:	3580      	adds	r5, #128	; 0x80
 8001ab2:	2cb8      	cmp	r4, #184	; 0xb8
 8001ab4:	d1ed      	bne.n	8001a92 <ssd1306_UpdateScreen+0x6>
    }
}
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
 8001ab8:	2000011a 	.word	0x2000011a

08001abc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001abc:	0003      	movs	r3, r0
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001abe:	b240      	sxtb	r0, r0
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ac0:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	db0e      	blt.n	8001ae4 <ssd1306_DrawPixel+0x28>
 8001ac6:	293f      	cmp	r1, #63	; 0x3f
 8001ac8:	d80c      	bhi.n	8001ae4 <ssd1306_DrawPixel+0x28>
        return;
    }
   
    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001aca:	2407      	movs	r4, #7
 8001acc:	08c8      	lsrs	r0, r1, #3
 8001ace:	4d07      	ldr	r5, [pc, #28]	; (8001aec <ssd1306_DrawPixel+0x30>)
 8001ad0:	01c0      	lsls	r0, r0, #7
 8001ad2:	4021      	ands	r1, r4
 8001ad4:	18c0      	adds	r0, r0, r3
 8001ad6:	3c06      	subs	r4, #6
 8001ad8:	408c      	lsls	r4, r1
 8001ada:	5c2b      	ldrb	r3, [r5, r0]
    if(color == White) {
 8001adc:	2a01      	cmp	r2, #1
 8001ade:	d102      	bne.n	8001ae6 <ssd1306_DrawPixel+0x2a>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ae0:	4323      	orrs	r3, r4
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ae2:	542b      	strb	r3, [r5, r0]
    }
}
 8001ae4:	bd30      	pop	{r4, r5, pc}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ae6:	43a3      	bics	r3, r4
 8001ae8:	e7fb      	b.n	8001ae2 <ssd1306_DrawPixel+0x26>
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	2000011a 	.word	0x2000011a

08001af0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001af2:	0004      	movs	r4, r0
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001af4:	b089      	sub	sp, #36	; 0x24
    if (ch < 32 || ch > 126)
 8001af6:	3c20      	subs	r4, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001af8:	9304      	str	r3, [sp, #16]
    if (ch < 32 || ch > 126)
 8001afa:	b2e3      	uxtb	r3, r4
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001afc:	0005      	movs	r5, r0
 8001afe:	9106      	str	r1, [sp, #24]
 8001b00:	9207      	str	r2, [sp, #28]
    if (ch < 32 || ch > 126)
 8001b02:	2b5e      	cmp	r3, #94	; 0x5e
 8001b04:	d840      	bhi.n	8001b88 <ssd1306_WriteChar+0x98>
 8001b06:	ab06      	add	r3, sp, #24
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	9301      	str	r3, [sp, #4]
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <ssd1306_WriteChar+0x9c>)
 8001b0e:	9901      	ldr	r1, [sp, #4]
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	9200      	str	r2, [sp, #0]
 8001b14:	1852      	adds	r2, r2, r1
 8001b16:	2a80      	cmp	r2, #128	; 0x80
 8001b18:	dc36      	bgt.n	8001b88 <ssd1306_WriteChar+0x98>
 8001b1a:	aa06      	add	r2, sp, #24
 8001b1c:	7852      	ldrb	r2, [r2, #1]
 8001b1e:	9202      	str	r2, [sp, #8]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001b20:	885b      	ldrh	r3, [r3, #2]
 8001b22:	9303      	str	r3, [sp, #12]
 8001b24:	189b      	adds	r3, r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001b26:	2b40      	cmp	r3, #64	; 0x40
 8001b28:	dc2e      	bgt.n	8001b88 <ssd1306_WriteChar+0x98>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001b2a:	2700      	movs	r7, #0
 8001b2c:	4354      	muls	r4, r2
 8001b2e:	0064      	lsls	r4, r4, #1
 8001b30:	9b02      	ldr	r3, [sp, #8]
 8001b32:	42bb      	cmp	r3, r7
 8001b34:	d808      	bhi.n	8001b48 <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001b36:	9901      	ldr	r1, [sp, #4]
 8001b38:	9b00      	ldr	r3, [sp, #0]
 8001b3a:	468c      	mov	ip, r1
 8001b3c:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <ssd1306_WriteChar+0x9c>)
 8001b3e:	4463      	add	r3, ip
 8001b40:	8013      	strh	r3, [r2, #0]
    
    // Return written char for validation
    return ch;
}
 8001b42:	0028      	movs	r0, r5
 8001b44:	b009      	add	sp, #36	; 0x24
 8001b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8001b48:	2600      	movs	r6, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001b4a:	9b07      	ldr	r3, [sp, #28]
 8001b4c:	5b1b      	ldrh	r3, [r3, r4]
 8001b4e:	9305      	str	r3, [sp, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001b50:	9b01      	ldr	r3, [sp, #4]
 8001b52:	42b3      	cmp	r3, r6
 8001b54:	d802      	bhi.n	8001b5c <ssd1306_WriteChar+0x6c>
    for(i = 0; i < Font.FontHeight; i++) {
 8001b56:	3701      	adds	r7, #1
 8001b58:	3402      	adds	r4, #2
 8001b5a:	e7e9      	b.n	8001b30 <ssd1306_WriteChar+0x40>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b5c:	9b00      	ldr	r3, [sp, #0]
            if((b << j) & 0x8000)  {
 8001b5e:	2280      	movs	r2, #128	; 0x80
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b60:	18f0      	adds	r0, r6, r3
 8001b62:	9b03      	ldr	r3, [sp, #12]
            if((b << j) & 0x8000)  {
 8001b64:	0212      	lsls	r2, r2, #8
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b66:	18f9      	adds	r1, r7, r3
            if((b << j) & 0x8000)  {
 8001b68:	9b05      	ldr	r3, [sp, #20]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b6a:	b2c0      	uxtb	r0, r0
            if((b << j) & 0x8000)  {
 8001b6c:	40b3      	lsls	r3, r6
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b6e:	b2c9      	uxtb	r1, r1
            if((b << j) & 0x8000)  {
 8001b70:	4213      	tst	r3, r2
 8001b72:	d004      	beq.n	8001b7e <ssd1306_WriteChar+0x8e>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b74:	9a04      	ldr	r2, [sp, #16]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001b76:	f7ff ffa1 	bl	8001abc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001b7a:	3601      	adds	r6, #1
 8001b7c:	e7e8      	b.n	8001b50 <ssd1306_WriteChar+0x60>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001b7e:	9b04      	ldr	r3, [sp, #16]
 8001b80:	425a      	negs	r2, r3
 8001b82:	415a      	adcs	r2, r3
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	e7f6      	b.n	8001b76 <ssd1306_WriteChar+0x86>
        return 0;
 8001b88:	2500      	movs	r5, #0
 8001b8a:	e7da      	b.n	8001b42 <ssd1306_WriteChar+0x52>
 8001b8c:	20000114 	.word	0x20000114

08001b90 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001b92:	0004      	movs	r4, r0
 8001b94:	001d      	movs	r5, r3
 8001b96:	9100      	str	r1, [sp, #0]
 8001b98:	9201      	str	r2, [sp, #4]
    // Write until null-byte
    while (*str) {
 8001b9a:	7820      	ldrb	r0, [r4, #0]
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d100      	bne.n	8001ba2 <ssd1306_WriteString+0x12>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8001ba0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001ba2:	002b      	movs	r3, r5
 8001ba4:	9900      	ldr	r1, [sp, #0]
 8001ba6:	9a01      	ldr	r2, [sp, #4]
 8001ba8:	f7ff ffa2 	bl	8001af0 <ssd1306_WriteChar>
 8001bac:	0003      	movs	r3, r0
 8001bae:	7820      	ldrb	r0, [r4, #0]
 8001bb0:	4283      	cmp	r3, r0
 8001bb2:	d1f5      	bne.n	8001ba0 <ssd1306_WriteString+0x10>
        str++;
 8001bb4:	3401      	adds	r4, #1
 8001bb6:	e7f0      	b.n	8001b9a <ssd1306_WriteString+0xa>

08001bb8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8001bb8:	4b01      	ldr	r3, [pc, #4]	; (8001bc0 <ssd1306_SetCursor+0x8>)
 8001bba:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8001bbc:	8059      	strh	r1, [r3, #2]
}
 8001bbe:	4770      	bx	lr
 8001bc0:	20000114 	.word	0x20000114

08001bc4 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	ab0c      	add	r3, sp, #48	; 0x30
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	0017      	movs	r7, r2
 8001bd0:	9305      	str	r3, [sp, #20]
  int32_t deltaX = abs(x2 - x1);
 8001bd2:	1a13      	subs	r3, r2, r0
 8001bd4:	17da      	asrs	r2, r3, #31
 8001bd6:	189b      	adds	r3, r3, r2
 8001bd8:	4053      	eors	r3, r2
 8001bda:	9301      	str	r3, [sp, #4]
  int32_t deltaY = abs(y2 - y1);
 8001bdc:	9b00      	ldr	r3, [sp, #0]
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001bde:	0005      	movs	r5, r0
  int32_t deltaY = abs(y2 - y1);
 8001be0:	1a5b      	subs	r3, r3, r1
 8001be2:	17da      	asrs	r2, r3, #31
 8001be4:	189b      	adds	r3, r3, r2
 8001be6:	4053      	eors	r3, r2
 8001be8:	9302      	str	r3, [sp, #8]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001bea:	2301      	movs	r3, #1
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001bec:	000c      	movs	r4, r1
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001bee:	9303      	str	r3, [sp, #12]
 8001bf0:	4287      	cmp	r7, r0
 8001bf2:	d801      	bhi.n	8001bf8 <ssd1306_Line+0x34>
 8001bf4:	3b02      	subs	r3, #2
 8001bf6:	9303      	str	r3, [sp, #12]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	9304      	str	r3, [sp, #16]
 8001bfc:	9b00      	ldr	r3, [sp, #0]
 8001bfe:	42a3      	cmp	r3, r4
 8001c00:	d802      	bhi.n	8001c08 <ssd1306_Line+0x44>
 8001c02:	2301      	movs	r3, #1
 8001c04:	425b      	negs	r3, r3
 8001c06:	9304      	str	r3, [sp, #16]
  int32_t error = deltaX - deltaY;
 8001c08:	9a02      	ldr	r2, [sp, #8]
 8001c0a:	9b01      	ldr	r3, [sp, #4]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8001c0c:	0038      	movs	r0, r7
  int32_t error = deltaX - deltaY;
 8001c0e:	1a9e      	subs	r6, r3, r2
  ssd1306_DrawPixel(x2, y2, color);
 8001c10:	9900      	ldr	r1, [sp, #0]
 8001c12:	9a05      	ldr	r2, [sp, #20]
 8001c14:	f7ff ff52 	bl	8001abc <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8001c18:	42bd      	cmp	r5, r7
 8001c1a:	d104      	bne.n	8001c26 <ssd1306_Line+0x62>
 8001c1c:	9b00      	ldr	r3, [sp, #0]
 8001c1e:	429c      	cmp	r4, r3
 8001c20:	d101      	bne.n	8001c26 <ssd1306_Line+0x62>
    {
    /*nothing to do*/
    }
  }
  return;
}
 8001c22:	b007      	add	sp, #28
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ssd1306_DrawPixel(x1, y1, color);
 8001c26:	9a05      	ldr	r2, [sp, #20]
 8001c28:	0021      	movs	r1, r4
 8001c2a:	0028      	movs	r0, r5
 8001c2c:	f7ff ff46 	bl	8001abc <ssd1306_DrawPixel>
    if(error2 > -deltaY)
 8001c30:	9a02      	ldr	r2, [sp, #8]
    error2 = error * 2;
 8001c32:	0073      	lsls	r3, r6, #1
    if(error2 > -deltaY)
 8001c34:	4252      	negs	r2, r2
 8001c36:	429a      	cmp	r2, r3
 8001c38:	da04      	bge.n	8001c44 <ssd1306_Line+0x80>
      error -= deltaY;
 8001c3a:	9a02      	ldr	r2, [sp, #8]
 8001c3c:	1ab6      	subs	r6, r6, r2
      x1 += signX;
 8001c3e:	9a03      	ldr	r2, [sp, #12]
 8001c40:	18ad      	adds	r5, r5, r2
 8001c42:	b2ed      	uxtb	r5, r5
    if(error2 < deltaX)
 8001c44:	9a01      	ldr	r2, [sp, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	dde6      	ble.n	8001c18 <ssd1306_Line+0x54>
      y1 += signY;
 8001c4a:	9b04      	ldr	r3, [sp, #16]
      error += deltaX;
 8001c4c:	18b6      	adds	r6, r6, r2
      y1 += signY;
 8001c4e:	18e4      	adds	r4, r4, r3
 8001c50:	b2e4      	uxtb	r4, r4
 8001c52:	e7e1      	b.n	8001c18 <ssd1306_Line+0x54>

08001c54 <ssd1306_DrawBitmap>:
}

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color)
{
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	b087      	sub	sp, #28
 8001c58:	9204      	str	r2, [sp, #16]
 8001c5a:	aa0d      	add	r2, sp, #52	; 0x34
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	9000      	str	r0, [sp, #0]
 8001c60:	9205      	str	r2, [sp, #20]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c62:	466a      	mov	r2, sp
 8001c64:	7812      	ldrb	r2, [r2, #0]
{
 8001c66:	9301      	str	r3, [sp, #4]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c68:	b252      	sxtb	r2, r2
{
 8001c6a:	ab0c      	add	r3, sp, #48	; 0x30
 8001c6c:	000c      	movs	r4, r1
 8001c6e:	781b      	ldrb	r3, [r3, #0]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c70:	2a00      	cmp	r2, #0
 8001c72:	db2c      	blt.n	8001cce <ssd1306_DrawBitmap+0x7a>
 8001c74:	293f      	cmp	r1, #63	; 0x3f
 8001c76:	d82a      	bhi.n	8001cce <ssd1306_DrawBitmap+0x7a>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001c78:	2700      	movs	r7, #0
    uint8_t byte = 0;
 8001c7a:	003d      	movs	r5, r7
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001c7c:	9a01      	ldr	r2, [sp, #4]
 8001c7e:	18cb      	adds	r3, r1, r3
 8001c80:	3207      	adds	r2, #7
 8001c82:	10d2      	asrs	r2, r2, #3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	9202      	str	r2, [sp, #8]
 8001c88:	9303      	str	r3, [sp, #12]
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001c8a:	9b03      	ldr	r3, [sp, #12]
 8001c8c:	429c      	cmp	r4, r3
 8001c8e:	d01e      	beq.n	8001cce <ssd1306_DrawBitmap+0x7a>
 8001c90:	2600      	movs	r6, #0
 8001c92:	e013      	b.n	8001cbc <ssd1306_DrawBitmap+0x68>
        for (uint8_t i = 0; i < w; i++) {
            if (i & 7)
 8001c94:	2307      	movs	r3, #7
                byte <<= 1;
 8001c96:	006d      	lsls	r5, r5, #1
 8001c98:	b2ed      	uxtb	r5, r5
            if (i & 7)
 8001c9a:	4218      	tst	r0, r3
 8001c9c:	d103      	bne.n	8001ca6 <ssd1306_DrawBitmap+0x52>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001c9e:	9a04      	ldr	r2, [sp, #16]
 8001ca0:	08c3      	lsrs	r3, r0, #3
 8001ca2:	19d2      	adds	r2, r2, r7
 8001ca4:	5cd5      	ldrb	r5, [r2, r3]
            if (byte & 0x80)
 8001ca6:	b26b      	sxtb	r3, r5
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da06      	bge.n	8001cba <ssd1306_DrawBitmap+0x66>
                ssd1306_DrawPixel(x + i, y, color);
 8001cac:	9b00      	ldr	r3, [sp, #0]
 8001cae:	0021      	movs	r1, r4
 8001cb0:	1818      	adds	r0, r3, r0
 8001cb2:	9a05      	ldr	r2, [sp, #20]
 8001cb4:	b2c0      	uxtb	r0, r0
 8001cb6:	f7ff ff01 	bl	8001abc <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001cba:	3601      	adds	r6, #1
 8001cbc:	9b01      	ldr	r3, [sp, #4]
 8001cbe:	b2f0      	uxtb	r0, r6
 8001cc0:	429e      	cmp	r6, r3
 8001cc2:	d1e7      	bne.n	8001c94 <ssd1306_DrawBitmap+0x40>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001cc4:	9b02      	ldr	r3, [sp, #8]
 8001cc6:	3401      	adds	r4, #1
 8001cc8:	b2e4      	uxtb	r4, r4
 8001cca:	18ff      	adds	r7, r7, r3
 8001ccc:	e7dd      	b.n	8001c8a <ssd1306_DrawBitmap+0x36>
        }
    }
    return;
}
 8001cce:	b007      	add	sp, #28
 8001cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cd2 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001cd2:	b510      	push	{r4, lr}
 8001cd4:	0004      	movs	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001cd6:	2081      	movs	r0, #129	; 0x81
 8001cd8:	f7ff fea4 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001cdc:	0020      	movs	r0, r4
 8001cde:	f7ff fea1 	bl	8001a24 <ssd1306_WriteCommand>
}
 8001ce2:	bd10      	pop	{r4, pc}

08001ce4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	b510      	push	{r4, lr}
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
 8001ce8:	20ae      	movs	r0, #174	; 0xae
    if (on) {
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <ssd1306_SetDisplayOn+0xe>
        SSD1306.DisplayOn = 1;
 8001cee:	2301      	movs	r3, #1
        value = 0xAF;   // Display on
 8001cf0:	20af      	movs	r0, #175	; 0xaf
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
}
 8001cf2:	4a02      	ldr	r2, [pc, #8]	; (8001cfc <ssd1306_SetDisplayOn+0x18>)
 8001cf4:	7153      	strb	r3, [r2, #5]
    ssd1306_WriteCommand(value);
 8001cf6:	f7ff fe95 	bl	8001a24 <ssd1306_WriteCommand>
}
 8001cfa:	bd10      	pop	{r4, pc}
 8001cfc:	20000114 	.word	0x20000114

08001d00 <ssd1306_Init>:
void ssd1306_Init(void) {
 8001d00:	b510      	push	{r4, lr}
    HAL_Delay(100);
 8001d02:	2064      	movs	r0, #100	; 0x64
 8001d04:	f000 f9c4 	bl	8002090 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff ffeb 	bl	8001ce4 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d0e:	2020      	movs	r0, #32
 8001d10:	f7ff fe88 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff fe85 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d1a:	20b0      	movs	r0, #176	; 0xb0
 8001d1c:	f7ff fe82 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d20:	20c8      	movs	r0, #200	; 0xc8
 8001d22:	f7ff fe7f 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff fe7c 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d2c:	2010      	movs	r0, #16
 8001d2e:	f7ff fe79 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d32:	2040      	movs	r0, #64	; 0x40
 8001d34:	f7ff fe76 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8001d38:	20ff      	movs	r0, #255	; 0xff
 8001d3a:	f7ff ffca 	bl	8001cd2 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d3e:	20a1      	movs	r0, #161	; 0xa1
 8001d40:	f7ff fe70 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d44:	20a6      	movs	r0, #166	; 0xa6
 8001d46:	f7ff fe6d 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d4a:	20a8      	movs	r0, #168	; 0xa8
 8001d4c:	f7ff fe6a 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8001d50:	203f      	movs	r0, #63	; 0x3f
 8001d52:	f7ff fe67 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d56:	20a4      	movs	r0, #164	; 0xa4
 8001d58:	f7ff fe64 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d5c:	20d3      	movs	r0, #211	; 0xd3
 8001d5e:	f7ff fe61 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7ff fe5e 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d68:	20d5      	movs	r0, #213	; 0xd5
 8001d6a:	f7ff fe5b 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d6e:	20f0      	movs	r0, #240	; 0xf0
 8001d70:	f7ff fe58 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d74:	20d9      	movs	r0, #217	; 0xd9
 8001d76:	f7ff fe55 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001d7a:	2022      	movs	r0, #34	; 0x22
 8001d7c:	f7ff fe52 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001d80:	20da      	movs	r0, #218	; 0xda
 8001d82:	f7ff fe4f 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8001d86:	2012      	movs	r0, #18
 8001d88:	f7ff fe4c 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001d8c:	20db      	movs	r0, #219	; 0xdb
 8001d8e:	f7ff fe49 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001d92:	2020      	movs	r0, #32
 8001d94:	f7ff fe46 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001d98:	208d      	movs	r0, #141	; 0x8d
 8001d9a:	f7ff fe43 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001d9e:	2014      	movs	r0, #20
 8001da0:	f7ff fe40 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff ff9d 	bl	8001ce4 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f7ff fe60 	bl	8001a70 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8001db0:	f7ff fe6c 	bl	8001a8c <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8001db4:	2200      	movs	r2, #0
 8001db6:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <ssd1306_Init+0xc4>)
 8001db8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001dba:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8001dbc:	3201      	adds	r2, #1
 8001dbe:	711a      	strb	r2, [r3, #4]
}
 8001dc0:	bd10      	pop	{r4, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	20000114 	.word	0x20000114

08001dc8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_MspInit+0x2c>)
{
 8001dcc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40
 8001dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	9200      	str	r2, [sp, #0]
 8001ddc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001de0:	0549      	lsls	r1, r1, #21
 8001de2:	430a      	orrs	r2, r1
 8001de4:	63da      	str	r2, [r3, #60]	; 0x3c
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	400b      	ands	r3, r1
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	b002      	add	sp, #8
 8001df0:	4770      	bx	lr
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	40021000 	.word	0x40021000

08001df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df8:	b510      	push	{r4, lr}
 8001dfa:	0004      	movs	r4, r0
 8001dfc:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	2214      	movs	r2, #20
 8001e00:	2100      	movs	r1, #0
 8001e02:	a803      	add	r0, sp, #12
 8001e04:	f001 fb88 	bl	8003518 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e08:	2218      	movs	r2, #24
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	a808      	add	r0, sp, #32
 8001e0e:	f001 fb83 	bl	8003518 <memset>
  if(hi2c->Instance==I2C1)
 8001e12:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_I2C_MspInit+0x78>)
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d128      	bne.n	8001e6c <HAL_I2C_MspInit+0x74>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e1a:	2320      	movs	r3, #32
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1c:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e1e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e20:	f001 f92e 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001e28:	f7ff fd36 	bl	8001898 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	4c11      	ldr	r4, [pc, #68]	; (8001e74 <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	4811      	ldr	r0, [pc, #68]	; (8001e78 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	6b63      	ldr	r3, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	4313      	orrs	r3, r2
 8001e38:	6363      	str	r3, [r4, #52]	; 0x34
 8001e3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e42:	23c0      	movs	r3, #192	; 0xc0
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e48:	2312      	movs	r3, #18
 8001e4a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001e52:	3306      	adds	r3, #6
 8001e54:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e56:	f000 f97d 	bl	8002154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e5e:	0392      	lsls	r2, r2, #14
 8001e60:	4313      	orrs	r3, r2
 8001e62:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001e64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e66:	4013      	ands	r3, r2
 8001e68:	9302      	str	r3, [sp, #8]
 8001e6a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e6c:	b00e      	add	sp, #56	; 0x38
 8001e6e:	bd10      	pop	{r4, pc}
 8001e70:	40005400 	.word	0x40005400
 8001e74:	40021000 	.word	0x40021000
 8001e78:	50000400 	.word	0x50000400

08001e7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e7c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM14)
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_TIM_Base_MspInit+0x30>)
 8001e80:	6802      	ldr	r2, [r0, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d111      	bne.n	8001eaa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_TIM_Base_MspInit+0x34>)
 8001e8a:	0209      	lsls	r1, r1, #8
 8001e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001e8e:	2013      	movs	r0, #19
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e90:	430a      	orrs	r2, r1
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001e94:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	400b      	ands	r3, r1
 8001e9a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001e9c:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e9e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001ea0:	f000 f908 	bl	80020b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001ea4:	2013      	movs	r0, #19
 8001ea6:	f000 f92f 	bl	8002108 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001eaa:	bd07      	pop	{r0, r1, r2, pc}
 8001eac:	40002000 	.word	0x40002000
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <NMI_Handler>

08001eb6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <HardFault_Handler>

08001eb8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001eb8:	4770      	bx	lr

08001eba <PendSV_Handler>:
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ebc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ebe:	f000 f8d5 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec2:	bd10      	pop	{r4, pc}

08001ec4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001ec4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENTER_B_Pin);
 8001ec6:	2020      	movs	r0, #32
 8001ec8:	f000 fa06 	bl	80022d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUS_B_Pin);
 8001ecc:	2040      	movs	r0, #64	; 0x40
 8001ece:	f000 fa03 	bl	80022d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PLUS_B_Pin);
 8001ed2:	2080      	movs	r0, #128	; 0x80
 8001ed4:	f000 fa00 	bl	80022d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001ed8:	bd10      	pop	{r4, pc}
	...

08001edc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001edc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ede:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <TIM14_IRQHandler+0xc>)
 8001ee0:	f001 f9a8 	bl	8003234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001ee4:	bd10      	pop	{r4, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	200000a0 	.word	0x200000a0

08001eec <storeSettings>:
 */
#include "storeSettings.h"

/* FUNZIONI */
void storeSettings(Meal m1, Meal m2, Meal m3, uint8_t brk, uint8_t lu,
		uint8_t din) {
 8001eec:	4694      	mov	ip, r2
 8001eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef0:	0c04      	lsrs	r4, r0, #16
 8001ef2:	b08d      	sub	sp, #52	; 0x34
 8001ef4:	9401      	str	r4, [sp, #4]
 8001ef6:	0a0c      	lsrs	r4, r1, #8
 8001ef8:	9402      	str	r4, [sp, #8]
 8001efa:	0c0c      	lsrs	r4, r1, #16
 8001efc:	9403      	str	r4, [sp, #12]
 8001efe:	0a14      	lsrs	r4, r2, #8
 8001f00:	9007      	str	r0, [sp, #28]
 8001f02:	9106      	str	r1, [sp, #24]
 8001f04:	9205      	str	r2, [sp, #20]
 8001f06:	9404      	str	r4, [sp, #16]
 8001f08:	ac13      	add	r4, sp, #76	; 0x4c
 8001f0a:	7827      	ldrb	r7, [r4, #0]
	/* DATA PREPARATION */
	uint8_t rawdata[12];
	rawdata[0] = m1.type;
 8001f0c:	ac09      	add	r4, sp, #36	; 0x24
	rawdata[1] = m1.hour;
	rawdata[2] = m1.min;

	rawdata[3] = m2.type;
 8001f0e:	70e1      	strb	r1, [r4, #3]
	rawdata[4] = m2.hour;
 8001f10:	9902      	ldr	r1, [sp, #8]
		uint8_t din) {
 8001f12:	0c15      	lsrs	r5, r2, #16
	rawdata[4] = m2.hour;
 8001f14:	7121      	strb	r1, [r4, #4]
	rawdata[5] = m2.min;
 8001f16:	9903      	ldr	r1, [sp, #12]
		uint8_t din) {
 8001f18:	aa12      	add	r2, sp, #72	; 0x48
	rawdata[5] = m2.min;
 8001f1a:	7161      	strb	r1, [r4, #5]

	rawdata[6] = m3.type;
 8001f1c:	4661      	mov	r1, ip
 8001f1e:	71a1      	strb	r1, [r4, #6]
	rawdata[7] = m3.hour;
 8001f20:	9904      	ldr	r1, [sp, #16]
		uint8_t din) {
 8001f22:	7812      	ldrb	r2, [r2, #0]
	rawdata[7] = m3.hour;
 8001f24:	71e1      	strb	r1, [r4, #7]
	rawdata[9] = brk;
	rawdata[10] = lu;
	rawdata[11] = din;

	/* STORING DATA */
	EEPROM_Write(DATA_PAGE, DATA_OFFSET, rawdata, 12);
 8001f26:	2100      	movs	r1, #0
		uint8_t din) {
 8001f28:	0a06      	lsrs	r6, r0, #8
	rawdata[0] = m1.type;
 8001f2a:	7020      	strb	r0, [r4, #0]
	rawdata[2] = m1.min;
 8001f2c:	9801      	ldr	r0, [sp, #4]
	rawdata[9] = brk;
 8001f2e:	7263      	strb	r3, [r4, #9]
	rawdata[2] = m1.min;
 8001f30:	70a0      	strb	r0, [r4, #2]
	rawdata[10] = lu;
 8001f32:	72a2      	strb	r2, [r4, #10]
	EEPROM_Write(DATA_PAGE, DATA_OFFSET, rawdata, 12);
 8001f34:	230c      	movs	r3, #12
 8001f36:	0022      	movs	r2, r4
 8001f38:	0008      	movs	r0, r1
	rawdata[1] = m1.hour;
 8001f3a:	7066      	strb	r6, [r4, #1]
	rawdata[8] = m3.min;
 8001f3c:	7225      	strb	r5, [r4, #8]
	rawdata[11] = din;
 8001f3e:	72e7      	strb	r7, [r4, #11]
	EEPROM_Write(DATA_PAGE, DATA_OFFSET, rawdata, 12);
 8001f40:	f7fe fae4 	bl	800050c <EEPROM_Write>
}
 8001f44:	b00d      	add	sp, #52	; 0x34
 8001f46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f48 <getSettings>:

void getSettings(Meal *meal1, Meal *meal2, Meal *meal3, uint8_t *brk, uint8_t *lu,
		uint8_t *din) {
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	000e      	movs	r6, r1
	uint8_t rawdata[12];
	EEPROM_Read(DATA_PAGE, DATA_OFFSET, rawdata, 12);
 8001f4c:	2100      	movs	r1, #0
		uint8_t *din) {
 8001f4e:	0007      	movs	r7, r0
 8001f50:	0015      	movs	r5, r2
 8001f52:	b087      	sub	sp, #28
	EEPROM_Read(DATA_PAGE, DATA_OFFSET, rawdata, 12);
 8001f54:	ac03      	add	r4, sp, #12
 8001f56:	0022      	movs	r2, r4
		uint8_t *din) {
 8001f58:	9301      	str	r3, [sp, #4]
	EEPROM_Read(DATA_PAGE, DATA_OFFSET, rawdata, 12);
 8001f5a:	0008      	movs	r0, r1
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	f7fe fb09 	bl	8000574 <EEPROM_Read>

	meal1->type = rawdata[0];
 8001f62:	7823      	ldrb	r3, [r4, #0]

	meal3->type = rawdata[6];
	meal3->hour = rawdata[7];
	meal3->min = rawdata[8];

	*brk = rawdata[9];
 8001f64:	9a01      	ldr	r2, [sp, #4]
	meal1->type = rawdata[0];
 8001f66:	703b      	strb	r3, [r7, #0]
	meal1->hour = rawdata[1];
 8001f68:	7863      	ldrb	r3, [r4, #1]
 8001f6a:	707b      	strb	r3, [r7, #1]
	meal1->min = rawdata[2];
 8001f6c:	78a3      	ldrb	r3, [r4, #2]
 8001f6e:	70bb      	strb	r3, [r7, #2]
	meal2->type = rawdata[3];
 8001f70:	78e3      	ldrb	r3, [r4, #3]
 8001f72:	7033      	strb	r3, [r6, #0]
	meal2->hour = rawdata[4];
 8001f74:	7923      	ldrb	r3, [r4, #4]
 8001f76:	7073      	strb	r3, [r6, #1]
	meal2->min = rawdata[5];
 8001f78:	7963      	ldrb	r3, [r4, #5]
 8001f7a:	70b3      	strb	r3, [r6, #2]
	meal3->type = rawdata[6];
 8001f7c:	79a3      	ldrb	r3, [r4, #6]
 8001f7e:	702b      	strb	r3, [r5, #0]
	meal3->hour = rawdata[7];
 8001f80:	79e3      	ldrb	r3, [r4, #7]
 8001f82:	706b      	strb	r3, [r5, #1]
	meal3->min = rawdata[8];
 8001f84:	7a23      	ldrb	r3, [r4, #8]
 8001f86:	70ab      	strb	r3, [r5, #2]
	*brk = rawdata[9];
 8001f88:	7a63      	ldrb	r3, [r4, #9]
 8001f8a:	7013      	strb	r3, [r2, #0]
	*lu = rawdata[10];
 8001f8c:	7aa3      	ldrb	r3, [r4, #10]
 8001f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001f90:	7013      	strb	r3, [r2, #0]
	*din = rawdata[11];
 8001f92:	7ae3      	ldrb	r3, [r4, #11]
 8001f94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001f96:	7013      	strb	r3, [r2, #0]
}
 8001f98:	b007      	add	sp, #28
 8001f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f9c <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	4770      	bx	lr
	...

08001fa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fa0:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fa2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fa4:	f7ff fffa 	bl	8001f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001faa:	490d      	ldr	r1, [pc, #52]	; (8001fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <LoopForever+0xe>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc0:	4c0a      	ldr	r4, [pc, #40]	; (8001fec <LoopForever+0x16>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fce:	f001 faab 	bl	8003528 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001fd2:	f7ff f86f 	bl	80010b4 <main>

08001fd6 <LoopForever>:

LoopForever:
  b LoopForever
 8001fd6:	e7fe      	b.n	8001fd6 <LoopForever>
  ldr   r0, =_estack
 8001fd8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001fe4:	08004c38 	.word	0x08004c38
  ldr r2, =_sbss
 8001fe8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001fec:	20000520 	.word	0x20000520

08001ff0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC1_IRQHandler>
	...

08001ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_InitTick+0x44>)
{
 8001ff8:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001ffa:	7819      	ldrb	r1, [r3, #0]
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002000:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002002:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002004:	20fa      	movs	r0, #250	; 0xfa
 8002006:	0080      	lsls	r0, r0, #2
 8002008:	f7fe f884 	bl	8000114 <__udivsi3>
 800200c:	4c0b      	ldr	r4, [pc, #44]	; (800203c <HAL_InitTick+0x48>)
 800200e:	0001      	movs	r1, r0
 8002010:	6820      	ldr	r0, [r4, #0]
 8002012:	f7fe f87f 	bl	8000114 <__udivsi3>
 8002016:	f000 f883 	bl	8002120 <HAL_SYSTICK_Config>
 800201a:	1e04      	subs	r4, r0, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201e:	2d03      	cmp	r5, #3
 8002020:	d8ee      	bhi.n	8002000 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002022:	0002      	movs	r2, r0
 8002024:	2001      	movs	r0, #1
 8002026:	0029      	movs	r1, r5
 8002028:	4240      	negs	r0, r0
 800202a:	f000 f843 	bl	80020b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_InitTick+0x4c>)
 8002030:	0020      	movs	r0, r4
 8002032:	601d      	str	r5, [r3, #0]
  return status;
 8002034:	e7e5      	b.n	8002002 <HAL_InitTick+0xe>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	20000018 	.word	0x20000018
 800203c:	20000014 	.word	0x20000014
 8002040:	2000001c 	.word	0x2000001c

08002044 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_Init+0x24>)
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	6811      	ldr	r1, [r2, #0]
{
 800204c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204e:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002050:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002052:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002054:	f7ff ffce 	bl	8001ff4 <HAL_InitTick>
 8002058:	1e04      	subs	r4, r0, #0
 800205a:	d103      	bne.n	8002064 <HAL_Init+0x20>
  HAL_MspInit();
 800205c:	f7ff feb4 	bl	8001dc8 <HAL_MspInit>
}
 8002060:	0020      	movs	r0, r4
 8002062:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002064:	2401      	movs	r4, #1
 8002066:	e7fb      	b.n	8002060 <HAL_Init+0x1c>
 8002068:	40022000 	.word	0x40022000

0800206c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800206c:	4a03      	ldr	r2, [pc, #12]	; (800207c <HAL_IncTick+0x10>)
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <HAL_IncTick+0x14>)
 8002070:	6811      	ldr	r1, [r2, #0]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	185b      	adds	r3, r3, r1
 8002076:	6013      	str	r3, [r2, #0]
}
 8002078:	4770      	bx	lr
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	2000051c 	.word	0x2000051c
 8002080:	20000018 	.word	0x20000018

08002084 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002084:	4b01      	ldr	r3, [pc, #4]	; (800208c <HAL_GetTick+0x8>)
 8002086:	6818      	ldr	r0, [r3, #0]
}
 8002088:	4770      	bx	lr
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	2000051c 	.word	0x2000051c

08002090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff fff6 	bl	8002084 <HAL_GetTick>
 8002098:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209a:	1c63      	adds	r3, r4, #1
 800209c:	d002      	beq.n	80020a4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <HAL_Delay+0x20>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a4:	f7ff ffee 	bl	8002084 <HAL_GetTick>
 80020a8:	1b40      	subs	r0, r0, r5
 80020aa:	42a0      	cmp	r0, r4
 80020ac:	d3fa      	bcc.n	80020a4 <HAL_Delay+0x14>
  {
  }
}
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
 80020b0:	20000018 	.word	0x20000018

080020b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020b6:	25ff      	movs	r5, #255	; 0xff
 80020b8:	2403      	movs	r4, #3
 80020ba:	002a      	movs	r2, r5
 80020bc:	4004      	ands	r4, r0
 80020be:	00e4      	lsls	r4, r4, #3
 80020c0:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020c2:	0189      	lsls	r1, r1, #6
 80020c4:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020c6:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020c8:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ca:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80020cc:	2800      	cmp	r0, #0
 80020ce:	db0a      	blt.n	80020e6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d0:	24c0      	movs	r4, #192	; 0xc0
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_NVIC_SetPriority+0x4c>)
 80020d4:	0880      	lsrs	r0, r0, #2
 80020d6:	0080      	lsls	r0, r0, #2
 80020d8:	18c0      	adds	r0, r0, r3
 80020da:	00a4      	lsls	r4, r4, #2
 80020dc:	5903      	ldr	r3, [r0, r4]
 80020de:	4013      	ands	r3, r2
 80020e0:	430b      	orrs	r3, r1
 80020e2:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80020e4:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020e6:	200f      	movs	r0, #15
 80020e8:	4003      	ands	r3, r0
 80020ea:	3b08      	subs	r3, #8
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <HAL_NVIC_SetPriority+0x50>)
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	181b      	adds	r3, r3, r0
 80020f4:	69d8      	ldr	r0, [r3, #28]
 80020f6:	4002      	ands	r2, r0
 80020f8:	430a      	orrs	r2, r1
 80020fa:	61da      	str	r2, [r3, #28]
 80020fc:	e7f2      	b.n	80020e4 <HAL_NVIC_SetPriority+0x30>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002108:	2800      	cmp	r0, #0
 800210a:	db05      	blt.n	8002118 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210c:	231f      	movs	r3, #31
 800210e:	4018      	ands	r0, r3
 8002110:	3b1e      	subs	r3, #30
 8002112:	4083      	lsls	r3, r0
 8002114:	4a01      	ldr	r2, [pc, #4]	; (800211c <HAL_NVIC_EnableIRQ+0x14>)
 8002116:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002118:	4770      	bx	lr
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	e000e100 	.word	0xe000e100

08002120 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	1e43      	subs	r3, r0, #1
 8002124:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	4293      	cmp	r3, r2
 800212a:	d20d      	bcs.n	8002148 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800212c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002130:	4807      	ldr	r0, [pc, #28]	; (8002150 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002132:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002134:	6a03      	ldr	r3, [r0, #32]
 8002136:	0609      	lsls	r1, r1, #24
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	430b      	orrs	r3, r1
 800213e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002140:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002144:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002146:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002148:	4770      	bx	lr
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	e000e010 	.word	0xe000e010
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8002154:	2300      	movs	r3, #0
{
 8002156:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002158:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215a:	680a      	ldr	r2, [r1, #0]
 800215c:	0014      	movs	r4, r2
 800215e:	40dc      	lsrs	r4, r3
 8002160:	d101      	bne.n	8002166 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8002162:	b005      	add	sp, #20
 8002164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002166:	2501      	movs	r5, #1
 8002168:	0014      	movs	r4, r2
 800216a:	409d      	lsls	r5, r3
 800216c:	402c      	ands	r4, r5
 800216e:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8002170:	422a      	tst	r2, r5
 8002172:	d100      	bne.n	8002176 <HAL_GPIO_Init+0x22>
 8002174:	e091      	b.n	800229a <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002176:	684a      	ldr	r2, [r1, #4]
 8002178:	005f      	lsls	r7, r3, #1
 800217a:	4694      	mov	ip, r2
 800217c:	2203      	movs	r2, #3
 800217e:	4664      	mov	r4, ip
 8002180:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002182:	2403      	movs	r4, #3
 8002184:	40bc      	lsls	r4, r7
 8002186:	43e4      	mvns	r4, r4
 8002188:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800218a:	1e54      	subs	r4, r2, #1
 800218c:	2c01      	cmp	r4, #1
 800218e:	d82e      	bhi.n	80021ee <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8002190:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002192:	9c01      	ldr	r4, [sp, #4]
 8002194:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002196:	68cc      	ldr	r4, [r1, #12]
 8002198:	40bc      	lsls	r4, r7
 800219a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800219c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800219e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a0:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021a2:	43ac      	bics	r4, r5
 80021a4:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a6:	4664      	mov	r4, ip
 80021a8:	0924      	lsrs	r4, r4, #4
 80021aa:	4034      	ands	r4, r6
 80021ac:	409c      	lsls	r4, r3
 80021ae:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80021b0:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80021b2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021b4:	9c01      	ldr	r4, [sp, #4]
 80021b6:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021b8:	688c      	ldr	r4, [r1, #8]
 80021ba:	40bc      	lsls	r4, r7
 80021bc:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80021be:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c0:	2a02      	cmp	r2, #2
 80021c2:	d116      	bne.n	80021f2 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021c4:	2507      	movs	r5, #7
 80021c6:	260f      	movs	r6, #15
 80021c8:	401d      	ands	r5, r3
 80021ca:	00ad      	lsls	r5, r5, #2
 80021cc:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 80021ce:	08dc      	lsrs	r4, r3, #3
 80021d0:	00a4      	lsls	r4, r4, #2
 80021d2:	1904      	adds	r4, r0, r4
 80021d4:	9402      	str	r4, [sp, #8]
 80021d6:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021d8:	9603      	str	r6, [sp, #12]
 80021da:	0026      	movs	r6, r4
 80021dc:	9c03      	ldr	r4, [sp, #12]
 80021de:	43a6      	bics	r6, r4
 80021e0:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021e2:	690e      	ldr	r6, [r1, #16]
 80021e4:	40ae      	lsls	r6, r5
 80021e6:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80021e8:	9c02      	ldr	r4, [sp, #8]
 80021ea:	6226      	str	r6, [r4, #32]
 80021ec:	e001      	b.n	80021f2 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ee:	2a03      	cmp	r2, #3
 80021f0:	d1df      	bne.n	80021b2 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021f2:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80021f4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021f6:	9d01      	ldr	r5, [sp, #4]
 80021f8:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021fa:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021fc:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 80021fe:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002200:	4662      	mov	r2, ip
 8002202:	02a4      	lsls	r4, r4, #10
 8002204:	4222      	tst	r2, r4
 8002206:	d048      	beq.n	800229a <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 8002208:	4a25      	ldr	r2, [pc, #148]	; (80022a0 <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800220a:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 800220c:	089c      	lsrs	r4, r3, #2
 800220e:	00a4      	lsls	r4, r4, #2
 8002210:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002212:	220f      	movs	r2, #15
 8002214:	401d      	ands	r5, r3
 8002216:	00ed      	lsls	r5, r5, #3
 8002218:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800221a:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 800221c:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800221e:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002220:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002222:	2200      	movs	r2, #0
 8002224:	42b8      	cmp	r0, r7
 8002226:	d00c      	beq.n	8002242 <HAL_GPIO_Init+0xee>
 8002228:	4f1e      	ldr	r7, [pc, #120]	; (80022a4 <HAL_GPIO_Init+0x150>)
 800222a:	3201      	adds	r2, #1
 800222c:	42b8      	cmp	r0, r7
 800222e:	d008      	beq.n	8002242 <HAL_GPIO_Init+0xee>
 8002230:	4f1d      	ldr	r7, [pc, #116]	; (80022a8 <HAL_GPIO_Init+0x154>)
 8002232:	3201      	adds	r2, #1
 8002234:	42b8      	cmp	r0, r7
 8002236:	d004      	beq.n	8002242 <HAL_GPIO_Init+0xee>
 8002238:	4f1c      	ldr	r7, [pc, #112]	; (80022ac <HAL_GPIO_Init+0x158>)
 800223a:	3201      	adds	r2, #1
 800223c:	42b8      	cmp	r0, r7
 800223e:	d000      	beq.n	8002242 <HAL_GPIO_Init+0xee>
 8002240:	3202      	adds	r2, #2
 8002242:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002244:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002246:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8002248:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->RTSR1;
 800224a:	4c15      	ldr	r4, [pc, #84]	; (80022a0 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 800224c:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 800224e:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8002250:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8002252:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8002254:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002256:	02ff      	lsls	r7, r7, #11
 8002258:	d401      	bmi.n	800225e <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 800225a:	0035      	movs	r5, r6
 800225c:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800225e:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8002260:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8002262:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8002264:	9d00      	ldr	r5, [sp, #0]
 8002266:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002268:	02bf      	lsls	r7, r7, #10
 800226a:	d401      	bmi.n	8002270 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 800226c:	0035      	movs	r5, r6
 800226e:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002270:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8002272:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8002274:	4c0e      	ldr	r4, [pc, #56]	; (80022b0 <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 8002276:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 8002278:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
          temp |= iocurrent;
 800227a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800227c:	03bf      	lsls	r7, r7, #14
 800227e:	d401      	bmi.n	8002284 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8002280:	0035      	movs	r5, r6
 8002282:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002284:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8002286:	67e5      	str	r5, [r4, #124]	; 0x7c
        temp = EXTI->IMR1;
 8002288:	4c0a      	ldr	r4, [pc, #40]	; (80022b4 <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 800228a:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 800228c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
          temp |= iocurrent;
 800228e:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002290:	03ff      	lsls	r7, r7, #15
 8002292:	d401      	bmi.n	8002298 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8002294:	4015      	ands	r5, r2
 8002296:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8002298:	67e6      	str	r6, [r4, #124]	; 0x7c
    position++;
 800229a:	3301      	adds	r3, #1
 800229c:	e75d      	b.n	800215a <HAL_GPIO_Init+0x6>
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	40021800 	.word	0x40021800
 80022a4:	50000400 	.word	0x50000400
 80022a8:	50000800 	.word	0x50000800
 80022ac:	50000c00 	.word	0x50000c00
 80022b0:	40021808 	.word	0x40021808
 80022b4:	40021804 	.word	0x40021804

080022b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b8:	2a00      	cmp	r2, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022bc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022be:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022c0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80022c2:	e7fc      	b.n	80022be <HAL_GPIO_WritePin+0x6>

080022c4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022c4:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022c6:	0013      	movs	r3, r2
 80022c8:	400b      	ands	r3, r1
 80022ca:	041b      	lsls	r3, r3, #16
 80022cc:	4391      	bics	r1, r2
 80022ce:	430b      	orrs	r3, r1
 80022d0:	6183      	str	r3, [r0, #24]
}
 80022d2:	4770      	bx	lr

080022d4 <HAL_GPIO_EXTI_Falling_Callback>:
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022d8:	b570      	push	{r4, r5, r6, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80022da:	4d08      	ldr	r5, [pc, #32]	; (80022fc <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 80022dc:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80022de:	68eb      	ldr	r3, [r5, #12]
 80022e0:	4218      	tst	r0, r3
 80022e2:	d002      	beq.n	80022ea <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80022e4:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80022e6:	f7ff f8e5 	bl	80014b4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80022ea:	692b      	ldr	r3, [r5, #16]
 80022ec:	4223      	tst	r3, r4
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80022f0:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80022f2:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80022f4:	f7ff ffee 	bl	80022d4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80022f8:	bd70      	pop	{r4, r5, r6, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	40021800 	.word	0x40021800

08002300 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002300:	6803      	ldr	r3, [r0, #0]
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	0792      	lsls	r2, r2, #30
 8002306:	d501      	bpl.n	800230c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002308:	2200      	movs	r2, #0
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800230c:	2201      	movs	r2, #1
 800230e:	6999      	ldr	r1, [r3, #24]
 8002310:	4211      	tst	r1, r2
 8002312:	d102      	bne.n	800231a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002314:	6999      	ldr	r1, [r3, #24]
 8002316:	430a      	orrs	r2, r1
 8002318:	619a      	str	r2, [r3, #24]
  }
}
 800231a:	4770      	bx	lr

0800231c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800231c:	b530      	push	{r4, r5, lr}
 800231e:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002320:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002322:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002324:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002326:	0589      	lsls	r1, r1, #22
 8002328:	431a      	orrs	r2, r3
 800232a:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <I2C_TransferConfig+0x28>)
 800232e:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002330:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002332:	0d64      	lsrs	r4, r4, #21
 8002334:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002336:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002338:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800233a:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800233c:	432a      	orrs	r2, r5
 800233e:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002340:	bd30      	pop	{r4, r5, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	03ff63ff 	.word	0x03ff63ff

08002348 <I2C_IsErrorOccurred>:
{
 8002348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800234a:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 800234c:	6802      	ldr	r2, [r0, #0]
{
 800234e:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8002350:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002352:	2310      	movs	r3, #16
 8002354:	000f      	movs	r7, r1
{
 8002356:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002358:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800235c:	4219      	tst	r1, r3
 800235e:	d00e      	beq.n	800237e <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002360:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002362:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8002364:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	699a      	ldr	r2, [r3, #24]
 800236c:	423a      	tst	r2, r7
 800236e:	d163      	bne.n	8002438 <I2C_IsErrorOccurred+0xf0>
 8002370:	9a01      	ldr	r2, [sp, #4]
 8002372:	2a00      	cmp	r2, #0
 8002374:	d031      	beq.n	80023da <I2C_IsErrorOccurred+0x92>
    error_code |= HAL_I2C_ERROR_AF;
 8002376:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8002378:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 800237a:	9b00      	ldr	r3, [sp, #0]
 800237c:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800237e:	2280      	movs	r2, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8002380:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002382:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 8002384:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002386:	4213      	tst	r3, r2
 8002388:	d002      	beq.n	8002390 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 800238a:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800238c:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800238e:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	00d2      	lsls	r2, r2, #3
 8002394:	4213      	tst	r3, r2
 8002396:	d003      	beq.n	80023a0 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8002398:	2108      	movs	r1, #8
    status = HAL_ERROR;
 800239a:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 800239c:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800239e:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	4213      	tst	r3, r2
 80023a6:	d04c      	beq.n	8002442 <I2C_IsErrorOccurred+0xfa>
    error_code |= HAL_I2C_ERROR_ARLO;
 80023a8:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023aa:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80023ac:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 80023ae:	0020      	movs	r0, r4
 80023b0:	f7ff ffa6 	bl	8002300 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80023b4:	686b      	ldr	r3, [r5, #4]
 80023b6:	4a24      	ldr	r2, [pc, #144]	; (8002448 <I2C_IsErrorOccurred+0x100>)
    __HAL_UNLOCK(hi2c);
 80023b8:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80023ba:	4013      	ands	r3, r2
 80023bc:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 80023be:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023c0:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80023c2:	433b      	orrs	r3, r7
 80023c4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	0023      	movs	r3, r4
 80023c8:	3341      	adds	r3, #65	; 0x41
 80023ca:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023cc:	0022      	movs	r2, r4
 80023ce:	2300      	movs	r3, #0
 80023d0:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80023d2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d4:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80023d6:	7023      	strb	r3, [r4, #0]
 80023d8:	e035      	b.n	8002446 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 80023da:	1c72      	adds	r2, r6, #1
 80023dc:	d0c5      	beq.n	800236a <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023de:	f7ff fe51 	bl	8002084 <HAL_GetTick>
 80023e2:	1b40      	subs	r0, r0, r5
 80023e4:	42b0      	cmp	r0, r6
 80023e6:	d801      	bhi.n	80023ec <I2C_IsErrorOccurred+0xa4>
 80023e8:	2e00      	cmp	r6, #0
 80023ea:	d1bd      	bne.n	8002368 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 80023ec:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023ee:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 80023f0:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023f2:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80023f4:	7811      	ldrb	r1, [r2, #0]
 80023f6:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023f8:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 80023fa:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	0209      	lsls	r1, r1, #8
 8002400:	420a      	tst	r2, r1
 8002402:	d00c      	beq.n	800241e <I2C_IsErrorOccurred+0xd6>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002408:	4210      	tst	r0, r2
 800240a:	d108      	bne.n	800241e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800240c:	4661      	mov	r1, ip
 800240e:	2920      	cmp	r1, #32
 8002410:	d005      	beq.n	800241e <I2C_IsErrorOccurred+0xd6>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	430a      	orrs	r2, r1
 8002416:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002418:	f7ff fe34 	bl	8002084 <HAL_GetTick>
 800241c:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	423b      	tst	r3, r7
 8002424:	d1a0      	bne.n	8002368 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002426:	f7ff fe2d 	bl	8002084 <HAL_GetTick>
 800242a:	1b40      	subs	r0, r0, r5
 800242c:	2819      	cmp	r0, #25
 800242e:	d9f6      	bls.n	800241e <I2C_IsErrorOccurred+0xd6>
              status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002432:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	e797      	b.n	8002368 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8002438:	9a01      	ldr	r2, [sp, #4]
 800243a:	2a00      	cmp	r2, #0
 800243c:	d19b      	bne.n	8002376 <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800243e:	61df      	str	r7, [r3, #28]
 8002440:	e799      	b.n	8002376 <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8002442:	2800      	cmp	r0, #0
 8002444:	d1b3      	bne.n	80023ae <I2C_IsErrorOccurred+0x66>
}
 8002446:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002448:	fe00e800 	.word	0xfe00e800

0800244c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244e:	0004      	movs	r4, r0
 8002450:	000d      	movs	r5, r1
 8002452:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002454:	2702      	movs	r7, #2
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	423b      	tst	r3, r7
 800245c:	d001      	beq.n	8002462 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800245e:	2000      	movs	r0, #0
}
 8002460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002462:	0032      	movs	r2, r6
 8002464:	0029      	movs	r1, r5
 8002466:	0020      	movs	r0, r4
 8002468:	f7ff ff6e 	bl	8002348 <I2C_IsErrorOccurred>
 800246c:	2800      	cmp	r0, #0
 800246e:	d115      	bne.n	800249c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002470:	1c6b      	adds	r3, r5, #1
 8002472:	d0f0      	beq.n	8002456 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002474:	f7ff fe06 	bl	8002084 <HAL_GetTick>
 8002478:	1b80      	subs	r0, r0, r6
 800247a:	42a8      	cmp	r0, r5
 800247c:	d801      	bhi.n	8002482 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800247e:	2d00      	cmp	r5, #0
 8002480:	d1e9      	bne.n	8002456 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002482:	2220      	movs	r2, #32
 8002484:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002486:	4313      	orrs	r3, r2
 8002488:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800248a:	0023      	movs	r3, r4
 800248c:	3341      	adds	r3, #65	; 0x41
 800248e:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	0022      	movs	r2, r4
 8002492:	2300      	movs	r3, #0
 8002494:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8002496:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002498:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800249a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800249c:	2001      	movs	r0, #1
 800249e:	e7df      	b.n	8002460 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080024a0 <I2C_WaitOnFlagUntilTimeout>:
{
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a2:	0004      	movs	r4, r0
 80024a4:	000e      	movs	r6, r1
 80024a6:	0017      	movs	r7, r2
 80024a8:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024aa:	6822      	ldr	r2, [r4, #0]
 80024ac:	6993      	ldr	r3, [r2, #24]
 80024ae:	4033      	ands	r3, r6
 80024b0:	1b9b      	subs	r3, r3, r6
 80024b2:	4259      	negs	r1, r3
 80024b4:	414b      	adcs	r3, r1
 80024b6:	42bb      	cmp	r3, r7
 80024b8:	d001      	beq.n	80024be <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80024ba:	2000      	movs	r0, #0
 80024bc:	e017      	b.n	80024ee <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80024be:	1c6b      	adds	r3, r5, #1
 80024c0:	d0f4      	beq.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c2:	f7ff fddf 	bl	8002084 <HAL_GetTick>
 80024c6:	9b06      	ldr	r3, [sp, #24]
 80024c8:	1ac0      	subs	r0, r0, r3
 80024ca:	42a8      	cmp	r0, r5
 80024cc:	d801      	bhi.n	80024d2 <I2C_WaitOnFlagUntilTimeout+0x32>
 80024ce:	2d00      	cmp	r5, #0
 80024d0:	d1eb      	bne.n	80024aa <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d2:	2220      	movs	r2, #32
 80024d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80024d6:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d8:	4313      	orrs	r3, r2
 80024da:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	0023      	movs	r3, r4
 80024de:	3341      	adds	r3, #65	; 0x41
 80024e0:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e2:	0022      	movs	r2, r4
 80024e4:	2300      	movs	r3, #0
 80024e6:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80024e8:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ea:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80024ec:	7023      	strb	r3, [r4, #0]
}
 80024ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80024f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f2:	0004      	movs	r4, r0
 80024f4:	000d      	movs	r5, r1
 80024f6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024f8:	2720      	movs	r7, #32
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	423b      	tst	r3, r7
 8002500:	d001      	beq.n	8002506 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002502:	2000      	movs	r0, #0
}
 8002504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002506:	0032      	movs	r2, r6
 8002508:	0029      	movs	r1, r5
 800250a:	0020      	movs	r0, r4
 800250c:	f7ff ff1c 	bl	8002348 <I2C_IsErrorOccurred>
 8002510:	2800      	cmp	r0, #0
 8002512:	d113      	bne.n	800253c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002514:	f7ff fdb6 	bl	8002084 <HAL_GetTick>
 8002518:	1b80      	subs	r0, r0, r6
 800251a:	42a8      	cmp	r0, r5
 800251c:	d801      	bhi.n	8002522 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800251e:	2d00      	cmp	r5, #0
 8002520:	d1eb      	bne.n	80024fa <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002522:	2220      	movs	r2, #32
 8002524:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002526:	4313      	orrs	r3, r2
 8002528:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800252a:	0023      	movs	r3, r4
 800252c:	3341      	adds	r3, #65	; 0x41
 800252e:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	0022      	movs	r2, r4
 8002532:	2300      	movs	r3, #0
 8002534:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8002536:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002538:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800253a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800253c:	2001      	movs	r0, #1
 800253e:	e7e1      	b.n	8002504 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08002540 <HAL_I2C_Init>:
{
 8002540:	b570      	push	{r4, r5, r6, lr}
 8002542:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002544:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002546:	2c00      	cmp	r4, #0
 8002548:	d03f      	beq.n	80025ca <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254a:	0025      	movs	r5, r4
 800254c:	3541      	adds	r5, #65	; 0x41
 800254e:	782b      	ldrb	r3, [r5, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d105      	bne.n	8002562 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8002556:	0023      	movs	r3, r4
 8002558:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800255a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800255c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800255e:	f7ff fc4b 	bl	8001df8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002562:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002564:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002566:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002568:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800256a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800256c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800256e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002570:	438a      	bics	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002574:	491a      	ldr	r1, [pc, #104]	; (80025e0 <HAL_I2C_Init+0xa0>)
 8002576:	6862      	ldr	r2, [r4, #4]
 8002578:	400a      	ands	r2, r1
 800257a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	4919      	ldr	r1, [pc, #100]	; (80025e4 <HAL_I2C_Init+0xa4>)
 8002580:	400a      	ands	r2, r1
 8002582:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002584:	2801      	cmp	r0, #1
 8002586:	d121      	bne.n	80025cc <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	0212      	lsls	r2, r2, #8
 800258c:	4332      	orrs	r2, r6
 800258e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002590:	6858      	ldr	r0, [r3, #4]
 8002592:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <HAL_I2C_Init+0xa8>)
 8002594:	4302      	orrs	r2, r0
 8002596:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002598:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800259c:	400a      	ands	r2, r1
 800259e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025a0:	6961      	ldr	r1, [r4, #20]
 80025a2:	6922      	ldr	r2, [r4, #16]
 80025a4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025a6:	69a1      	ldr	r1, [r4, #24]
 80025a8:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025aa:	430a      	orrs	r2, r1
 80025ac:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025ae:	6a21      	ldr	r1, [r4, #32]
 80025b0:	69e2      	ldr	r2, [r4, #28]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80025b6:	2201      	movs	r2, #1
 80025b8:	6819      	ldr	r1, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80025be:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80025c4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c6:	3442      	adds	r4, #66	; 0x42
 80025c8:	7020      	strb	r0, [r4, #0]
}
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025cc:	2284      	movs	r2, #132	; 0x84
 80025ce:	0212      	lsls	r2, r2, #8
 80025d0:	4332      	orrs	r2, r6
 80025d2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025d4:	2802      	cmp	r0, #2
 80025d6:	d1db      	bne.n	8002590 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	e7d7      	b.n	8002590 <HAL_I2C_Init+0x50>
 80025e0:	f0ffffff 	.word	0xf0ffffff
 80025e4:	ffff7fff 	.word	0xffff7fff
 80025e8:	02008000 	.word	0x02008000

080025ec <HAL_I2C_Mem_Write>:
{
 80025ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	9304      	str	r3, [sp, #16]
 80025f2:	ab0e      	add	r3, sp, #56	; 0x38
 80025f4:	9203      	str	r2, [sp, #12]
 80025f6:	cb04      	ldmia	r3!, {r2}
 80025f8:	0004      	movs	r4, r0
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	9205      	str	r2, [sp, #20]
 80025fe:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002600:	0003      	movs	r3, r0
 8002602:	3341      	adds	r3, #65	; 0x41
 8002604:	9307      	str	r3, [sp, #28]
 8002606:	781b      	ldrb	r3, [r3, #0]
{
 8002608:	000f      	movs	r7, r1
    return HAL_BUSY;
 800260a:	2002      	movs	r0, #2
{
 800260c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800260e:	2b20      	cmp	r3, #32
 8002610:	d108      	bne.n	8002624 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 8002612:	2a00      	cmp	r2, #0
 8002614:	d002      	beq.n	800261c <HAL_I2C_Mem_Write+0x30>
 8002616:	9b06      	ldr	r3, [sp, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002622:	2001      	movs	r0, #1
}
 8002624:	b009      	add	sp, #36	; 0x24
 8002626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002628:	0023      	movs	r3, r4
 800262a:	3340      	adds	r3, #64	; 0x40
 800262c:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800262e:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8002630:	2a01      	cmp	r2, #1
 8002632:	d0f7      	beq.n	8002624 <HAL_I2C_Mem_Write+0x38>
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002638:	f7ff fd24 	bl	8002084 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800263c:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800263e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002640:	9000      	str	r0, [sp, #0]
 8002642:	2319      	movs	r3, #25
 8002644:	2201      	movs	r2, #1
 8002646:	0020      	movs	r0, r4
 8002648:	0209      	lsls	r1, r1, #8
 800264a:	f7ff ff29 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 800264e:	2800      	cmp	r0, #0
 8002650:	d1e7      	bne.n	8002622 <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002652:	2321      	movs	r3, #33	; 0x21
 8002654:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002656:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002658:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800265a:	0023      	movs	r3, r4
 800265c:	3342      	adds	r3, #66	; 0x42
 800265e:	9307      	str	r3, [sp, #28]
 8002660:	2340      	movs	r3, #64	; 0x40
 8002662:	9a07      	ldr	r2, [sp, #28]
 8002664:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8002666:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002668:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800266a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800266c:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 800266e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002670:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002672:	466b      	mov	r3, sp
 8002674:	7c1a      	ldrb	r2, [r3, #16]
 8002676:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <HAL_I2C_Mem_Write+0x1bc>)
 8002678:	0020      	movs	r0, r4
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	045b      	lsls	r3, r3, #17
 8002680:	f7ff fe4c 	bl	800231c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002684:	002a      	movs	r2, r5
 8002686:	0031      	movs	r1, r6
 8002688:	0020      	movs	r0, r4
 800268a:	f7ff fedf 	bl	800244c <I2C_WaitOnTXISFlagUntilTimeout>
 800268e:	2800      	cmp	r0, #0
 8002690:	d129      	bne.n	80026e6 <HAL_I2C_Mem_Write+0xfa>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002692:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002694:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002696:	2a01      	cmp	r2, #1
 8002698:	d116      	bne.n	80026c8 <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800269a:	466a      	mov	r2, sp
 800269c:	7b12      	ldrb	r2, [r2, #12]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80026a0:	0033      	movs	r3, r6
 80026a2:	2200      	movs	r2, #0
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	0020      	movs	r0, r4
 80026a8:	9500      	str	r5, [sp, #0]
 80026aa:	f7ff fef9 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d119      	bne.n	80026e6 <HAL_I2C_Mem_Write+0xfa>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026b4:	2bff      	cmp	r3, #255	; 0xff
 80026b6:	d81a      	bhi.n	80026ee <HAL_I2C_Mem_Write+0x102>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026b8:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 80026ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026bc:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 80026be:	b292      	uxth	r2, r2
 80026c0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	9000      	str	r0, [sp, #0]
 80026c6:	e017      	b.n	80026f8 <HAL_I2C_Mem_Write+0x10c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026c8:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ca:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026cc:	0a12      	lsrs	r2, r2, #8
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d0:	0020      	movs	r0, r4
 80026d2:	002a      	movs	r2, r5
 80026d4:	f7ff feba 	bl	800244c <I2C_WaitOnTXISFlagUntilTimeout>
 80026d8:	2800      	cmp	r0, #0
 80026da:	d104      	bne.n	80026e6 <HAL_I2C_Mem_Write+0xfa>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026dc:	466b      	mov	r3, sp
 80026de:	6822      	ldr	r2, [r4, #0]
 80026e0:	7b1b      	ldrb	r3, [r3, #12]
 80026e2:	6293      	str	r3, [r2, #40]	; 0x28
 80026e4:	e7dc      	b.n	80026a0 <HAL_I2C_Mem_Write+0xb4>
      __HAL_UNLOCK(hi2c);
 80026e6:	2300      	movs	r3, #0
 80026e8:	3440      	adds	r4, #64	; 0x40
 80026ea:	7023      	strb	r3, [r4, #0]
 80026ec:	e799      	b.n	8002622 <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ee:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026f0:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026f4:	045b      	lsls	r3, r3, #17
 80026f6:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026f8:	0039      	movs	r1, r7
 80026fa:	0020      	movs	r0, r4
 80026fc:	f7ff fe0e 	bl	800231c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002700:	002a      	movs	r2, r5
 8002702:	0031      	movs	r1, r6
 8002704:	0020      	movs	r0, r4
 8002706:	f7ff fea1 	bl	800244c <I2C_WaitOnTXISFlagUntilTimeout>
 800270a:	2800      	cmp	r0, #0
 800270c:	d000      	beq.n	8002710 <HAL_I2C_Mem_Write+0x124>
 800270e:	e788      	b.n	8002622 <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002712:	6822      	ldr	r2, [r4, #0]
 8002714:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002716:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002718:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800271a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800271c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800271e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002720:	3b01      	subs	r3, #1
 8002722:	b29b      	uxth	r3, r3
 8002724:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002726:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002728:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800272a:	b292      	uxth	r2, r2
 800272c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800272e:	2b00      	cmp	r3, #0
 8002730:	d017      	beq.n	8002762 <HAL_I2C_Mem_Write+0x176>
 8002732:	2a00      	cmp	r2, #0
 8002734:	d115      	bne.n	8002762 <HAL_I2C_Mem_Write+0x176>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002736:	0033      	movs	r3, r6
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	0020      	movs	r0, r4
 800273c:	9500      	str	r5, [sp, #0]
 800273e:	f7ff feaf 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 8002742:	2800      	cmp	r0, #0
 8002744:	d000      	beq.n	8002748 <HAL_I2C_Mem_Write+0x15c>
 8002746:	e76c      	b.n	8002622 <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002748:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800274a:	2bff      	cmp	r3, #255	; 0xff
 800274c:	d923      	bls.n	8002796 <HAL_I2C_Mem_Write+0x1aa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800274e:	23ff      	movs	r3, #255	; 0xff
 8002750:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	22ff      	movs	r2, #255	; 0xff
 8002756:	9000      	str	r0, [sp, #0]
 8002758:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800275a:	0039      	movs	r1, r7
 800275c:	0020      	movs	r0, r4
 800275e:	f7ff fddd 	bl	800231c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002762:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1cb      	bne.n	8002700 <HAL_I2C_Mem_Write+0x114>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002768:	002a      	movs	r2, r5
 800276a:	0031      	movs	r1, r6
 800276c:	0020      	movs	r0, r4
 800276e:	f7ff febf 	bl	80024f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002772:	2800      	cmp	r0, #0
 8002774:	d000      	beq.n	8002778 <HAL_I2C_Mem_Write+0x18c>
 8002776:	e754      	b.n	8002622 <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002778:	2120      	movs	r1, #32
 800277a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800277c:	4d0b      	ldr	r5, [pc, #44]	; (80027ac <HAL_I2C_Mem_Write+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	402a      	ands	r2, r5
 8002784:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002786:	0023      	movs	r3, r4
 8002788:	3341      	adds	r3, #65	; 0x41
 800278a:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800278c:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 800278e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002790:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002792:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002794:	e746      	b.n	8002624 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002796:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002798:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800279a:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800279c:	b292      	uxth	r2, r2
 800279e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	9000      	str	r0, [sp, #0]
 80027a4:	e7d9      	b.n	800275a <HAL_I2C_Mem_Write+0x16e>
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	80002000 	.word	0x80002000
 80027ac:	fe00e800 	.word	0xfe00e800

080027b0 <HAL_I2C_Mem_Read>:
{
 80027b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	9304      	str	r3, [sp, #16]
 80027b6:	ab0e      	add	r3, sp, #56	; 0x38
 80027b8:	9203      	str	r2, [sp, #12]
 80027ba:	cb04      	ldmia	r3!, {r2}
 80027bc:	0004      	movs	r4, r0
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	9205      	str	r2, [sp, #20]
 80027c2:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c4:	0003      	movs	r3, r0
 80027c6:	3341      	adds	r3, #65	; 0x41
 80027c8:	9307      	str	r3, [sp, #28]
 80027ca:	781b      	ldrb	r3, [r3, #0]
{
 80027cc:	000f      	movs	r7, r1
    return HAL_BUSY;
 80027ce:	2002      	movs	r0, #2
{
 80027d0:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d108      	bne.n	80027e8 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_I2C_Mem_Read+0x30>
 80027da:	9b06      	ldr	r3, [sp, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80027e6:	2001      	movs	r0, #1
}
 80027e8:	b009      	add	sp, #36	; 0x24
 80027ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80027ec:	0023      	movs	r3, r4
 80027ee:	3340      	adds	r3, #64	; 0x40
 80027f0:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80027f2:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 80027f4:	2a01      	cmp	r2, #1
 80027f6:	d0f7      	beq.n	80027e8 <HAL_I2C_Mem_Read+0x38>
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80027fc:	f7ff fc42 	bl	8002084 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	2319      	movs	r3, #25
 8002804:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002806:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002808:	2201      	movs	r2, #1
 800280a:	0020      	movs	r0, r4
 800280c:	0209      	lsls	r1, r1, #8
 800280e:	f7ff fe47 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 8002812:	1e03      	subs	r3, r0, #0
 8002814:	d1e7      	bne.n	80027e6 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002816:	2222      	movs	r2, #34	; 0x22
 8002818:	9907      	ldr	r1, [sp, #28]
 800281a:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800281c:	0022      	movs	r2, r4
 800281e:	3242      	adds	r2, #66	; 0x42
 8002820:	9207      	str	r2, [sp, #28]
 8002822:	2240      	movs	r2, #64	; 0x40
 8002824:	9907      	ldr	r1, [sp, #28]
 8002826:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8002828:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800282c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800282e:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002830:	494f      	ldr	r1, [pc, #316]	; (8002970 <HAL_I2C_Mem_Read+0x1c0>)
    hi2c->XferCount = Size;
 8002832:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002834:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8002836:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002838:	7c12      	ldrb	r2, [r2, #16]
 800283a:	0020      	movs	r0, r4
 800283c:	9100      	str	r1, [sp, #0]
 800283e:	0039      	movs	r1, r7
 8002840:	f7ff fd6c 	bl	800231c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002844:	002a      	movs	r2, r5
 8002846:	0031      	movs	r1, r6
 8002848:	0020      	movs	r0, r4
 800284a:	f7ff fdff 	bl	800244c <I2C_WaitOnTXISFlagUntilTimeout>
 800284e:	2800      	cmp	r0, #0
 8002850:	d12a      	bne.n	80028a8 <HAL_I2C_Mem_Read+0xf8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002852:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002854:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002856:	2a01      	cmp	r2, #1
 8002858:	d117      	bne.n	800288a <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800285a:	466a      	mov	r2, sp
 800285c:	7b12      	ldrb	r2, [r2, #12]
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002860:	0033      	movs	r3, r6
 8002862:	2200      	movs	r2, #0
 8002864:	2140      	movs	r1, #64	; 0x40
 8002866:	0020      	movs	r0, r4
 8002868:	9500      	str	r5, [sp, #0]
 800286a:	f7ff fe19 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 800286e:	2800      	cmp	r0, #0
 8002870:	d11a      	bne.n	80028a8 <HAL_I2C_Mem_Read+0xf8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002872:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002874:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <HAL_I2C_Mem_Read+0x1c4>)
 8002876:	2aff      	cmp	r2, #255	; 0xff
 8002878:	d81a      	bhi.n	80028b0 <HAL_I2C_Mem_Read+0x100>
      hi2c->XferSize = hi2c->XferCount;
 800287a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800287c:	b292      	uxth	r2, r2
 800287e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	049b      	lsls	r3, r3, #18
 8002888:	e017      	b.n	80028ba <HAL_I2C_Mem_Read+0x10a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800288a:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288c:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800288e:	0a12      	lsrs	r2, r2, #8
 8002890:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002892:	0020      	movs	r0, r4
 8002894:	002a      	movs	r2, r5
 8002896:	f7ff fdd9 	bl	800244c <I2C_WaitOnTXISFlagUntilTimeout>
 800289a:	2800      	cmp	r0, #0
 800289c:	d104      	bne.n	80028a8 <HAL_I2C_Mem_Read+0xf8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800289e:	466b      	mov	r3, sp
 80028a0:	6822      	ldr	r2, [r4, #0]
 80028a2:	7b1b      	ldrb	r3, [r3, #12]
 80028a4:	6293      	str	r3, [r2, #40]	; 0x28
 80028a6:	e7db      	b.n	8002860 <HAL_I2C_Mem_Read+0xb0>
      __HAL_UNLOCK(hi2c);
 80028a8:	2300      	movs	r3, #0
 80028aa:	3440      	adds	r4, #64	; 0x40
 80028ac:	7023      	strb	r3, [r4, #0]
 80028ae:	e79a      	b.n	80027e6 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b0:	22ff      	movs	r2, #255	; 0xff
 80028b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ba:	0039      	movs	r1, r7
 80028bc:	0020      	movs	r0, r4
 80028be:	f7ff fd2d 	bl	800231c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028c2:	0033      	movs	r3, r6
 80028c4:	2200      	movs	r2, #0
 80028c6:	2104      	movs	r1, #4
 80028c8:	0020      	movs	r0, r4
 80028ca:	9500      	str	r5, [sp, #0]
 80028cc:	f7ff fde8 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d000      	beq.n	80028d6 <HAL_I2C_Mem_Read+0x126>
 80028d4:	e787      	b.n	80027e6 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028dc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80028de:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80028e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80028e2:	3301      	adds	r3, #1
 80028e4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80028e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80028e8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80028f2:	b292      	uxth	r2, r2
 80028f4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d017      	beq.n	800292a <HAL_I2C_Mem_Read+0x17a>
 80028fa:	2a00      	cmp	r2, #0
 80028fc:	d115      	bne.n	800292a <HAL_I2C_Mem_Read+0x17a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028fe:	0033      	movs	r3, r6
 8002900:	2180      	movs	r1, #128	; 0x80
 8002902:	0020      	movs	r0, r4
 8002904:	9500      	str	r5, [sp, #0]
 8002906:	f7ff fdcb 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 800290a:	2800      	cmp	r0, #0
 800290c:	d000      	beq.n	8002910 <HAL_I2C_Mem_Read+0x160>
 800290e:	e76a      	b.n	80027e6 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002910:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002912:	2bff      	cmp	r3, #255	; 0xff
 8002914:	d923      	bls.n	800295e <HAL_I2C_Mem_Read+0x1ae>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002916:	23ff      	movs	r3, #255	; 0xff
 8002918:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	22ff      	movs	r2, #255	; 0xff
 800291e:	9000      	str	r0, [sp, #0]
 8002920:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002922:	0039      	movs	r1, r7
 8002924:	0020      	movs	r0, r4
 8002926:	f7ff fcf9 	bl	800231c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800292a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1c8      	bne.n	80028c2 <HAL_I2C_Mem_Read+0x112>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002930:	002a      	movs	r2, r5
 8002932:	0031      	movs	r1, r6
 8002934:	0020      	movs	r0, r4
 8002936:	f7ff fddb 	bl	80024f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800293a:	2800      	cmp	r0, #0
 800293c:	d000      	beq.n	8002940 <HAL_I2C_Mem_Read+0x190>
 800293e:	e752      	b.n	80027e6 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002940:	2120      	movs	r1, #32
 8002942:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002944:	4d0c      	ldr	r5, [pc, #48]	; (8002978 <HAL_I2C_Mem_Read+0x1c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002946:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	402a      	ands	r2, r5
 800294c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800294e:	0023      	movs	r3, r4
 8002950:	3341      	adds	r3, #65	; 0x41
 8002952:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002954:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8002956:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002958:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800295a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800295c:	e744      	b.n	80027e8 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800295e:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002960:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002962:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002964:	b292      	uxth	r2, r2
 8002966:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	9000      	str	r0, [sp, #0]
 800296c:	e7d9      	b.n	8002922 <HAL_I2C_Mem_Read+0x172>
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	80002000 	.word	0x80002000
 8002974:	80002400 	.word	0x80002400
 8002978:	fe00e800 	.word	0xfe00e800

0800297c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800297c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297e:	0004      	movs	r4, r0
 8002980:	3441      	adds	r4, #65	; 0x41
 8002982:	7822      	ldrb	r2, [r4, #0]
{
 8002984:	0003      	movs	r3, r0
 8002986:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002988:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800298a:	b2d6      	uxtb	r6, r2
 800298c:	2a20      	cmp	r2, #32
 800298e:	d118      	bne.n	80029c2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8002990:	001d      	movs	r5, r3
 8002992:	3540      	adds	r5, #64	; 0x40
 8002994:	782a      	ldrb	r2, [r5, #0]
 8002996:	2a01      	cmp	r2, #1
 8002998:	d013      	beq.n	80029c2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800299a:	2224      	movs	r2, #36	; 0x24
 800299c:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3a23      	subs	r2, #35	; 0x23
 80029a2:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029a4:	4807      	ldr	r0, [pc, #28]	; (80029c4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80029a6:	4391      	bics	r1, r2
 80029a8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 80029ae:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029b0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	4339      	orrs	r1, r7
 80029b6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80029be:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80029c0:	7028      	strb	r0, [r5, #0]
  }
}
 80029c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c4:	ffffefff 	.word	0xffffefff

080029c8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c8:	0002      	movs	r2, r0
{
 80029ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029cc:	3241      	adds	r2, #65	; 0x41
 80029ce:	7814      	ldrb	r4, [r2, #0]
{
 80029d0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d2:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d6:	2c20      	cmp	r4, #32
 80029d8:	d117      	bne.n	8002a0a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80029da:	001c      	movs	r4, r3
 80029dc:	3440      	adds	r4, #64	; 0x40
 80029de:	7826      	ldrb	r6, [r4, #0]
 80029e0:	2e01      	cmp	r6, #1
 80029e2:	d012      	beq.n	8002a0a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e4:	3022      	adds	r0, #34	; 0x22
 80029e6:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3823      	subs	r0, #35	; 0x23
 80029ec:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80029ee:	4f07      	ldr	r7, [pc, #28]	; (8002a0c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80029f0:	4386      	bics	r6, r0
 80029f2:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80029f4:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80029f6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80029f8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80029fa:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80029fc:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80029fe:	6819      	ldr	r1, [r3, #0]
 8002a00:	4308      	orrs	r0, r1
 8002a02:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002a04:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002a08:	7020      	strb	r0, [r4, #0]
  }
}
 8002a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a0c:	fffff0ff 	.word	0xfffff0ff

08002a10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a10:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a12:	4c11      	ldr	r4, [pc, #68]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8002a14:	4911      	ldr	r1, [pc, #68]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8002a16:	6823      	ldr	r3, [r4, #0]
{
 8002a18:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a1a:	400b      	ands	r3, r1
 8002a1c:	4303      	orrs	r3, r0
 8002a1e:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a20:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002a22:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d10e      	bne.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8002a2c:	490d      	ldr	r1, [pc, #52]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	2306      	movs	r3, #6
 8002a32:	4358      	muls	r0, r3
 8002a34:	f7fd fb6e 	bl	8000114 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a38:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002a3a:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a3c:	00d2      	lsls	r2, r2, #3
 8002a3e:	6961      	ldr	r1, [r4, #20]
 8002a40:	0008      	movs	r0, r1
 8002a42:	4010      	ands	r0, r2
 8002a44:	4211      	tst	r1, r2
 8002a46:	d100      	bne.n	8002a4a <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8002a48:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	e7f5      	b.n	8002a3e <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8002a52:	2003      	movs	r0, #3
 8002a54:	e7f8      	b.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x38>
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	fffff9ff 	.word	0xfffff9ff
 8002a60:	20000014 	.word	0x20000014
 8002a64:	000f4240 	.word	0x000f4240

08002a68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6a:	0004      	movs	r4, r0
 8002a6c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d023      	beq.n	8002aba <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a72:	6803      	ldr	r3, [r0, #0]
 8002a74:	07db      	lsls	r3, r3, #31
 8002a76:	d410      	bmi.n	8002a9a <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	079b      	lsls	r3, r3, #30
 8002a7c:	d45e      	bmi.n	8002b3c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	071b      	lsls	r3, r3, #28
 8002a82:	d500      	bpl.n	8002a86 <HAL_RCC_OscConfig+0x1e>
 8002a84:	e0c2      	b.n	8002c0c <HAL_RCC_OscConfig+0x1a4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	075b      	lsls	r3, r3, #29
 8002a8a:	d500      	bpl.n	8002a8e <HAL_RCC_OscConfig+0x26>
 8002a8c:	e0f3      	b.n	8002c76 <HAL_RCC_OscConfig+0x20e>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a8e:	69e3      	ldr	r3, [r4, #28]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d000      	beq.n	8002a96 <HAL_RCC_OscConfig+0x2e>
 8002a94:	e17a      	b.n	8002d8c <HAL_RCC_OscConfig+0x324>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002a96:	2000      	movs	r0, #0
 8002a98:	e029      	b.n	8002aee <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9a:	2238      	movs	r2, #56	; 0x38
 8002a9c:	4daf      	ldr	r5, [pc, #700]	; (8002d5c <HAL_RCC_OscConfig+0x2f4>)
 8002a9e:	68ab      	ldr	r3, [r5, #8]
 8002aa0:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa2:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d10a      	bne.n	8002abe <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa8:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002aaa:	079b      	lsls	r3, r3, #30
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aae:	682b      	ldr	r3, [r5, #0]
 8002ab0:	039b      	lsls	r3, r3, #14
 8002ab2:	d5e1      	bpl.n	8002a78 <HAL_RCC_OscConfig+0x10>
 8002ab4:	6863      	ldr	r3, [r4, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1de      	bne.n	8002a78 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8002aba:	2001      	movs	r0, #1
 8002abc:	e017      	b.n	8002aee <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d0f5      	beq.n	8002aae <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	6863      	ldr	r3, [r4, #4]
 8002ac6:	0252      	lsls	r2, r2, #9
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d112      	bne.n	8002af2 <HAL_RCC_OscConfig+0x8a>
 8002acc:	682a      	ldr	r2, [r5, #0]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ad2:	f7ff fad7 	bl	8002084 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ad6:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002ad8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ada:	02bf      	lsls	r7, r7, #10
 8002adc:	682b      	ldr	r3, [r5, #0]
 8002ade:	423b      	tst	r3, r7
 8002ae0:	d1ca      	bne.n	8002a78 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae2:	f7ff facf 	bl	8002084 <HAL_GetTick>
 8002ae6:	1b80      	subs	r0, r0, r6
 8002ae8:	2864      	cmp	r0, #100	; 0x64
 8002aea:	d9f7      	bls.n	8002adc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002aec:	2003      	movs	r0, #3
}
 8002aee:	b005      	add	sp, #20
 8002af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af2:	21a0      	movs	r1, #160	; 0xa0
 8002af4:	02c9      	lsls	r1, r1, #11
 8002af6:	428b      	cmp	r3, r1
 8002af8:	d108      	bne.n	8002b0c <HAL_RCC_OscConfig+0xa4>
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	6829      	ldr	r1, [r5, #0]
 8002afe:	02db      	lsls	r3, r3, #11
 8002b00:	430b      	orrs	r3, r1
 8002b02:	602b      	str	r3, [r5, #0]
 8002b04:	682b      	ldr	r3, [r5, #0]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b0a:	e7e2      	b.n	8002ad2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0c:	682a      	ldr	r2, [r5, #0]
 8002b0e:	4994      	ldr	r1, [pc, #592]	; (8002d60 <HAL_RCC_OscConfig+0x2f8>)
 8002b10:	400a      	ands	r2, r1
 8002b12:	602a      	str	r2, [r5, #0]
 8002b14:	682a      	ldr	r2, [r5, #0]
 8002b16:	4993      	ldr	r1, [pc, #588]	; (8002d64 <HAL_RCC_OscConfig+0x2fc>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1d8      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 8002b20:	f7ff fab0 	bl	8002084 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b24:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002b26:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b28:	02bf      	lsls	r7, r7, #10
 8002b2a:	682b      	ldr	r3, [r5, #0]
 8002b2c:	423b      	tst	r3, r7
 8002b2e:	d0a3      	beq.n	8002a78 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7ff faa8 	bl	8002084 <HAL_GetTick>
 8002b34:	1b80      	subs	r0, r0, r6
 8002b36:	2864      	cmp	r0, #100	; 0x64
 8002b38:	d9f7      	bls.n	8002b2a <HAL_RCC_OscConfig+0xc2>
 8002b3a:	e7d7      	b.n	8002aec <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b3c:	2238      	movs	r2, #56	; 0x38
 8002b3e:	4d87      	ldr	r5, [pc, #540]	; (8002d5c <HAL_RCC_OscConfig+0x2f4>)
 8002b40:	68ab      	ldr	r3, [r5, #8]
 8002b42:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b44:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d127      	bne.n	8002b9a <HAL_RCC_OscConfig+0x132>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b4e:	2a02      	cmp	r2, #2
 8002b50:	d125      	bne.n	8002b9e <HAL_RCC_OscConfig+0x136>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b52:	682a      	ldr	r2, [r5, #0]
 8002b54:	0552      	lsls	r2, r2, #21
 8002b56:	d502      	bpl.n	8002b5e <HAL_RCC_OscConfig+0xf6>
 8002b58:	68e2      	ldr	r2, [r4, #12]
 8002b5a:	2a00      	cmp	r2, #0
 8002b5c:	d0ad      	beq.n	8002aba <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	6869      	ldr	r1, [r5, #4]
 8002b60:	6962      	ldr	r2, [r4, #20]
 8002b62:	4881      	ldr	r0, [pc, #516]	; (8002d68 <HAL_RCC_OscConfig+0x300>)
 8002b64:	0212      	lsls	r2, r2, #8
 8002b66:	4001      	ands	r1, r0
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x122>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	4a7e      	ldr	r2, [pc, #504]	; (8002d6c <HAL_RCC_OscConfig+0x304>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b74:	497e      	ldr	r1, [pc, #504]	; (8002d70 <HAL_RCC_OscConfig+0x308>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b76:	4013      	ands	r3, r2
 8002b78:	6922      	ldr	r2, [r4, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b7e:	682b      	ldr	r3, [r5, #0]
 8002b80:	4a7c      	ldr	r2, [pc, #496]	; (8002d74 <HAL_RCC_OscConfig+0x30c>)
 8002b82:	049b      	lsls	r3, r3, #18
 8002b84:	0f5b      	lsrs	r3, r3, #29
 8002b86:	40da      	lsrs	r2, r3
 8002b88:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b8a:	4b7b      	ldr	r3, [pc, #492]	; (8002d78 <HAL_RCC_OscConfig+0x310>)
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	f7ff fa31 	bl	8001ff4 <HAL_InitTick>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	d100      	bne.n	8002b98 <HAL_RCC_OscConfig+0x130>
 8002b96:	e772      	b.n	8002a7e <HAL_RCC_OscConfig+0x16>
 8002b98:	e78f      	b.n	8002aba <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0d9      	beq.n	8002b52 <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9e:	68e3      	ldr	r3, [r4, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ba4:	682b      	ldr	r3, [r5, #0]
 8002ba6:	4a71      	ldr	r2, [pc, #452]	; (8002d6c <HAL_RCC_OscConfig+0x304>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002baa:	4013      	ands	r3, r2
 8002bac:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bae:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	682a      	ldr	r2, [r5, #0]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002bbe:	f7ff fa61 	bl	8002084 <HAL_GetTick>
 8002bc2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc4:	682b      	ldr	r3, [r5, #0]
 8002bc6:	423b      	tst	r3, r7
 8002bc8:	d007      	beq.n	8002bda <HAL_RCC_OscConfig+0x172>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bca:	686a      	ldr	r2, [r5, #4]
 8002bcc:	6963      	ldr	r3, [r4, #20]
 8002bce:	4966      	ldr	r1, [pc, #408]	; (8002d68 <HAL_RCC_OscConfig+0x300>)
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	606b      	str	r3, [r5, #4]
 8002bd8:	e751      	b.n	8002a7e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bda:	f7ff fa53 	bl	8002084 <HAL_GetTick>
 8002bde:	1b80      	subs	r0, r0, r6
 8002be0:	2802      	cmp	r0, #2
 8002be2:	d9ef      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x15c>
 8002be4:	e782      	b.n	8002aec <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002be6:	682b      	ldr	r3, [r5, #0]
 8002be8:	4a64      	ldr	r2, [pc, #400]	; (8002d7c <HAL_RCC_OscConfig+0x314>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bea:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8002bec:	4013      	ands	r3, r2
 8002bee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002bf0:	f7ff fa48 	bl	8002084 <HAL_GetTick>
 8002bf4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf6:	00ff      	lsls	r7, r7, #3
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	423b      	tst	r3, r7
 8002bfc:	d100      	bne.n	8002c00 <HAL_RCC_OscConfig+0x198>
 8002bfe:	e73e      	b.n	8002a7e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c00:	f7ff fa40 	bl	8002084 <HAL_GetTick>
 8002c04:	1b80      	subs	r0, r0, r6
 8002c06:	2802      	cmp	r0, #2
 8002c08:	d9f6      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x190>
 8002c0a:	e76f      	b.n	8002aec <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c0c:	2238      	movs	r2, #56	; 0x38
 8002c0e:	4d53      	ldr	r5, [pc, #332]	; (8002d5c <HAL_RCC_OscConfig+0x2f4>)
 8002c10:	68ab      	ldr	r3, [r5, #8]
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b18      	cmp	r3, #24
 8002c16:	d108      	bne.n	8002c2a <HAL_RCC_OscConfig+0x1c2>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c18:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002c1a:	079b      	lsls	r3, r3, #30
 8002c1c:	d400      	bmi.n	8002c20 <HAL_RCC_OscConfig+0x1b8>
 8002c1e:	e732      	b.n	8002a86 <HAL_RCC_OscConfig+0x1e>
 8002c20:	69a3      	ldr	r3, [r4, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d000      	beq.n	8002c28 <HAL_RCC_OscConfig+0x1c0>
 8002c26:	e72e      	b.n	8002a86 <HAL_RCC_OscConfig+0x1e>
 8002c28:	e747      	b.n	8002aba <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2a:	69a2      	ldr	r2, [r4, #24]
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	2a00      	cmp	r2, #0
 8002c30:	d010      	beq.n	8002c54 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_LSI_ENABLE();
 8002c32:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c34:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8002c36:	4313      	orrs	r3, r2
 8002c38:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002c3a:	f7ff fa23 	bl	8002084 <HAL_GetTick>
 8002c3e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c40:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002c42:	423b      	tst	r3, r7
 8002c44:	d000      	beq.n	8002c48 <HAL_RCC_OscConfig+0x1e0>
 8002c46:	e71e      	b.n	8002a86 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c48:	f7ff fa1c 	bl	8002084 <HAL_GetTick>
 8002c4c:	1b80      	subs	r0, r0, r6
 8002c4e:	2802      	cmp	r0, #2
 8002c50:	d9f6      	bls.n	8002c40 <HAL_RCC_OscConfig+0x1d8>
 8002c52:	e74b      	b.n	8002aec <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 8002c54:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c56:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8002c58:	439a      	bics	r2, r3
 8002c5a:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002c5c:	f7ff fa12 	bl	8002084 <HAL_GetTick>
 8002c60:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c62:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002c64:	423b      	tst	r3, r7
 8002c66:	d100      	bne.n	8002c6a <HAL_RCC_OscConfig+0x202>
 8002c68:	e70d      	b.n	8002a86 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6a:	f7ff fa0b 	bl	8002084 <HAL_GetTick>
 8002c6e:	1b80      	subs	r0, r0, r6
 8002c70:	2802      	cmp	r0, #2
 8002c72:	d9f6      	bls.n	8002c62 <HAL_RCC_OscConfig+0x1fa>
 8002c74:	e73a      	b.n	8002aec <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c76:	2238      	movs	r2, #56	; 0x38
 8002c78:	4d38      	ldr	r5, [pc, #224]	; (8002d5c <HAL_RCC_OscConfig+0x2f4>)
 8002c7a:	68ab      	ldr	r3, [r5, #8]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d108      	bne.n	8002c94 <HAL_RCC_OscConfig+0x22c>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002c82:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002c84:	079b      	lsls	r3, r3, #30
 8002c86:	d400      	bmi.n	8002c8a <HAL_RCC_OscConfig+0x222>
 8002c88:	e701      	b.n	8002a8e <HAL_RCC_OscConfig+0x26>
 8002c8a:	68a3      	ldr	r3, [r4, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d000      	beq.n	8002c92 <HAL_RCC_OscConfig+0x22a>
 8002c90:	e6fd      	b.n	8002a8e <HAL_RCC_OscConfig+0x26>
 8002c92:	e712      	b.n	8002aba <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c94:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002c96:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c98:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002c9a:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8002c9c:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c9e:	4213      	tst	r3, r2
 8002ca0:	d108      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002ca8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002caa:	4013      	ands	r3, r2
 8002cac:	9303      	str	r3, [sp, #12]
 8002cae:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb4:	2780      	movs	r7, #128	; 0x80
 8002cb6:	4e32      	ldr	r6, [pc, #200]	; (8002d80 <HAL_RCC_OscConfig+0x318>)
 8002cb8:	007f      	lsls	r7, r7, #1
 8002cba:	6833      	ldr	r3, [r6, #0]
 8002cbc:	423b      	tst	r3, r7
 8002cbe:	d015      	beq.n	8002cec <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc0:	68a3      	ldr	r3, [r4, #8]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d122      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2a4>
 8002cc6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8002ccc:	f7ff f9da 	bl	8002084 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd0:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002cd2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002cd6:	423b      	tst	r3, r7
 8002cd8:	d038      	beq.n	8002d4c <HAL_RCC_OscConfig+0x2e4>
      if (pwrclkchanged == SET)
 8002cda:	9b00      	ldr	r3, [sp, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d000      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x27a>
 8002ce0:	e6d5      	b.n	8002a8e <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002ce2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002ce4:	4a27      	ldr	r2, [pc, #156]	; (8002d84 <HAL_RCC_OscConfig+0x31c>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002cea:	e6d0      	b.n	8002a8e <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cec:	6833      	ldr	r3, [r6, #0]
 8002cee:	433b      	orrs	r3, r7
 8002cf0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002cf2:	f7ff f9c7 	bl	8002084 <HAL_GetTick>
 8002cf6:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf8:	6833      	ldr	r3, [r6, #0]
 8002cfa:	423b      	tst	r3, r7
 8002cfc:	d1e0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x258>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfe:	f7ff f9c1 	bl	8002084 <HAL_GetTick>
 8002d02:	9b01      	ldr	r3, [sp, #4]
 8002d04:	1ac0      	subs	r0, r0, r3
 8002d06:	2802      	cmp	r0, #2
 8002d08:	d9f6      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x290>
 8002d0a:	e6ef      	b.n	8002aec <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002d0e:	2b05      	cmp	r3, #5
 8002d10:	d105      	bne.n	8002d1e <HAL_RCC_OscConfig+0x2b6>
 8002d12:	3b01      	subs	r3, #1
 8002d14:	4313      	orrs	r3, r2
 8002d16:	65eb      	str	r3, [r5, #92]	; 0x5c
 8002d18:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e7d4      	b.n	8002cc8 <HAL_RCC_OscConfig+0x260>
 8002d1e:	2101      	movs	r1, #1
 8002d20:	438a      	bics	r2, r1
 8002d22:	65ea      	str	r2, [r5, #92]	; 0x5c
 8002d24:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002d26:	3103      	adds	r1, #3
 8002d28:	438a      	bics	r2, r1
 8002d2a:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1cd      	bne.n	8002ccc <HAL_RCC_OscConfig+0x264>
        tickstart = HAL_GetTick();
 8002d30:	f7ff f9a8 	bl	8002084 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d34:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002d36:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d38:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002d3a:	423b      	tst	r3, r7
 8002d3c:	d0cd      	beq.n	8002cda <HAL_RCC_OscConfig+0x272>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7ff f9a1 	bl	8002084 <HAL_GetTick>
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_RCC_OscConfig+0x320>)
 8002d44:	1b80      	subs	r0, r0, r6
 8002d46:	4298      	cmp	r0, r3
 8002d48:	d9f6      	bls.n	8002d38 <HAL_RCC_OscConfig+0x2d0>
 8002d4a:	e6cf      	b.n	8002aec <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4c:	f7ff f99a 	bl	8002084 <HAL_GetTick>
 8002d50:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_RCC_OscConfig+0x320>)
 8002d52:	1b80      	subs	r0, r0, r6
 8002d54:	4298      	cmp	r0, r3
 8002d56:	d9bd      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x26c>
 8002d58:	e6c8      	b.n	8002aec <HAL_RCC_OscConfig+0x84>
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	fffeffff 	.word	0xfffeffff
 8002d64:	fffbffff 	.word	0xfffbffff
 8002d68:	ffff80ff 	.word	0xffff80ff
 8002d6c:	ffffc7ff 	.word	0xffffc7ff
 8002d70:	20000014 	.word	0x20000014
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	2000001c 	.word	0x2000001c
 8002d7c:	fffffeff 	.word	0xfffffeff
 8002d80:	40007000 	.word	0x40007000
 8002d84:	efffffff 	.word	0xefffffff
 8002d88:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d8c:	2138      	movs	r1, #56	; 0x38
 8002d8e:	4d3f      	ldr	r5, [pc, #252]	; (8002e8c <HAL_RCC_OscConfig+0x424>)
 8002d90:	68aa      	ldr	r2, [r5, #8]
 8002d92:	400a      	ands	r2, r1
 8002d94:	2a10      	cmp	r2, #16
 8002d96:	d053      	beq.n	8002e40 <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d98:	4a3d      	ldr	r2, [pc, #244]	; (8002e90 <HAL_RCC_OscConfig+0x428>)
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d138      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_PLL_DISABLE();
 8002d9e:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002da2:	4013      	ands	r3, r2
 8002da4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002da6:	f7ff f96d 	bl	8002084 <HAL_GetTick>
 8002daa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dac:	04bf      	lsls	r7, r7, #18
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	423b      	tst	r3, r7
 8002db2:	d127      	bne.n	8002e04 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002db6:	6a23      	ldr	r3, [r4, #32]
 8002db8:	68ea      	ldr	r2, [r5, #12]
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	4935      	ldr	r1, [pc, #212]	; (8002e94 <HAL_RCC_OscConfig+0x42c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dbe:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002dd0:	0212      	lsls	r2, r2, #8
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	682a      	ldr	r2, [r5, #0]
 8002dda:	045b      	lsls	r3, r3, #17
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	68ea      	ldr	r2, [r5, #12]
 8002de4:	055b      	lsls	r3, r3, #21
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002dea:	f7ff f94b 	bl	8002084 <HAL_GetTick>
 8002dee:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df0:	682b      	ldr	r3, [r5, #0]
 8002df2:	4233      	tst	r3, r6
 8002df4:	d000      	beq.n	8002df8 <HAL_RCC_OscConfig+0x390>
 8002df6:	e64e      	b.n	8002a96 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7ff f944 	bl	8002084 <HAL_GetTick>
 8002dfc:	1b00      	subs	r0, r0, r4
 8002dfe:	2802      	cmp	r0, #2
 8002e00:	d9f6      	bls.n	8002df0 <HAL_RCC_OscConfig+0x388>
 8002e02:	e673      	b.n	8002aec <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7ff f93e 	bl	8002084 <HAL_GetTick>
 8002e08:	1b80      	subs	r0, r0, r6
 8002e0a:	2802      	cmp	r0, #2
 8002e0c:	d9cf      	bls.n	8002dae <HAL_RCC_OscConfig+0x346>
 8002e0e:	e66d      	b.n	8002aec <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_PLL_DISABLE();
 8002e10:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e12:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002e14:	4013      	ands	r3, r2
 8002e16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e18:	f7ff f934 	bl	8002084 <HAL_GetTick>
 8002e1c:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1e:	04b6      	lsls	r6, r6, #18
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	0018      	movs	r0, r3
 8002e24:	4030      	ands	r0, r6
 8002e26:	4233      	tst	r3, r6
 8002e28:	d104      	bne.n	8002e34 <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002e2a:	68eb      	ldr	r3, [r5, #12]
 8002e2c:	4a1a      	ldr	r2, [pc, #104]	; (8002e98 <HAL_RCC_OscConfig+0x430>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	60eb      	str	r3, [r5, #12]
 8002e32:	e65c      	b.n	8002aee <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e34:	f7ff f926 	bl	8002084 <HAL_GetTick>
 8002e38:	1b00      	subs	r0, r0, r4
 8002e3a:	2802      	cmp	r0, #2
 8002e3c:	d9f0      	bls.n	8002e20 <HAL_RCC_OscConfig+0x3b8>
 8002e3e:	e655      	b.n	8002aec <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d100      	bne.n	8002e46 <HAL_RCC_OscConfig+0x3de>
 8002e44:	e639      	b.n	8002aba <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8002e48:	68eb      	ldr	r3, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	6a21      	ldr	r1, [r4, #32]
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	428a      	cmp	r2, r1
 8002e50:	d000      	beq.n	8002e54 <HAL_RCC_OscConfig+0x3ec>
 8002e52:	e632      	b.n	8002aba <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e54:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e58:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	428a      	cmp	r2, r1
 8002e5c:	d000      	beq.n	8002e60 <HAL_RCC_OscConfig+0x3f8>
 8002e5e:	e62c      	b.n	8002aba <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e60:	21fe      	movs	r1, #254	; 0xfe
 8002e62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e64:	01c9      	lsls	r1, r1, #7
 8002e66:	4019      	ands	r1, r3
 8002e68:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e6a:	4291      	cmp	r1, r2
 8002e6c:	d000      	beq.n	8002e70 <HAL_RCC_OscConfig+0x408>
 8002e6e:	e624      	b.n	8002aba <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e70:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e74:	0392      	lsls	r2, r2, #14
 8002e76:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e78:	428a      	cmp	r2, r1
 8002e7a:	d000      	beq.n	8002e7e <HAL_RCC_OscConfig+0x416>
 8002e7c:	e61d      	b.n	8002aba <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e80:	0f5b      	lsrs	r3, r3, #29
 8002e82:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d100      	bne.n	8002e8a <HAL_RCC_OscConfig+0x422>
 8002e88:	e605      	b.n	8002a96 <HAL_RCC_OscConfig+0x2e>
 8002e8a:	e616      	b.n	8002aba <HAL_RCC_OscConfig+0x52>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	feffffff 	.word	0xfeffffff
 8002e94:	1fc1808c 	.word	0x1fc1808c
 8002e98:	effefffc 	.word	0xeffefffc

08002e9c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e9c:	2338      	movs	r3, #56	; 0x38
{
 8002e9e:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ea0:	4c1d      	ldr	r4, [pc, #116]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002ea2:	68a2      	ldr	r2, [r4, #8]
 8002ea4:	421a      	tst	r2, r3
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ea8:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002eaa:	481c      	ldr	r0, [pc, #112]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002eac:	049b      	lsls	r3, r3, #18
 8002eae:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002eb0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eb4:	68a2      	ldr	r2, [r4, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	2a08      	cmp	r2, #8
 8002eba:	d027      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ebc:	68a2      	ldr	r2, [r4, #8]
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	2a10      	cmp	r2, #16
 8002ec2:	d117      	bne.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ec4:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ec6:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ec8:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002eca:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ecc:	0649      	lsls	r1, r1, #25
 8002ece:	0f49      	lsrs	r1, r1, #29
 8002ed0:	326f      	adds	r2, #111	; 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ed2:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed4:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ed6:	4015      	ands	r5, r2
    switch (pllsource)
 8002ed8:	079b      	lsls	r3, r3, #30
 8002eda:	d109      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002edc:	4810      	ldr	r0, [pc, #64]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ede:	f7fd f919 	bl	8000114 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ee2:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ee4:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ee6:	0f49      	lsrs	r1, r1, #29
 8002ee8:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002eea:	f7fd f913 	bl	8000114 <__udivsi3>
 8002eee:	e7e0      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ef0:	480a      	ldr	r0, [pc, #40]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x80>)
 8002ef2:	e7f4      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ef4:	68a2      	ldr	r2, [r4, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	2a20      	cmp	r2, #32
 8002efa:	d009      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002efc:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 8002efe:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b18      	cmp	r3, #24
 8002f04:	d1d5      	bne.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8002f06:	20fa      	movs	r0, #250	; 0xfa
 8002f08:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8002f0a:	e7d2      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8002f0c:	4804      	ldr	r0, [pc, #16]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x84>)
 8002f0e:	e7d0      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8002f10:	2080      	movs	r0, #128	; 0x80
 8002f12:	0200      	lsls	r0, r0, #8
 8002f14:	e7cd      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x16>
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	007a1200 	.word	0x007a1200

08002f24 <HAL_RCC_ClockConfig>:
{
 8002f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f26:	0004      	movs	r4, r0
 8002f28:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002f2e:	2001      	movs	r0, #1
}
 8002f30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f32:	2707      	movs	r7, #7
 8002f34:	4e4a      	ldr	r6, [pc, #296]	; (8003060 <HAL_RCC_ClockConfig+0x13c>)
 8002f36:	6833      	ldr	r3, [r6, #0]
 8002f38:	403b      	ands	r3, r7
 8002f3a:	428b      	cmp	r3, r1
 8002f3c:	d32a      	bcc.n	8002f94 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3e:	6822      	ldr	r2, [r4, #0]
 8002f40:	0793      	lsls	r3, r2, #30
 8002f42:	d43b      	bmi.n	8002fbc <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f44:	07d2      	lsls	r2, r2, #31
 8002f46:	d448      	bmi.n	8002fda <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f48:	2707      	movs	r7, #7
 8002f4a:	6833      	ldr	r3, [r6, #0]
 8002f4c:	403b      	ands	r3, r7
 8002f4e:	42ab      	cmp	r3, r5
 8002f50:	d90a      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	6833      	ldr	r3, [r6, #0]
 8002f54:	43bb      	bics	r3, r7
 8002f56:	432b      	orrs	r3, r5
 8002f58:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002f5a:	f7ff f893 	bl	8002084 <HAL_GetTick>
 8002f5e:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f60:	6833      	ldr	r3, [r6, #0]
 8002f62:	403b      	ands	r3, r7
 8002f64:	42ab      	cmp	r3, r5
 8002f66:	d16b      	bne.n	8003040 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	4d3e      	ldr	r5, [pc, #248]	; (8003064 <HAL_RCC_ClockConfig+0x140>)
 8002f6c:	075b      	lsls	r3, r3, #29
 8002f6e:	d46f      	bmi.n	8003050 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002f70:	f7ff ff94 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002f74:	68ab      	ldr	r3, [r5, #8]
 8002f76:	493c      	ldr	r1, [pc, #240]	; (8003068 <HAL_RCC_ClockConfig+0x144>)
 8002f78:	051b      	lsls	r3, r3, #20
 8002f7a:	0f1b      	lsrs	r3, r3, #28
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	585b      	ldr	r3, [r3, r1]
 8002f80:	211f      	movs	r1, #31
 8002f82:	400b      	ands	r3, r1
 8002f84:	40d8      	lsrs	r0, r3
 8002f86:	4a39      	ldr	r2, [pc, #228]	; (800306c <HAL_RCC_ClockConfig+0x148>)
  return HAL_InitTick(uwTickPrio);
 8002f88:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002f8a:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	f7ff f831 	bl	8001ff4 <HAL_InitTick>
 8002f92:	e7cd      	b.n	8002f30 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f94:	6833      	ldr	r3, [r6, #0]
 8002f96:	43bb      	bics	r3, r7
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002f9c:	f7ff f872 	bl	8002084 <HAL_GetTick>
 8002fa0:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fa2:	6833      	ldr	r3, [r6, #0]
 8002fa4:	403b      	ands	r3, r7
 8002fa6:	42ab      	cmp	r3, r5
 8002fa8:	d0c9      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002faa:	f7ff f86b 	bl	8002084 <HAL_GetTick>
 8002fae:	9b01      	ldr	r3, [sp, #4]
 8002fb0:	1ac0      	subs	r0, r0, r3
 8002fb2:	4b30      	ldr	r3, [pc, #192]	; (8003074 <HAL_RCC_ClockConfig+0x150>)
 8002fb4:	4298      	cmp	r0, r3
 8002fb6:	d9f4      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8002fb8:	2003      	movs	r0, #3
 8002fba:	e7b9      	b.n	8002f30 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	4929      	ldr	r1, [pc, #164]	; (8003064 <HAL_RCC_ClockConfig+0x140>)
 8002fbe:	0753      	lsls	r3, r2, #29
 8002fc0:	d504      	bpl.n	8002fcc <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fc2:	23e0      	movs	r3, #224	; 0xe0
 8002fc4:	6888      	ldr	r0, [r1, #8]
 8002fc6:	01db      	lsls	r3, r3, #7
 8002fc8:	4303      	orrs	r3, r0
 8002fca:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fcc:	688b      	ldr	r3, [r1, #8]
 8002fce:	482a      	ldr	r0, [pc, #168]	; (8003078 <HAL_RCC_ClockConfig+0x154>)
 8002fd0:	4003      	ands	r3, r0
 8002fd2:	68a0      	ldr	r0, [r4, #8]
 8002fd4:	4303      	orrs	r3, r0
 8002fd6:	608b      	str	r3, [r1, #8]
 8002fd8:	e7b4      	b.n	8002f44 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fda:	6862      	ldr	r2, [r4, #4]
 8002fdc:	4f21      	ldr	r7, [pc, #132]	; (8003064 <HAL_RCC_ClockConfig+0x140>)
 8002fde:	2a01      	cmp	r2, #1
 8002fe0:	d119      	bne.n	8003016 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	039b      	lsls	r3, r3, #14
 8002fe6:	d5a2      	bpl.n	8002f2e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fe8:	2107      	movs	r1, #7
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	438b      	bics	r3, r1
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002ff2:	f7ff f847 	bl	8002084 <HAL_GetTick>
 8002ff6:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff8:	2338      	movs	r3, #56	; 0x38
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	6863      	ldr	r3, [r4, #4]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	429a      	cmp	r2, r3
 8003004:	d0a0      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003006:	f7ff f83d 	bl	8002084 <HAL_GetTick>
 800300a:	9b01      	ldr	r3, [sp, #4]
 800300c:	1ac0      	subs	r0, r0, r3
 800300e:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_RCC_ClockConfig+0x150>)
 8003010:	4298      	cmp	r0, r3
 8003012:	d9f1      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0xd4>
 8003014:	e7d0      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003016:	2a02      	cmp	r2, #2
 8003018:	d103      	bne.n	8003022 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	019b      	lsls	r3, r3, #6
 800301e:	d4e3      	bmi.n	8002fe8 <HAL_RCC_ClockConfig+0xc4>
 8003020:	e785      	b.n	8002f2e <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003022:	2a00      	cmp	r2, #0
 8003024:	d103      	bne.n	800302e <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	055b      	lsls	r3, r3, #21
 800302a:	d4dd      	bmi.n	8002fe8 <HAL_RCC_ClockConfig+0xc4>
 800302c:	e77f      	b.n	8002f2e <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800302e:	2302      	movs	r3, #2
 8003030:	2a03      	cmp	r2, #3
 8003032:	d103      	bne.n	800303c <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003034:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003036:	4219      	tst	r1, r3
 8003038:	d1d6      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0xc4>
 800303a:	e778      	b.n	8002f2e <HAL_RCC_ClockConfig+0xa>
 800303c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800303e:	e7fa      	b.n	8003036 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003040:	f7ff f820 	bl	8002084 <HAL_GetTick>
 8003044:	9b01      	ldr	r3, [sp, #4]
 8003046:	1ac0      	subs	r0, r0, r3
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x150>)
 800304a:	4298      	cmp	r0, r3
 800304c:	d988      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
 800304e:	e7b3      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003050:	68ab      	ldr	r3, [r5, #8]
 8003052:	4a0a      	ldr	r2, [pc, #40]	; (800307c <HAL_RCC_ClockConfig+0x158>)
 8003054:	4013      	ands	r3, r2
 8003056:	68e2      	ldr	r2, [r4, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	60ab      	str	r3, [r5, #8]
 800305c:	e788      	b.n	8002f70 <HAL_RCC_ClockConfig+0x4c>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	40022000 	.word	0x40022000
 8003064:	40021000 	.word	0x40021000
 8003068:	08004bc8 	.word	0x08004bc8
 800306c:	20000014 	.word	0x20000014
 8003070:	2000001c 	.word	0x2000001c
 8003074:	00001388 	.word	0x00001388
 8003078:	fffff0ff 	.word	0xfffff0ff
 800307c:	ffff8fff 	.word	0xffff8fff

08003080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003082:	6803      	ldr	r3, [r0, #0]
{
 8003084:	0005      	movs	r5, r0
 8003086:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003088:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800308a:	039b      	lsls	r3, r3, #14
 800308c:	d53b      	bpl.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x86>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	4c48      	ldr	r4, [pc, #288]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003092:	0552      	lsls	r2, r2, #21
 8003094:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8003096:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003098:	4213      	tst	r3, r2
 800309a:	d108      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800309e:	4313      	orrs	r3, r2
 80030a0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80030a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030a4:	4013      	ands	r3, r2
 80030a6:	9303      	str	r3, [sp, #12]
 80030a8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80030aa:	2301      	movs	r3, #1
 80030ac:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ae:	2780      	movs	r7, #128	; 0x80
 80030b0:	4e41      	ldr	r6, [pc, #260]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80030b2:	007f      	lsls	r7, r7, #1
 80030b4:	6833      	ldr	r3, [r6, #0]
 80030b6:	433b      	orrs	r3, r7
 80030b8:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ba:	f7fe ffe3 	bl	8002084 <HAL_GetTick>
 80030be:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030c0:	6833      	ldr	r3, [r6, #0]
 80030c2:	423b      	tst	r3, r7
 80030c4:	d011      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030c6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80030c8:	23c0      	movs	r3, #192	; 0xc0
 80030ca:	0010      	movs	r0, r2
 80030cc:	009b      	lsls	r3, r3, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ce:	6969      	ldr	r1, [r5, #20]
 80030d0:	4e3a      	ldr	r6, [pc, #232]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030d2:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030d4:	421a      	tst	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80030d8:	4288      	cmp	r0, r1
 80030da:	d14d      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80030de:	696a      	ldr	r2, [r5, #20]
 80030e0:	4033      	ands	r3, r6
 80030e2:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030e4:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80030e8:	e006      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7fe ffcb 	bl	8002084 <HAL_GetTick>
 80030ee:	9b01      	ldr	r3, [sp, #4]
 80030f0:	1ac0      	subs	r0, r0, r3
 80030f2:	2802      	cmp	r0, #2
 80030f4:	d9e4      	bls.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f6:	2003      	movs	r0, #3
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030f8:	9b00      	ldr	r3, [sp, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d103      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003100:	4a2f      	ldr	r2, [pc, #188]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003102:	4013      	ands	r3, r2
 8003104:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003106:	682a      	ldr	r2, [r5, #0]
 8003108:	07d3      	lsls	r3, r2, #31
 800310a:	d506      	bpl.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800310c:	2403      	movs	r4, #3
 800310e:	4929      	ldr	r1, [pc, #164]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003110:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003112:	43a3      	bics	r3, r4
 8003114:	686c      	ldr	r4, [r5, #4]
 8003116:	4323      	orrs	r3, r4
 8003118:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800311a:	0693      	lsls	r3, r2, #26
 800311c:	d506      	bpl.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800311e:	4925      	ldr	r1, [pc, #148]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003120:	4c28      	ldr	r4, [pc, #160]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8003122:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003124:	4023      	ands	r3, r4
 8003126:	68ac      	ldr	r4, [r5, #8]
 8003128:	4323      	orrs	r3, r4
 800312a:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800312c:	0453      	lsls	r3, r2, #17
 800312e:	d50f      	bpl.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003130:	4920      	ldr	r1, [pc, #128]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003132:	692c      	ldr	r4, [r5, #16]
 8003134:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	4323      	orrs	r3, r4
 800313c:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	05db      	lsls	r3, r3, #23
 8003142:	429c      	cmp	r4, r3
 8003144:	d104      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	68cc      	ldr	r4, [r1, #12]
 800314a:	025b      	lsls	r3, r3, #9
 800314c:	4323      	orrs	r3, r4
 800314e:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003150:	0512      	lsls	r2, r2, #20
 8003152:	d50f      	bpl.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003154:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003156:	4c1c      	ldr	r4, [pc, #112]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003158:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800315a:	68e9      	ldr	r1, [r5, #12]
 800315c:	4023      	ands	r3, r4
 800315e:	430b      	orrs	r3, r1
 8003160:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	01db      	lsls	r3, r3, #7
 8003166:	4299      	cmp	r1, r3
 8003168:	d104      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	68d1      	ldr	r1, [r2, #12]
 800316e:	025b      	lsls	r3, r3, #9
 8003170:	430b      	orrs	r3, r1
 8003172:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8003174:	b005      	add	sp, #20
 8003176:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 8003178:	2280      	movs	r2, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800317a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 800317c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800317e:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 8003180:	0252      	lsls	r2, r2, #9
 8003182:	4302      	orrs	r2, r0
 8003184:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003186:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003188:	4810      	ldr	r0, [pc, #64]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800318a:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 800318c:	4002      	ands	r2, r0
 800318e:	65e2      	str	r2, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8003190:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003192:	07db      	lsls	r3, r3, #31
 8003194:	d5a2      	bpl.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
        tickstart = HAL_GetTick();
 8003196:	f7fe ff75 	bl	8002084 <HAL_GetTick>
 800319a:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319c:	2202      	movs	r2, #2
 800319e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80031a0:	4213      	tst	r3, r2
 80031a2:	d19b      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fe ff6e 	bl	8002084 <HAL_GetTick>
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80031aa:	1bc0      	subs	r0, r0, r7
 80031ac:	4298      	cmp	r0, r3
 80031ae:	d9f5      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80031b0:	e7a1      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40007000 	.word	0x40007000
 80031bc:	fffffcff 	.word	0xfffffcff
 80031c0:	efffffff 	.word	0xefffffff
 80031c4:	ffffcfff 	.word	0xffffcfff
 80031c8:	ffff3fff 	.word	0xffff3fff
 80031cc:	fffeffff 	.word	0xfffeffff
 80031d0:	00001388 	.word	0x00001388

080031d4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031d4:	0002      	movs	r2, r0
{
 80031d6:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 80031d8:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80031da:	323d      	adds	r2, #61	; 0x3d
 80031dc:	7811      	ldrb	r1, [r2, #0]
 80031de:	4281      	cmp	r1, r0
 80031e0:	d118      	bne.n	8003214 <HAL_TIM_Base_Start_IT+0x40>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e2:	2102      	movs	r1, #2
 80031e4:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	4302      	orrs	r2, r0
 80031ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ee:	4a0c      	ldr	r2, [pc, #48]	; (8003220 <HAL_TIM_Base_Start_IT+0x4c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d002      	beq.n	80031fa <HAL_TIM_Base_Start_IT+0x26>
 80031f4:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <HAL_TIM_Base_Start_IT+0x50>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10d      	bne.n	8003216 <HAL_TIM_Base_Start_IT+0x42>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	490a      	ldr	r1, [pc, #40]	; (8003228 <HAL_TIM_Base_Start_IT+0x54>)
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80031fe:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003200:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003202:	2a06      	cmp	r2, #6
 8003204:	d006      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x40>
 8003206:	3907      	subs	r1, #7
 8003208:	428a      	cmp	r2, r1
 800320a:	d003      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x40>
      __HAL_TIM_ENABLE(htim);
 800320c:	2201      	movs	r2, #1
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
}
 8003214:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4302      	orrs	r2, r0
 800321a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800321c:	2000      	movs	r0, #0
 800321e:	e7f9      	b.n	8003214 <HAL_TIM_Base_Start_IT+0x40>
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40000400 	.word	0x40000400
 8003228:	00010007 	.word	0x00010007

0800322c <HAL_TIM_OC_DelayElapsedCallback>:
 800322c:	4770      	bx	lr

0800322e <HAL_TIM_IC_CaptureCallback>:
 800322e:	4770      	bx	lr

08003230 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003230:	4770      	bx	lr

08003232 <HAL_TIM_TriggerCallback>:
 8003232:	4770      	bx	lr

08003234 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003234:	2202      	movs	r2, #2
 8003236:	6803      	ldr	r3, [r0, #0]
{
 8003238:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800323a:	6919      	ldr	r1, [r3, #16]
{
 800323c:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800323e:	4211      	tst	r1, r2
 8003240:	d00e      	beq.n	8003260 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003242:	68d9      	ldr	r1, [r3, #12]
 8003244:	4211      	tst	r1, r2
 8003246:	d00b      	beq.n	8003260 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003248:	3a05      	subs	r2, #5
 800324a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800324c:	3204      	adds	r2, #4
 800324e:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	079b      	lsls	r3, r3, #30
 8003254:	d100      	bne.n	8003258 <HAL_TIM_IRQHandler+0x24>
 8003256:	e086      	b.n	8003366 <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003258:	f7ff ffe9 	bl	800322e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325c:	2300      	movs	r3, #0
 800325e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003260:	2204      	movs	r2, #4
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	6919      	ldr	r1, [r3, #16]
 8003266:	4211      	tst	r1, r2
 8003268:	d011      	beq.n	800328e <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800326a:	68d9      	ldr	r1, [r3, #12]
 800326c:	4211      	tst	r1, r2
 800326e:	d00e      	beq.n	800328e <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003270:	3a09      	subs	r2, #9
 8003272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003274:	3207      	adds	r2, #7
 8003276:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	23c0      	movs	r3, #192	; 0xc0
 800327c:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003280:	421a      	tst	r2, r3
 8003282:	d100      	bne.n	8003286 <HAL_TIM_IRQHandler+0x52>
 8003284:	e075      	b.n	8003372 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	f7ff ffd2 	bl	800322e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	2300      	movs	r3, #0
 800328c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800328e:	2208      	movs	r2, #8
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	6919      	ldr	r1, [r3, #16]
 8003294:	4211      	tst	r1, r2
 8003296:	d00e      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x82>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003298:	68d9      	ldr	r1, [r3, #12]
 800329a:	4211      	tst	r1, r2
 800329c:	d00b      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800329e:	3a11      	subs	r2, #17
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032a2:	320d      	adds	r2, #13
 80032a4:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a6:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a8:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032aa:	079b      	lsls	r3, r3, #30
 80032ac:	d067      	beq.n	800337e <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	f7ff ffbe 	bl	800322e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b2:	2300      	movs	r3, #0
 80032b4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032b6:	2210      	movs	r2, #16
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	6919      	ldr	r1, [r3, #16]
 80032bc:	4211      	tst	r1, r2
 80032be:	d010      	beq.n	80032e2 <HAL_TIM_IRQHandler+0xae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032c0:	68d9      	ldr	r1, [r3, #12]
 80032c2:	4211      	tst	r1, r2
 80032c4:	d00d      	beq.n	80032e2 <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032c6:	3a21      	subs	r2, #33	; 0x21
 80032c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ca:	3219      	adds	r2, #25
 80032cc:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	23c0      	movs	r3, #192	; 0xc0
 80032d2:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d6:	421a      	tst	r2, r3
 80032d8:	d057      	beq.n	800338a <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 80032da:	f7ff ffa8 	bl	800322e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	2300      	movs	r3, #0
 80032e0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032e2:	2201      	movs	r2, #1
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	6919      	ldr	r1, [r3, #16]
 80032e8:	4211      	tst	r1, r2
 80032ea:	d007      	beq.n	80032fc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ec:	68d9      	ldr	r1, [r3, #12]
 80032ee:	4211      	tst	r1, r2
 80032f0:	d004      	beq.n	80032fc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032f2:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032f4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80032f8:	f7fe f8c4 	bl	8001484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	6919      	ldr	r1, [r3, #16]
 8003302:	4211      	tst	r1, r2
 8003304:	d008      	beq.n	8003318 <HAL_TIM_IRQHandler+0xe4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003306:	68d9      	ldr	r1, [r3, #12]
 8003308:	4211      	tst	r1, r2
 800330a:	d005      	beq.n	8003318 <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800330c:	3a02      	subs	r2, #2
 800330e:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003310:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003312:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003314:	f000 f8ad 	bl	8003472 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	05d2      	lsls	r2, r2, #23
 800331e:	d507      	bpl.n	8003330 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	0612      	lsls	r2, r2, #24
 8003324:	d504      	bpl.n	8003330 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003326:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003328:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800332a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800332c:	f000 f8a2 	bl	8003474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003330:	2240      	movs	r2, #64	; 0x40
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	6919      	ldr	r1, [r3, #16]
 8003336:	4211      	tst	r1, r2
 8003338:	d007      	beq.n	800334a <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800333a:	68d9      	ldr	r1, [r3, #12]
 800333c:	4211      	tst	r1, r2
 800333e:	d004      	beq.n	800334a <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003340:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003342:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003344:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003346:	f7ff ff74 	bl	8003232 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800334a:	2220      	movs	r2, #32
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	6919      	ldr	r1, [r3, #16]
 8003350:	4211      	tst	r1, r2
 8003352:	d007      	beq.n	8003364 <HAL_TIM_IRQHandler+0x130>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003354:	68d9      	ldr	r1, [r3, #12]
 8003356:	4211      	tst	r1, r2
 8003358:	d004      	beq.n	8003364 <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800335a:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800335c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800335e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003360:	f000 f886 	bl	8003470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003364:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003366:	f7ff ff61 	bl	800322c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336a:	0020      	movs	r0, r4
 800336c:	f7ff ff60 	bl	8003230 <HAL_TIM_PWM_PulseFinishedCallback>
 8003370:	e774      	b.n	800325c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	f7ff ff5b 	bl	800322c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003376:	0020      	movs	r0, r4
 8003378:	f7ff ff5a 	bl	8003230 <HAL_TIM_PWM_PulseFinishedCallback>
 800337c:	e785      	b.n	800328a <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337e:	f7ff ff55 	bl	800322c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003382:	0020      	movs	r0, r4
 8003384:	f7ff ff54 	bl	8003230 <HAL_TIM_PWM_PulseFinishedCallback>
 8003388:	e793      	b.n	80032b2 <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	f7ff ff4f 	bl	800322c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338e:	0020      	movs	r0, r4
 8003390:	f7ff ff4e 	bl	8003230 <HAL_TIM_PWM_PulseFinishedCallback>
 8003394:	e7a3      	b.n	80032de <HAL_TIM_IRQHandler+0xaa>
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	fffffeff 	.word	0xfffffeff

0800339c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800339c:	4a19      	ldr	r2, [pc, #100]	; (8003404 <TIM_Base_SetConfig+0x68>)
{
 800339e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80033a0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a2:	4290      	cmp	r0, r2
 80033a4:	d002      	beq.n	80033ac <TIM_Base_SetConfig+0x10>
 80033a6:	4c18      	ldr	r4, [pc, #96]	; (8003408 <TIM_Base_SetConfig+0x6c>)
 80033a8:	42a0      	cmp	r0, r4
 80033aa:	d108      	bne.n	80033be <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033ac:	2470      	movs	r4, #112	; 0x70
 80033ae:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80033b0:	684c      	ldr	r4, [r1, #4]
 80033b2:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b4:	4290      	cmp	r0, r2
 80033b6:	d00b      	beq.n	80033d0 <TIM_Base_SetConfig+0x34>
 80033b8:	4c13      	ldr	r4, [pc, #76]	; (8003408 <TIM_Base_SetConfig+0x6c>)
 80033ba:	42a0      	cmp	r0, r4
 80033bc:	d008      	beq.n	80033d0 <TIM_Base_SetConfig+0x34>
 80033be:	4c13      	ldr	r4, [pc, #76]	; (800340c <TIM_Base_SetConfig+0x70>)
 80033c0:	42a0      	cmp	r0, r4
 80033c2:	d005      	beq.n	80033d0 <TIM_Base_SetConfig+0x34>
 80033c4:	4c12      	ldr	r4, [pc, #72]	; (8003410 <TIM_Base_SetConfig+0x74>)
 80033c6:	42a0      	cmp	r0, r4
 80033c8:	d002      	beq.n	80033d0 <TIM_Base_SetConfig+0x34>
 80033ca:	4c12      	ldr	r4, [pc, #72]	; (8003414 <TIM_Base_SetConfig+0x78>)
 80033cc:	42a0      	cmp	r0, r4
 80033ce:	d103      	bne.n	80033d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033d0:	4c11      	ldr	r4, [pc, #68]	; (8003418 <TIM_Base_SetConfig+0x7c>)
 80033d2:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d4:	68cb      	ldr	r3, [r1, #12]
 80033d6:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033d8:	2480      	movs	r4, #128	; 0x80
 80033da:	43a3      	bics	r3, r4
 80033dc:	694c      	ldr	r4, [r1, #20]
 80033de:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 80033e0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e2:	688b      	ldr	r3, [r1, #8]
 80033e4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e6:	680b      	ldr	r3, [r1, #0]
 80033e8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033ea:	4290      	cmp	r0, r2
 80033ec:	d005      	beq.n	80033fa <TIM_Base_SetConfig+0x5e>
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <TIM_Base_SetConfig+0x74>)
 80033f0:	4298      	cmp	r0, r3
 80033f2:	d002      	beq.n	80033fa <TIM_Base_SetConfig+0x5e>
 80033f4:	4b07      	ldr	r3, [pc, #28]	; (8003414 <TIM_Base_SetConfig+0x78>)
 80033f6:	4298      	cmp	r0, r3
 80033f8:	d101      	bne.n	80033fe <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033fa:	690b      	ldr	r3, [r1, #16]
 80033fc:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033fe:	2301      	movs	r3, #1
 8003400:	6143      	str	r3, [r0, #20]
}
 8003402:	bd10      	pop	{r4, pc}
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40000400 	.word	0x40000400
 800340c:	40002000 	.word	0x40002000
 8003410:	40014400 	.word	0x40014400
 8003414:	40014800 	.word	0x40014800
 8003418:	fffffcff 	.word	0xfffffcff

0800341c <HAL_TIM_Base_Init>:
{
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003420:	2001      	movs	r0, #1
  if (htim == NULL)
 8003422:	2c00      	cmp	r4, #0
 8003424:	d023      	beq.n	800346e <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	0025      	movs	r5, r4
 8003428:	353d      	adds	r5, #61	; 0x3d
 800342a:	782b      	ldrb	r3, [r5, #0]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003432:	0023      	movs	r3, r4
 8003434:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003436:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003438:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 800343a:	f7fe fd1f 	bl	8001e7c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800343e:	2302      	movs	r3, #2
 8003440:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003442:	6820      	ldr	r0, [r4, #0]
 8003444:	1d21      	adds	r1, r4, #4
 8003446:	f7ff ffa9 	bl	800339c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800344a:	0022      	movs	r2, r4
 800344c:	2301      	movs	r3, #1
  return HAL_OK;
 800344e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003450:	3248      	adds	r2, #72	; 0x48
 8003452:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003454:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003456:	3a0a      	subs	r2, #10
 8003458:	7013      	strb	r3, [r2, #0]
 800345a:	7053      	strb	r3, [r2, #1]
 800345c:	7093      	strb	r3, [r2, #2]
 800345e:	70d3      	strb	r3, [r2, #3]
 8003460:	7113      	strb	r3, [r2, #4]
 8003462:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	7193      	strb	r3, [r2, #6]
 8003466:	71d3      	strb	r3, [r2, #7]
 8003468:	7213      	strb	r3, [r2, #8]
 800346a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800346c:	702b      	strb	r3, [r5, #0]
}
 800346e:	bd70      	pop	{r4, r5, r6, pc}

08003470 <HAL_TIMEx_CommutCallback>:
 8003470:	4770      	bx	lr

08003472 <HAL_TIMEx_BreakCallback>:
 8003472:	4770      	bx	lr

08003474 <HAL_TIMEx_Break2Callback>:
 8003474:	4770      	bx	lr

08003476 <__itoa>:
 8003476:	1e93      	subs	r3, r2, #2
 8003478:	b510      	push	{r4, lr}
 800347a:	000c      	movs	r4, r1
 800347c:	2b22      	cmp	r3, #34	; 0x22
 800347e:	d904      	bls.n	800348a <__itoa+0x14>
 8003480:	2300      	movs	r3, #0
 8003482:	001c      	movs	r4, r3
 8003484:	700b      	strb	r3, [r1, #0]
 8003486:	0020      	movs	r0, r4
 8003488:	bd10      	pop	{r4, pc}
 800348a:	2a0a      	cmp	r2, #10
 800348c:	d109      	bne.n	80034a2 <__itoa+0x2c>
 800348e:	2800      	cmp	r0, #0
 8003490:	da07      	bge.n	80034a2 <__itoa+0x2c>
 8003492:	232d      	movs	r3, #45	; 0x2d
 8003494:	700b      	strb	r3, [r1, #0]
 8003496:	2101      	movs	r1, #1
 8003498:	4240      	negs	r0, r0
 800349a:	1861      	adds	r1, r4, r1
 800349c:	f000 f808 	bl	80034b0 <__utoa>
 80034a0:	e7f1      	b.n	8003486 <__itoa+0x10>
 80034a2:	2100      	movs	r1, #0
 80034a4:	e7f9      	b.n	800349a <__itoa+0x24>

080034a6 <itoa>:
 80034a6:	b510      	push	{r4, lr}
 80034a8:	f7ff ffe5 	bl	8003476 <__itoa>
 80034ac:	bd10      	pop	{r4, pc}
	...

080034b0 <__utoa>:
 80034b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b2:	000c      	movs	r4, r1
 80034b4:	0016      	movs	r6, r2
 80034b6:	b08d      	sub	sp, #52	; 0x34
 80034b8:	2225      	movs	r2, #37	; 0x25
 80034ba:	0007      	movs	r7, r0
 80034bc:	4915      	ldr	r1, [pc, #84]	; (8003514 <__utoa+0x64>)
 80034be:	a802      	add	r0, sp, #8
 80034c0:	f000 f856 	bl	8003570 <memcpy>
 80034c4:	1e62      	subs	r2, r4, #1
 80034c6:	1eb3      	subs	r3, r6, #2
 80034c8:	2500      	movs	r5, #0
 80034ca:	9201      	str	r2, [sp, #4]
 80034cc:	2b22      	cmp	r3, #34	; 0x22
 80034ce:	d904      	bls.n	80034da <__utoa+0x2a>
 80034d0:	7025      	strb	r5, [r4, #0]
 80034d2:	002c      	movs	r4, r5
 80034d4:	0020      	movs	r0, r4
 80034d6:	b00d      	add	sp, #52	; 0x34
 80034d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034da:	0038      	movs	r0, r7
 80034dc:	0031      	movs	r1, r6
 80034de:	f7fc fe9f 	bl	8000220 <__aeabi_uidivmod>
 80034e2:	000b      	movs	r3, r1
 80034e4:	aa02      	add	r2, sp, #8
 80034e6:	5cd3      	ldrb	r3, [r2, r3]
 80034e8:	9a01      	ldr	r2, [sp, #4]
 80034ea:	0029      	movs	r1, r5
 80034ec:	3501      	adds	r5, #1
 80034ee:	5553      	strb	r3, [r2, r5]
 80034f0:	003b      	movs	r3, r7
 80034f2:	0007      	movs	r7, r0
 80034f4:	429e      	cmp	r6, r3
 80034f6:	d9f0      	bls.n	80034da <__utoa+0x2a>
 80034f8:	2300      	movs	r3, #0
 80034fa:	0022      	movs	r2, r4
 80034fc:	5563      	strb	r3, [r4, r5]
 80034fe:	000b      	movs	r3, r1
 8003500:	1ac8      	subs	r0, r1, r3
 8003502:	4283      	cmp	r3, r0
 8003504:	dde6      	ble.n	80034d4 <__utoa+0x24>
 8003506:	7810      	ldrb	r0, [r2, #0]
 8003508:	5ce5      	ldrb	r5, [r4, r3]
 800350a:	7015      	strb	r5, [r2, #0]
 800350c:	54e0      	strb	r0, [r4, r3]
 800350e:	3201      	adds	r2, #1
 8003510:	3b01      	subs	r3, #1
 8003512:	e7f5      	b.n	8003500 <__utoa+0x50>
 8003514:	08004c08 	.word	0x08004c08

08003518 <memset>:
 8003518:	0003      	movs	r3, r0
 800351a:	1882      	adds	r2, r0, r2
 800351c:	4293      	cmp	r3, r2
 800351e:	d100      	bne.n	8003522 <memset+0xa>
 8003520:	4770      	bx	lr
 8003522:	7019      	strb	r1, [r3, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	e7f9      	b.n	800351c <memset+0x4>

08003528 <__libc_init_array>:
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	2600      	movs	r6, #0
 800352c:	4c0c      	ldr	r4, [pc, #48]	; (8003560 <__libc_init_array+0x38>)
 800352e:	4d0d      	ldr	r5, [pc, #52]	; (8003564 <__libc_init_array+0x3c>)
 8003530:	1b64      	subs	r4, r4, r5
 8003532:	10a4      	asrs	r4, r4, #2
 8003534:	42a6      	cmp	r6, r4
 8003536:	d109      	bne.n	800354c <__libc_init_array+0x24>
 8003538:	2600      	movs	r6, #0
 800353a:	f000 f823 	bl	8003584 <_init>
 800353e:	4c0a      	ldr	r4, [pc, #40]	; (8003568 <__libc_init_array+0x40>)
 8003540:	4d0a      	ldr	r5, [pc, #40]	; (800356c <__libc_init_array+0x44>)
 8003542:	1b64      	subs	r4, r4, r5
 8003544:	10a4      	asrs	r4, r4, #2
 8003546:	42a6      	cmp	r6, r4
 8003548:	d105      	bne.n	8003556 <__libc_init_array+0x2e>
 800354a:	bd70      	pop	{r4, r5, r6, pc}
 800354c:	00b3      	lsls	r3, r6, #2
 800354e:	58eb      	ldr	r3, [r5, r3]
 8003550:	4798      	blx	r3
 8003552:	3601      	adds	r6, #1
 8003554:	e7ee      	b.n	8003534 <__libc_init_array+0xc>
 8003556:	00b3      	lsls	r3, r6, #2
 8003558:	58eb      	ldr	r3, [r5, r3]
 800355a:	4798      	blx	r3
 800355c:	3601      	adds	r6, #1
 800355e:	e7f2      	b.n	8003546 <__libc_init_array+0x1e>
 8003560:	08004c30 	.word	0x08004c30
 8003564:	08004c30 	.word	0x08004c30
 8003568:	08004c34 	.word	0x08004c34
 800356c:	08004c30 	.word	0x08004c30

08003570 <memcpy>:
 8003570:	2300      	movs	r3, #0
 8003572:	b510      	push	{r4, lr}
 8003574:	429a      	cmp	r2, r3
 8003576:	d100      	bne.n	800357a <memcpy+0xa>
 8003578:	bd10      	pop	{r4, pc}
 800357a:	5ccc      	ldrb	r4, [r1, r3]
 800357c:	54c4      	strb	r4, [r0, r3]
 800357e:	3301      	adds	r3, #1
 8003580:	e7f8      	b.n	8003574 <memcpy+0x4>
	...

08003584 <_init>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr

08003590 <_fini>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr
